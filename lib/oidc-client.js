(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./AuthService.js":
/*!************************!*\
  !*** ./AuthService.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IdentityAuthService = exports.AuthService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = __webpack_require__(/*! . */ "./lib/oidc-client.min.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AuthService = exports.AuthService = function () {
    function AuthService(settings, extraHeaders) {
        _classCallCheck(this, AuthService);

        this.settings = settings;
        this.extraHeaders = extraHeaders;
        this.userManager = new _.UserManager(settings);
    }

    AuthService.prototype.requestOrRenewToken = function requestOrRenewToken(state) {
        return this.userManager.signinClientCredentials({ state: state }, this.extraHeaders);
    };

    AuthService.prototype.getUser = function getUser() {
        return this.userManager.getUser().then(function (user) {
            if (!user) {
                return Promise.reject('User is not authenticated');
            } else {
                return Promise.resolve(user);
            }
        });
    };

    return AuthService;
}();

var IdentityAuthService = exports.IdentityAuthService = function () {
    function IdentityAuthService() {
        _classCallCheck(this, IdentityAuthService);
    }

    _createClass(IdentityAuthService, null, [{
        key: "settings",
        get: function get() {
            return this._settings;
        },
        set: function set(settings) {
            this._settings = settings;
        }
    }, {
        key: "extraHeaders",
        get: function get() {
            return this._extraHeaders;
        },
        set: function set(extraHeaders) {
            this._extraHeaders = extraHeaders;
        }
    }, {
        key: "instance",
        get: function get() {
            if (!this.authService) {
                this.authService = new AuthService(this._settings, this._extraHeaders);
            }

            return this.authService;
        }
    }]);

    return IdentityAuthService;
}();

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Log = __webpack_require__(/*! ./src/Log.js */ "./src/Log.js");

var _OidcClient = __webpack_require__(/*! ./src/OidcClient.js */ "./src/OidcClient.js");

var _OidcClientSettings = __webpack_require__(/*! ./src/OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _WebStorageStateStore = __webpack_require__(/*! ./src/WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _InMemoryWebStorage = __webpack_require__(/*! ./src/InMemoryWebStorage.js */ "./src/InMemoryWebStorage.js");

var _UserManager = __webpack_require__(/*! ./src/UserManager.js */ "./src/UserManager.js");

var _AccessTokenEvents = __webpack_require__(/*! ./src/AccessTokenEvents.js */ "./src/AccessTokenEvents.js");

var _MetadataService = __webpack_require__(/*! ./src/MetadataService.js */ "./src/MetadataService.js");

var _CordovaPopupNavigator = __webpack_require__(/*! ./src/CordovaPopupNavigator.js */ "./src/CordovaPopupNavigator.js");

var _CordovaIFrameNavigator = __webpack_require__(/*! ./src/CordovaIFrameNavigator.js */ "./src/CordovaIFrameNavigator.js");

var _CheckSessionIFrame = __webpack_require__(/*! ./src/CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");

var _TokenRevocationClient = __webpack_require__(/*! ./src/TokenRevocationClient.js */ "./src/TokenRevocationClient.js");

var _SessionMonitor = __webpack_require__(/*! ./src/SessionMonitor.js */ "./src/SessionMonitor.js");

var _Global = __webpack_require__(/*! ./src/Global.js */ "./src/Global.js");

var _User = __webpack_require__(/*! ./src/User.js */ "./src/User.js");

var _JsonService = __webpack_require__(/*! ./src/JsonService.js */ "./src/JsonService.js");

var _AuthService = __webpack_require__(/*! ./AuthService.js */ "./AuthService.js");

var _version = __webpack_require__(/*! ./version.js */ "./version.js");

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

exports.default = {
    Version: _version.Version,
    Log: _Log.Log,
    OidcClient: _OidcClient.OidcClient,
    OidcClientSettings: _OidcClientSettings.OidcClientSettings,
    WebStorageStateStore: _WebStorageStateStore.WebStorageStateStore,
    InMemoryWebStorage: _InMemoryWebStorage.InMemoryWebStorage,
    UserManager: _UserManager.UserManager,
    AccessTokenEvents: _AccessTokenEvents.AccessTokenEvents,
    MetadataService: _MetadataService.MetadataService,
    CordovaPopupNavigator: _CordovaPopupNavigator.CordovaPopupNavigator,
    CordovaIFrameNavigator: _CordovaIFrameNavigator.CordovaIFrameNavigator,
    CheckSessionIFrame: _CheckSessionIFrame.CheckSessionIFrame,
    TokenRevocationClient: _TokenRevocationClient.TokenRevocationClient,
    SessionMonitor: _SessionMonitor.SessionMonitor,
    Global: _Global.Global,
    User: _User.User,
    JsonService: _JsonService.JsonService,
    AuthService: _AuthService.AuthService,
    IdentityAuthService: _AuthService.IdentityAuthService
};
module.exports = exports['default'];

/***/ }),

/***/ "./jsrsasign/dist/jsrsasign.js":
/*!*************************************!*\
  !*** ./jsrsasign/dist/jsrsasign.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * jsrsasign(all) 8.0.12 (2018-04-22) (c) 2010-2018 Kenji Urushima | kjur.github.com/jsrsasign/license
 */

var navigator = {};
navigator.userAgent = false;

var window = {};

/*!
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/
if (YAHOO === undefined) {
  var YAHOO = {};
}YAHOO.lang = { extend: function extend(g, h, f) {
    if (!h || !g) {
      throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
    }var d = function d() {};d.prototype = h.prototype;g.prototype = new d();g.prototype.constructor = g;g.superclass = h.prototype;if (h.prototype.constructor == Object.prototype.constructor) {
      h.prototype.constructor = h;
    }if (f) {
      var b;for (b in f) {
        g.prototype[b] = f[b];
      }var e = function e() {},
          c = ["toString", "valueOf"];try {
        if (/MSIE/.test(navigator.userAgent)) {
          e = function e(j, i) {
            for (b = 0; b < c.length; b = b + 1) {
              var l = c[b],
                  k = i[l];if (typeof k === "function" && k != Object.prototype[l]) {
                j[l] = k;
              }
            }
          };
        }
      } catch (a) {}e(g.prototype, f);
    }
  } };
/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */
var CryptoJS = CryptoJS || function (e, g) {
  var a = {};var b = a.lib = {};var j = b.Base = function () {
    function n() {}return { extend: function extend(p) {
        n.prototype = this;var o = new n();if (p) {
          o.mixIn(p);
        }if (!o.hasOwnProperty("init")) {
          o.init = function () {
            o.$super.init.apply(this, arguments);
          };
        }o.init.prototype = o;o.$super = this;return o;
      }, create: function create() {
        var o = this.extend();o.init.apply(o, arguments);return o;
      }, init: function init() {}, mixIn: function mixIn(p) {
        for (var o in p) {
          if (p.hasOwnProperty(o)) {
            this[o] = p[o];
          }
        }if (p.hasOwnProperty("toString")) {
          this.toString = p.toString;
        }
      }, clone: function clone() {
        return this.init.prototype.extend(this);
      } };
  }();var l = b.WordArray = j.extend({ init: function init(o, n) {
      o = this.words = o || [];if (n != g) {
        this.sigBytes = n;
      } else {
        this.sigBytes = o.length * 4;
      }
    }, toString: function toString(n) {
      return (n || h).stringify(this);
    }, concat: function concat(t) {
      var q = this.words;var p = t.words;var n = this.sigBytes;var s = t.sigBytes;this.clamp();if (n % 4) {
        for (var r = 0; r < s; r++) {
          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
        }
      } else {
        for (var r = 0; r < s; r += 4) {
          q[n + r >>> 2] = p[r >>> 2];
        }
      }this.sigBytes += s;return this;
    }, clamp: function clamp() {
      var o = this.words;var n = this.sigBytes;o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;o.length = e.ceil(n / 4);
    }, clone: function clone() {
      var n = j.clone.call(this);n.words = this.words.slice(0);return n;
    }, random: function random(p) {
      var o = [];for (var n = 0; n < p; n += 4) {
        o.push(e.random() * 4294967296 | 0);
      }return new l.init(o, p);
    } });var m = a.enc = {};var h = m.Hex = { stringify: function stringify(p) {
      var r = p.words;var o = p.sigBytes;var q = [];for (var n = 0; n < o; n++) {
        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;q.push((s >>> 4).toString(16));q.push((s & 15).toString(16));
      }return q.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o += 2) {
        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
      }return new l.init(q, n / 2);
    } };var d = m.Latin1 = { stringify: function stringify(q) {
      var r = q.words;var p = q.sigBytes;var n = [];for (var o = 0; o < p; o++) {
        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;n.push(String.fromCharCode(s));
      }return n.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o++) {
        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
      }return new l.init(q, n);
    } };var c = m.Utf8 = { stringify: function stringify(n) {
      try {
        return decodeURIComponent(escape(d.stringify(n)));
      } catch (o) {
        throw new Error("Malformed UTF-8 data");
      }
    }, parse: function parse(n) {
      return d.parse(unescape(encodeURIComponent(n)));
    } };var i = b.BufferedBlockAlgorithm = j.extend({ reset: function reset() {
      this._data = new l.init();this._nDataBytes = 0;
    }, _append: function _append(n) {
      if (typeof n == "string") {
        n = c.parse(n);
      }this._data.concat(n);this._nDataBytes += n.sigBytes;
    }, _process: function _process(w) {
      var q = this._data;var x = q.words;var n = q.sigBytes;var t = this.blockSize;var v = t * 4;var u = n / v;if (w) {
        u = e.ceil(u);
      } else {
        u = e.max((u | 0) - this._minBufferSize, 0);
      }var s = u * t;var r = e.min(s * 4, n);if (s) {
        for (var p = 0; p < s; p += t) {
          this._doProcessBlock(x, p);
        }var o = x.splice(0, s);q.sigBytes -= r;
      }return new l.init(o, r);
    }, clone: function clone() {
      var n = j.clone.call(this);n._data = this._data.clone();return n;
    }, _minBufferSize: 0 });var f = b.Hasher = i.extend({ cfg: j.extend(), init: function init(n) {
      this.cfg = this.cfg.extend(n);this.reset();
    }, reset: function reset() {
      i.reset.call(this);this._doReset();
    }, update: function update(n) {
      this._append(n);this._process();return this;
    }, finalize: function finalize(n) {
      if (n) {
        this._append(n);
      }var o = this._doFinalize();return o;
    }, blockSize: 512 / 32, _createHelper: function _createHelper(n) {
      return function (p, o) {
        return new n.init(o).finalize(p);
      };
    }, _createHmacHelper: function _createHmacHelper(n) {
      return function (p, o) {
        return new k.HMAC.init(n, o).finalize(p);
      };
    } });var k = a.algo = {};return a;
}(Math);
/*
CryptoJS v3.1.2 x64-core-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (g) {
  var a = CryptoJS,
      f = a.lib,
      e = f.Base,
      h = f.WordArray,
      a = a.x64 = {};a.Word = e.extend({ init: function init(b, c) {
      this.high = b;this.low = c;
    } });a.WordArray = e.extend({ init: function init(b, c) {
      b = this.words = b || [];this.sigBytes = c != g ? c : 8 * b.length;
    }, toX32: function toX32() {
      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
        var e = b[d];a.push(e.high);a.push(e.low);
      }return h.create(a, this.sigBytes);
    }, clone: function clone() {
      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
        c[d] = c[d].clone();
      }return b;
    } });
})();

/*
CryptoJS v3.1.2 enc-base64.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var h = CryptoJS,
      j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
      var e = b.words,
          f = b.sigBytes,
          c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
        }
      }if (e = c.charAt(64)) for (; b.length % 4;) {
        b.push(e);
      }return b.join("");
    }, parse: function parse(b) {
      var e = b.length,
          f = this._map,
          c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
        if (d % 4) {
          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
        }
      }return j.create(c, a);
    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
})();

/*
CryptoJS v3.1.2 sha256-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (k) {
  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
    return 4294967296 * (q - (q | 0)) | 0;
  }, l = 2, b = 0; 64 > b;) {
    var d;a: {
      d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
        if (!(d % r)) {
          d = !1;break a;
        }
      }d = !0;
    }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
  }var n = [],
      h = h.SHA256 = j.extend({ _doReset: function _doReset() {
      this._hash = new v.init(s.slice(0));
    }, _doProcessBlock: function _doProcessBlock(q, h) {
      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
        if (16 > e) n[e] = q[h + e] | 0;else {
          var m = n[e - 15],
              p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
        }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
      }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
    }, _doFinalize: function _doFinalize() {
      var d = this._data,
          b = d.words,
          a = 8 * this._nDataBytes,
          c = 8 * d.sigBytes;
      b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
    }, clone: function clone() {
      var b = j.clone.call(this);b._hash = this._hash.clone();return b;
    } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
})(Math);

/*
CryptoJS v3.1.2 sha512-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  function a() {
    return d.create.apply(d, arguments);
  }for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
    v[w] = a();
  }e = e.SHA512 = r.extend({ _doReset: function _doReset() {
      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
    }, _doProcessBlock: function _doProcessBlock(a, d) {
      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
        var s = v[m];if (16 > m) var j = s.high = a[d + 2 * m] | 0,
            b = s.low = a[d + 2 * m + 1] | 0;else {
          var j = v[m - 15],
              b = j.high,
              p = j.low,
              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
              u = v[m - 2],
              b = u.high,
              c = u.low,
              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
              b = v[m - 7],
              W = b.high,
              t = v[m - 16],
              q = t.high,
              t = t.low,
              b = p + b.low,
              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
              b = b + c,
              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
              b = b + t,
              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);s.high = j;s.low = b;
        }var W = l & R ^ ~l & S,
            t = h & C ^ ~h & D,
            s = k & z ^ k & A ^ z & A,
            T = g & x ^ g & y ^ x & y,
            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
            c = ea[m],
            fa = c.high,
            da = c.low,
            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
            c = c + t,
            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
            c = c + da,
            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
            c = c + b,
            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
            b = u + T,
            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
            V = S,
            E = D,
            S = R,
            D = C,
            R = l,
            C = h,
            h = B + c | 0,
            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
            U = A,
            B = y,
            A = z,
            y = x,
            z = k,
            x = g,
            g = c + b | 0,
            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
      }J = F.low = J + g;F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);K = e.low = K + x;e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);L = n.low = L + y;n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);M = r.low = M + B;r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);N = G.low = N + h;G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);O = H.low = O + C;H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);P = I.low = P + D;
      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);Q = f.low = Q + E;f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
    }, _doFinalize: function _doFinalize() {
      var a = this._data,
          d = a.words,
          f = 8 * this._nDataBytes,
          e = 8 * a.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);d[(e + 128 >>> 10 << 5) + 31] = f;a.sigBytes = 4 * d.length;this._process();return this._hash.toX32();
    }, clone: function clone() {
      var a = r.clone.call(this);a._hash = this._hash.clone();return a;
    }, blockSize: 32 });n.SHA512 = r._createHelper(e);n.HmacSHA512 = r._createHmacHelper(e);
})();

/*
CryptoJS v3.1.2 sha384-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var c = CryptoJS,
      a = c.x64,
      b = a.Word,
      e = a.WordArray,
      a = c.algo,
      d = a.SHA512,
      a = a.SHA384 = d.extend({ _doReset: function _doReset() {
      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
    }, _doFinalize: function _doFinalize() {
      var a = d._doFinalize.call(this);a.sigBytes -= 16;return a;
    } });c.SHA384 = d._createHelper(a);c.HmacSHA384 = d._createHmacHelper(a);
})();

/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad = "=";function hex2b64(d) {
  var b;var e;var a = "";for (b = 0; b + 3 <= d.length; b += 3) {
    e = parseInt(d.substring(b, b + 3), 16);a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
  }if (b + 1 == d.length) {
    e = parseInt(d.substring(b, b + 1), 16);a += b64map.charAt(e << 2);
  } else {
    if (b + 2 == d.length) {
      e = parseInt(d.substring(b, b + 2), 16);a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
    }
  }if (b64pad) {
    while ((a.length & 3) > 0) {
      a += b64pad;
    }
  }return a;
}function b64tohex(f) {
  var d = "";var e;var b = 0;var c;var a;for (e = 0; e < f.length; ++e) {
    if (f.charAt(e) == b64pad) {
      break;
    }a = b64map.indexOf(f.charAt(e));if (a < 0) {
      continue;
    }if (b == 0) {
      d += int2char(a >> 2);c = a & 3;b = 1;
    } else {
      if (b == 1) {
        d += int2char(c << 2 | a >> 4);c = a & 15;b = 2;
      } else {
        if (b == 2) {
          d += int2char(c);d += int2char(a >> 2);c = a & 3;b = 3;
        } else {
          d += int2char(c << 2 | a >> 4);d += int2char(a & 15);b = 0;
        }
      }
    }
  }if (b == 1) {
    d += int2char(c << 2);
  }return d;
}function b64toBA(e) {
  var d = b64tohex(e);var c;var b = new Array();for (c = 0; 2 * c < d.length; ++c) {
    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
  }return b;
};
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var dbits;var canary = 244837814094590;var j_lm = (canary & 16777215) == 15715070;function BigInteger(e, d, f) {
  if (e != null) {
    if ("number" == typeof e) {
      this.fromNumber(e, d, f);
    } else {
      if (d == null && "string" != typeof e) {
        this.fromString(e, 256);
      } else {
        this.fromString(e, d);
      }
    }
  }
}function nbi() {
  return new BigInteger(null);
}function am1(f, a, b, e, h, g) {
  while (--g >= 0) {
    var d = a * this[f++] + b[e] + h;h = Math.floor(d / 67108864);b[e++] = d & 67108863;
  }return h;
}function am2(f, q, r, e, o, a) {
  var k = q & 32767,
      p = q >> 15;while (--a >= 0) {
    var d = this[f] & 32767;var g = this[f++] >> 15;var b = p * d + g * k;d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);r[e++] = d & 1073741823;
  }return o;
}function am3(f, q, r, e, o, a) {
  var k = q & 16383,
      p = q >> 14;while (--a >= 0) {
    var d = this[f] & 16383;var g = this[f++] >> 14;var b = p * d + g * k;d = k * d + ((b & 16383) << 14) + r[e] + o;o = (d >> 28) + (b >> 14) + p * g;r[e++] = d & 268435455;
  }return o;
}if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;dbits = 30;
} else {
  if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;dbits = 26;
  } else {
    BigInteger.prototype.am = am3;dbits = 28;
  }
}BigInteger.prototype.DB = dbits;BigInteger.prototype.DM = (1 << dbits) - 1;BigInteger.prototype.DV = 1 << dbits;var BI_FP = 52;BigInteger.prototype.FV = Math.pow(2, BI_FP);BigInteger.prototype.F1 = BI_FP - dbits;BigInteger.prototype.F2 = 2 * dbits - BI_FP;var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC = new Array();var rr, vv;rr = "0".charCodeAt(0);for (vv = 0; vv <= 9; ++vv) {
  BI_RC[rr++] = vv;
}rr = "a".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}rr = "A".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}function int2char(a) {
  return BI_RM.charAt(a);
}function intAt(b, a) {
  var d = BI_RC[b.charCodeAt(a)];return d == null ? -1 : d;
}function bnpCopyTo(b) {
  for (var a = this.t - 1; a >= 0; --a) {
    b[a] = this[a];
  }b.t = this.t;b.s = this.s;
}function bnpFromInt(a) {
  this.t = 1;this.s = a < 0 ? -1 : 0;if (a > 0) {
    this[0] = a;
  } else {
    if (a < -1) {
      this[0] = a + this.DV;
    } else {
      this.t = 0;
    }
  }
}function nbv(a) {
  var b = nbi();b.fromInt(a);return b;
}function bnpFromString(h, c) {
  var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 256) {
        e = 8;
      } else {
        if (c == 2) {
          e = 1;
        } else {
          if (c == 32) {
            e = 5;
          } else {
            if (c == 4) {
              e = 2;
            } else {
              this.fromRadix(h, c);return;
            }
          }
        }
      }
    }
  }this.t = 0;this.s = 0;var g = h.length,
      d = false,
      f = 0;while (--g >= 0) {
    var a = e == 8 ? h[g] & 255 : intAt(h, g);if (a < 0) {
      if (h.charAt(g) == "-") {
        d = true;
      }continue;
    }d = false;if (f == 0) {
      this[this.t++] = a;
    } else {
      if (f + e > this.DB) {
        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;this[this.t++] = a >> this.DB - f;
      } else {
        this[this.t - 1] |= a << f;
      }
    }f += e;if (f >= this.DB) {
      f -= this.DB;
    }
  }if (e == 8 && (h[0] & 128) != 0) {
    this.s = -1;if (f > 0) {
      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
    }
  }this.clamp();if (d) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpClamp() {
  var a = this.s & this.DM;while (this.t > 0 && this[this.t - 1] == a) {
    --this.t;
  }
}function bnToString(c) {
  if (this.s < 0) {
    return "-" + this.negate().toString(c);
  }var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 2) {
        e = 1;
      } else {
        if (c == 32) {
          e = 5;
        } else {
          if (c == 4) {
            e = 2;
          } else {
            return this.toRadix(c);
          }
        }
      }
    }
  }var g = (1 << e) - 1,
      l,
      a = false,
      h = "",
      f = this.t;var j = this.DB - f * this.DB % e;if (f-- > 0) {
    if (j < this.DB && (l = this[f] >> j) > 0) {
      a = true;h = int2char(l);
    }while (f >= 0) {
      if (j < e) {
        l = (this[f] & (1 << j) - 1) << e - j;l |= this[--f] >> (j += this.DB - e);
      } else {
        l = this[f] >> (j -= e) & g;if (j <= 0) {
          j += this.DB;--f;
        }
      }if (l > 0) {
        a = true;
      }if (a) {
        h += int2char(l);
      }
    }
  }return a ? h : "0";
}function bnNegate() {
  var a = nbi();BigInteger.ZERO.subTo(this, a);return a;
}function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}function bnCompareTo(b) {
  var d = this.s - b.s;if (d != 0) {
    return d;
  }var c = this.t;d = c - b.t;if (d != 0) {
    return this.s < 0 ? -d : d;
  }while (--c >= 0) {
    if ((d = this[c] - b[c]) != 0) {
      return d;
    }
  }return 0;
}function nbits(a) {
  var c = 1,
      b;if ((b = a >>> 16) != 0) {
    a = b;c += 16;
  }if ((b = a >> 8) != 0) {
    a = b;c += 8;
  }if ((b = a >> 4) != 0) {
    a = b;c += 4;
  }if ((b = a >> 2) != 0) {
    a = b;c += 2;
  }if ((b = a >> 1) != 0) {
    a = b;c += 1;
  }return c;
}function bnBitLength() {
  if (this.t <= 0) {
    return 0;
  }return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}function bnpDLShiftTo(c, b) {
  var a;for (a = this.t - 1; a >= 0; --a) {
    b[a + c] = this[a];
  }for (a = c - 1; a >= 0; --a) {
    b[a] = 0;
  }b.t = this.t + c;b.s = this.s;
}function bnpDRShiftTo(c, b) {
  for (var a = c; a < this.t; ++a) {
    b[a - c] = this[a];
  }b.t = Math.max(this.t - c, 0);b.s = this.s;
}function bnpLShiftTo(j, e) {
  var b = j % this.DB;var a = this.DB - b;var g = (1 << a) - 1;var f = Math.floor(j / this.DB),
      h = this.s << b & this.DM,
      d;for (d = this.t - 1; d >= 0; --d) {
    e[d + f + 1] = this[d] >> a | h;h = (this[d] & g) << b;
  }for (d = f - 1; d >= 0; --d) {
    e[d] = 0;
  }e[f] = h;e.t = this.t + f + 1;e.s = this.s;e.clamp();
}function bnpRShiftTo(g, d) {
  d.s = this.s;var e = Math.floor(g / this.DB);if (e >= this.t) {
    d.t = 0;return;
  }var b = g % this.DB;var a = this.DB - b;var f = (1 << b) - 1;d[0] = this[e] >> b;for (var c = e + 1; c < this.t; ++c) {
    d[c - e - 1] |= (this[c] & f) << a;d[c - e] = this[c] >> b;
  }if (b > 0) {
    d[this.t - e - 1] |= (this.s & f) << a;
  }d.t = this.t - e;d.clamp();
}function bnpSubTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] - d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g -= d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g -= d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g -= d.s;
  }f.s = g < 0 ? -1 : 0;if (g < -1) {
    f[e++] = this.DV + g;
  } else {
    if (g > 0) {
      f[e++] = g;
    }
  }f.t = e;f.clamp();
}function bnpMultiplyTo(c, e) {
  var b = this.abs(),
      f = c.abs();var d = b.t;e.t = d + f.t;while (--d >= 0) {
    e[d] = 0;
  }for (d = 0; d < f.t; ++d) {
    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
  }e.s = 0;e.clamp();if (this.s != c.s) {
    BigInteger.ZERO.subTo(e, e);
  }
}function bnpSquareTo(d) {
  var a = this.abs();var b = d.t = 2 * a.t;while (--b >= 0) {
    d[b] = 0;
  }for (b = 0; b < a.t - 1; ++b) {
    var e = a.am(b, a[b], d, 2 * b, 0, 1);if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
      d[b + a.t] -= a.DV;d[b + a.t + 1] = 1;
    }
  }if (d.t > 0) {
    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
  }d.s = 0;d.clamp();
}function bnpDivRemTo(n, h, g) {
  var w = n.abs();if (w.t <= 0) {
    return;
  }var k = this.abs();if (k.t < w.t) {
    if (h != null) {
      h.fromInt(0);
    }if (g != null) {
      this.copyTo(g);
    }return;
  }if (g == null) {
    g = nbi();
  }var d = nbi(),
      a = this.s,
      l = n.s;var v = this.DB - nbits(w[w.t - 1]);if (v > 0) {
    w.lShiftTo(v, d);k.lShiftTo(v, g);
  } else {
    w.copyTo(d);k.copyTo(g);
  }var p = d.t;var b = d[p - 1];if (b == 0) {
    return;
  }var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);var A = this.FV / o,
      z = (1 << this.F1) / o,
      x = 1 << this.F2;var u = g.t,
      s = u - p,
      f = h == null ? nbi() : h;d.dlShiftTo(s, f);if (g.compareTo(f) >= 0) {
    g[g.t++] = 1;g.subTo(f, g);
  }BigInteger.ONE.dlShiftTo(p, f);f.subTo(d, d);while (d.t < p) {
    d[d.t++] = 0;
  }while (--s >= 0) {
    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
      d.dlShiftTo(s, f);g.subTo(f, g);while (g[u] < --c) {
        g.subTo(f, g);
      }
    }
  }if (h != null) {
    g.drShiftTo(p, h);if (a != l) {
      BigInteger.ZERO.subTo(h, h);
    }
  }g.t = p;g.clamp();if (v > 0) {
    g.rShiftTo(v, g);
  }if (a < 0) {
    BigInteger.ZERO.subTo(g, g);
  }
}function bnMod(b) {
  var c = nbi();this.abs().divRemTo(b, null, c);if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
    b.subTo(c, c);
  }return c;
}function Classic(a) {
  this.m = a;
}function cConvert(a) {
  if (a.s < 0 || a.compareTo(this.m) >= 0) {
    return a.mod(this.m);
  } else {
    return a;
  }
}function cRevert(a) {
  return a;
}function cReduce(a) {
  a.divRemTo(this.m, null, a);
}function cMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}function cSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}Classic.prototype.convert = cConvert;Classic.prototype.revert = cRevert;Classic.prototype.reduce = cReduce;Classic.prototype.mulTo = cMulTo;Classic.prototype.sqrTo = cSqrTo;function bnpInvDigit() {
  if (this.t < 1) {
    return 0;
  }var a = this[0];if ((a & 1) == 0) {
    return 0;
  }var b = a & 3;b = b * (2 - (a & 15) * b) & 15;b = b * (2 - (a & 255) * b) & 255;b = b * (2 - ((a & 65535) * b & 65535)) & 65535;b = b * (2 - a * b % this.DV) % this.DV;return b > 0 ? this.DV - b : -b;
}function Montgomery(a) {
  this.m = a;this.mp = a.invDigit();this.mpl = this.mp & 32767;this.mph = this.mp >> 15;this.um = (1 << a.DB - 15) - 1;this.mt2 = 2 * a.t;
}function montConvert(a) {
  var b = nbi();a.abs().dlShiftTo(this.m.t, b);b.divRemTo(this.m, null, b);if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
    this.m.subTo(b, b);
  }return b;
}function montRevert(a) {
  var b = nbi();a.copyTo(b);this.reduce(b);return b;
}function montReduce(a) {
  while (a.t <= this.mt2) {
    a[a.t++] = 0;
  }for (var c = 0; c < this.m.t; ++c) {
    var b = a[c] & 32767;var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;b = c + this.m.t;a[b] += this.m.am(0, d, a, c, 0, this.m.t);while (a[b] >= a.DV) {
      a[b] -= a.DV;a[++b]++;
    }
  }a.clamp();a.drShiftTo(this.m.t, a);if (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function montSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function montMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Montgomery.prototype.convert = montConvert;Montgomery.prototype.revert = montRevert;Montgomery.prototype.reduce = montReduce;Montgomery.prototype.mulTo = montMulTo;Montgomery.prototype.sqrTo = montSqrTo;function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}function bnpExp(h, j) {
  if (h > 4294967295 || h < 1) {
    return BigInteger.ONE;
  }var f = nbi(),
      a = nbi(),
      d = j.convert(this),
      c = nbits(h) - 1;d.copyTo(f);while (--c >= 0) {
    j.sqrTo(f, a);if ((h & 1 << c) > 0) {
      j.mulTo(a, d, f);
    } else {
      var b = f;f = a;a = b;
    }
  }return j.revert(f);
}function bnModPowInt(b, a) {
  var c;if (b < 256 || a.isEven()) {
    c = new Classic(a);
  } else {
    c = new Montgomery(a);
  }return this.exp(b, c);
}BigInteger.prototype.copyTo = bnpCopyTo;BigInteger.prototype.fromInt = bnpFromInt;BigInteger.prototype.fromString = bnpFromString;BigInteger.prototype.clamp = bnpClamp;BigInteger.prototype.dlShiftTo = bnpDLShiftTo;BigInteger.prototype.drShiftTo = bnpDRShiftTo;BigInteger.prototype.lShiftTo = bnpLShiftTo;BigInteger.prototype.rShiftTo = bnpRShiftTo;BigInteger.prototype.subTo = bnpSubTo;BigInteger.prototype.multiplyTo = bnpMultiplyTo;BigInteger.prototype.squareTo = bnpSquareTo;BigInteger.prototype.divRemTo = bnpDivRemTo;BigInteger.prototype.invDigit = bnpInvDigit;BigInteger.prototype.isEven = bnpIsEven;BigInteger.prototype.exp = bnpExp;BigInteger.prototype.toString = bnToString;BigInteger.prototype.negate = bnNegate;BigInteger.prototype.abs = bnAbs;BigInteger.prototype.compareTo = bnCompareTo;BigInteger.prototype.bitLength = bnBitLength;BigInteger.prototype.mod = bnMod;BigInteger.prototype.modPowInt = bnModPowInt;BigInteger.ZERO = nbv(0);BigInteger.ONE = nbv(1);
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function bnClone() {
  var a = nbi();this.copyTo(a);return a;
}function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) {
      return this[0] - this.DV;
    } else {
      if (this.t == 0) {
        return -1;
      }
    }
  } else {
    if (this.t == 1) {
      return this[0];
    } else {
      if (this.t == 0) {
        return 0;
      }
    }
  }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}function bnByteValue() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}function bnShortValue() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}function bnpChunkSize(a) {
  return Math.floor(Math.LN2 * this.DB / Math.log(a));
}function bnSigNum() {
  if (this.s < 0) {
    return -1;
  } else {
    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
      return 0;
    } else {
      return 1;
    }
  }
}function bnpToRadix(c) {
  if (c == null) {
    c = 10;
  }if (this.signum() == 0 || c < 2 || c > 36) {
    return "0";
  }var f = this.chunkSize(c);var e = Math.pow(c, f);var i = nbv(e),
      j = nbi(),
      h = nbi(),
      g = "";this.divRemTo(i, j, h);while (j.signum() > 0) {
    g = (e + h.intValue()).toString(c).substr(1) + g;j.divRemTo(i, j, h);
  }return h.intValue().toString(c) + g;
}function bnpFromRadix(m, h) {
  this.fromInt(0);if (h == null) {
    h = 10;
  }var f = this.chunkSize(h);var g = Math.pow(h, f),
      e = false,
      a = 0,
      l = 0;for (var c = 0; c < m.length; ++c) {
    var k = intAt(m, c);if (k < 0) {
      if (m.charAt(c) == "-" && this.signum() == 0) {
        e = true;
      }continue;
    }l = h * l + k;if (++a >= f) {
      this.dMultiply(g);this.dAddOffset(l, 0);a = 0;l = 0;
    }
  }if (a > 0) {
    this.dMultiply(Math.pow(h, a));this.dAddOffset(l, 0);
  }if (e) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpFromNumber(f, e, h) {
  if ("number" == typeof e) {
    if (f < 2) {
      this.fromInt(1);
    } else {
      this.fromNumber(f, h);if (!this.testBit(f - 1)) {
        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
      }if (this.isEven()) {
        this.dAddOffset(1, 0);
      }while (!this.isProbablePrime(e)) {
        this.dAddOffset(2, 0);if (this.bitLength() > f) {
          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
        }
      }
    }
  } else {
    var d = new Array(),
        g = f & 7;d.length = (f >> 3) + 1;e.nextBytes(d);if (g > 0) {
      d[0] &= (1 << g) - 1;
    } else {
      d[0] = 0;
    }this.fromString(d, 256);
  }
}function bnToByteArray() {
  var b = this.t,
      c = new Array();c[0] = this.s;var e = this.DB - b * this.DB % 8,
      f,
      a = 0;if (b-- > 0) {
    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
      c[a++] = f | this.s << this.DB - e;
    }while (b >= 0) {
      if (e < 8) {
        f = (this[b] & (1 << e) - 1) << 8 - e;f |= this[--b] >> (e += this.DB - 8);
      } else {
        f = this[b] >> (e -= 8) & 255;if (e <= 0) {
          e += this.DB;--b;
        }
      }if ((f & 128) != 0) {
        f |= -256;
      }if (a == 0 && (this.s & 128) != (f & 128)) {
        ++a;
      }if (a > 0 || f != this.s) {
        c[a++] = f;
      }
    }
  }return c;
}function bnEquals(b) {
  return this.compareTo(b) == 0;
}function bnMin(b) {
  return this.compareTo(b) < 0 ? this : b;
}function bnMax(b) {
  return this.compareTo(b) > 0 ? this : b;
}function bnpBitwiseTo(c, h, e) {
  var d,
      g,
      b = Math.min(c.t, this.t);for (d = 0; d < b; ++d) {
    e[d] = h(this[d], c[d]);
  }if (c.t < this.t) {
    g = c.s & this.DM;for (d = b; d < this.t; ++d) {
      e[d] = h(this[d], g);
    }e.t = this.t;
  } else {
    g = this.s & this.DM;for (d = b; d < c.t; ++d) {
      e[d] = h(g, c[d]);
    }e.t = c.t;
  }e.s = h(this.s, c.s);e.clamp();
}function op_and(a, b) {
  return a & b;
}function bnAnd(b) {
  var c = nbi();this.bitwiseTo(b, op_and, c);return c;
}function op_or(a, b) {
  return a | b;
}function bnOr(b) {
  var c = nbi();this.bitwiseTo(b, op_or, c);return c;
}function op_xor(a, b) {
  return a ^ b;
}function bnXor(b) {
  var c = nbi();this.bitwiseTo(b, op_xor, c);return c;
}function op_andnot(a, b) {
  return a & ~b;
}function bnAndNot(b) {
  var c = nbi();this.bitwiseTo(b, op_andnot, c);return c;
}function bnNot() {
  var b = nbi();for (var a = 0; a < this.t; ++a) {
    b[a] = this.DM & ~this[a];
  }b.t = this.t;b.s = ~this.s;return b;
}function bnShiftLeft(b) {
  var a = nbi();if (b < 0) {
    this.rShiftTo(-b, a);
  } else {
    this.lShiftTo(b, a);
  }return a;
}function bnShiftRight(b) {
  var a = nbi();if (b < 0) {
    this.lShiftTo(-b, a);
  } else {
    this.rShiftTo(b, a);
  }return a;
}function lbit(a) {
  if (a == 0) {
    return -1;
  }var b = 0;if ((a & 65535) == 0) {
    a >>= 16;b += 16;
  }if ((a & 255) == 0) {
    a >>= 8;b += 8;
  }if ((a & 15) == 0) {
    a >>= 4;b += 4;
  }if ((a & 3) == 0) {
    a >>= 2;b += 2;
  }if ((a & 1) == 0) {
    ++b;
  }return b;
}function bnGetLowestSetBit() {
  for (var a = 0; a < this.t; ++a) {
    if (this[a] != 0) {
      return a * this.DB + lbit(this[a]);
    }
  }if (this.s < 0) {
    return this.t * this.DB;
  }return -1;
}function cbit(a) {
  var b = 0;while (a != 0) {
    a &= a - 1;++b;
  }return b;
}function bnBitCount() {
  var c = 0,
      a = this.s & this.DM;for (var b = 0; b < this.t; ++b) {
    c += cbit(this[b] ^ a);
  }return c;
}function bnTestBit(b) {
  var a = Math.floor(b / this.DB);if (a >= this.t) {
    return this.s != 0;
  }return (this[a] & 1 << b % this.DB) != 0;
}function bnpChangeBit(c, b) {
  var a = BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a, b, a);return a;
}function bnSetBit(a) {
  return this.changeBit(a, op_or);
}function bnClearBit(a) {
  return this.changeBit(a, op_andnot);
}function bnFlipBit(a) {
  return this.changeBit(a, op_xor);
}function bnpAddTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] + d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g += d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g += d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += d.s;
  }f.s = g < 0 ? -1 : 0;if (g > 0) {
    f[e++] = g;
  } else {
    if (g < -1) {
      f[e++] = this.DV + g;
    }
  }f.t = e;f.clamp();
}function bnAdd(b) {
  var c = nbi();this.addTo(b, c);return c;
}function bnSubtract(b) {
  var c = nbi();this.subTo(b, c);return c;
}function bnMultiply(b) {
  var c = nbi();this.multiplyTo(b, c);return c;
}function bnSquare() {
  var a = nbi();this.squareTo(a);return a;
}function bnDivide(b) {
  var c = nbi();this.divRemTo(b, c, null);return c;
}function bnRemainder(b) {
  var c = nbi();this.divRemTo(b, null, c);return c;
}function bnDivideAndRemainder(b) {
  var d = nbi(),
      c = nbi();this.divRemTo(b, d, c);return new Array(d, c);
}function bnpDMultiply(a) {
  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);++this.t;this.clamp();
}function bnpDAddOffset(b, a) {
  if (b == 0) {
    return;
  }while (this.t <= a) {
    this[this.t++] = 0;
  }this[a] += b;while (this[a] >= this.DV) {
    this[a] -= this.DV;if (++a >= this.t) {
      this[this.t++] = 0;
    }++this[a];
  }
}function NullExp() {}function nNop(a) {
  return a;
}function nMulTo(a, c, b) {
  a.multiplyTo(c, b);
}function nSqrTo(a, b) {
  a.squareTo(b);
}NullExp.prototype.convert = nNop;NullExp.prototype.revert = nNop;NullExp.prototype.mulTo = nMulTo;NullExp.prototype.sqrTo = nSqrTo;function bnPow(a) {
  return this.exp(a, new NullExp());
}function bnpMultiplyLowerTo(b, f, e) {
  var d = Math.min(this.t + b.t, f);e.s = 0;e.t = d;while (d > 0) {
    e[--d] = 0;
  }var c;for (c = e.t - this.t; d < c; ++d) {
    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
  }for (c = Math.min(b.t, f); d < c; ++d) {
    this.am(0, b[d], e, d, 0, f - d);
  }e.clamp();
}function bnpMultiplyUpperTo(b, e, d) {
  --e;var c = d.t = this.t + b.t - e;d.s = 0;while (--c >= 0) {
    d[c] = 0;
  }for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
  }d.clamp();d.drShiftTo(1, d);
}function Barrett(a) {
  this.r2 = nbi();this.q3 = nbi();BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);this.mu = this.r2.divide(a);this.m = a;
}function barrettConvert(a) {
  if (a.s < 0 || a.t > 2 * this.m.t) {
    return a.mod(this.m);
  } else {
    if (a.compareTo(this.m) < 0) {
      return a;
    } else {
      var b = nbi();a.copyTo(b);this.reduce(b);return b;
    }
  }
}function barrettRevert(a) {
  return a;
}function barrettReduce(a) {
  a.drShiftTo(this.m.t - 1, this.r2);if (a.t > this.m.t + 1) {
    a.t = this.m.t + 1;a.clamp();
  }this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);while (a.compareTo(this.r2) < 0) {
    a.dAddOffset(1, this.m.t + 1);
  }a.subTo(this.r2, a);while (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function barrettSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function barrettMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Barrett.prototype.convert = barrettConvert;Barrett.prototype.revert = barrettRevert;Barrett.prototype.reduce = barrettReduce;Barrett.prototype.mulTo = barrettMulTo;Barrett.prototype.sqrTo = barrettSqrTo;function bnModPow(q, f) {
  var o = q.bitLength(),
      h,
      b = nbv(1),
      v;if (o <= 0) {
    return b;
  } else {
    if (o < 18) {
      h = 1;
    } else {
      if (o < 48) {
        h = 3;
      } else {
        if (o < 144) {
          h = 4;
        } else {
          if (o < 768) {
            h = 5;
          } else {
            h = 6;
          }
        }
      }
    }
  }if (o < 8) {
    v = new Classic(f);
  } else {
    if (f.isEven()) {
      v = new Barrett(f);
    } else {
      v = new Montgomery(f);
    }
  }var p = new Array(),
      d = 3,
      s = h - 1,
      a = (1 << h) - 1;p[1] = v.convert(this);if (h > 1) {
    var A = nbi();v.sqrTo(p[1], A);while (d <= a) {
      p[d] = nbi();v.mulTo(A, p[d - 2], p[d]);d += 2;
    }
  }var l = q.t - 1,
      x,
      u = true,
      c = nbi(),
      y;o = nbits(q[l]) - 1;while (l >= 0) {
    if (o >= s) {
      x = q[l] >> o - s & a;
    } else {
      x = (q[l] & (1 << o + 1) - 1) << s - o;if (l > 0) {
        x |= q[l - 1] >> this.DB + o - s;
      }
    }d = h;while ((x & 1) == 0) {
      x >>= 1;--d;
    }if ((o -= d) < 0) {
      o += this.DB;--l;
    }if (u) {
      p[x].copyTo(b);u = false;
    } else {
      while (d > 1) {
        v.sqrTo(b, c);v.sqrTo(c, b);d -= 2;
      }if (d > 0) {
        v.sqrTo(b, c);
      } else {
        y = b;b = c;c = y;
      }v.mulTo(c, p[x], b);
    }while (l >= 0 && (q[l] & 1 << o) == 0) {
      v.sqrTo(b, c);y = b;b = c;c = y;if (--o < 0) {
        o = this.DB - 1;--l;
      }
    }
  }return v.revert(b);
}function bnGCD(c) {
  var b = this.s < 0 ? this.negate() : this.clone();var h = c.s < 0 ? c.negate() : c.clone();if (b.compareTo(h) < 0) {
    var e = b;b = h;h = e;
  }var d = b.getLowestSetBit(),
      f = h.getLowestSetBit();if (f < 0) {
    return b;
  }if (d < f) {
    f = d;
  }if (f > 0) {
    b.rShiftTo(f, b);h.rShiftTo(f, h);
  }while (b.signum() > 0) {
    if ((d = b.getLowestSetBit()) > 0) {
      b.rShiftTo(d, b);
    }if ((d = h.getLowestSetBit()) > 0) {
      h.rShiftTo(d, h);
    }if (b.compareTo(h) >= 0) {
      b.subTo(h, b);b.rShiftTo(1, b);
    } else {
      h.subTo(b, h);h.rShiftTo(1, h);
    }
  }if (f > 0) {
    h.lShiftTo(f, h);
  }return h;
}function bnpModInt(e) {
  if (e <= 0) {
    return 0;
  }var c = this.DV % e,
      b = this.s < 0 ? e - 1 : 0;if (this.t > 0) {
    if (c == 0) {
      b = this[0] % e;
    } else {
      for (var a = this.t - 1; a >= 0; --a) {
        b = (c * b + this[a]) % e;
      }
    }
  }return b;
}function bnModInverse(f) {
  var j = f.isEven();if (this.isEven() && j || f.signum() == 0) {
    return BigInteger.ZERO;
  }var i = f.clone(),
      h = this.clone();var g = nbv(1),
      e = nbv(0),
      l = nbv(0),
      k = nbv(1);while (i.signum() != 0) {
    while (i.isEven()) {
      i.rShiftTo(1, i);if (j) {
        if (!g.isEven() || !e.isEven()) {
          g.addTo(this, g);e.subTo(f, e);
        }g.rShiftTo(1, g);
      } else {
        if (!e.isEven()) {
          e.subTo(f, e);
        }
      }e.rShiftTo(1, e);
    }while (h.isEven()) {
      h.rShiftTo(1, h);if (j) {
        if (!l.isEven() || !k.isEven()) {
          l.addTo(this, l);k.subTo(f, k);
        }l.rShiftTo(1, l);
      } else {
        if (!k.isEven()) {
          k.subTo(f, k);
        }
      }k.rShiftTo(1, k);
    }if (i.compareTo(h) >= 0) {
      i.subTo(h, i);if (j) {
        g.subTo(l, g);
      }e.subTo(k, e);
    } else {
      h.subTo(i, h);if (j) {
        l.subTo(g, l);
      }k.subTo(e, k);
    }
  }if (h.compareTo(BigInteger.ONE) != 0) {
    return BigInteger.ZERO;
  }if (k.compareTo(f) >= 0) {
    return k.subtract(f);
  }if (k.signum() < 0) {
    k.addTo(f, k);
  } else {
    return k;
  }if (k.signum() < 0) {
    return k.add(f);
  } else {
    return k;
  }
}var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];function bnIsProbablePrime(e) {
  var d,
      b = this.abs();if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
    for (d = 0; d < lowprimes.length; ++d) {
      if (b[0] == lowprimes[d]) {
        return true;
      }
    }return false;
  }if (b.isEven()) {
    return false;
  }d = 1;while (d < lowprimes.length) {
    var a = lowprimes[d],
        c = d + 1;while (c < lowprimes.length && a < lplim) {
      a *= lowprimes[c++];
    }a = b.modInt(a);while (d < c) {
      if (a % lowprimes[d++] == 0) {
        return false;
      }
    }
  }return b.millerRabin(e);
}function bnpMillerRabin(f) {
  var g = this.subtract(BigInteger.ONE);var c = g.getLowestSetBit();if (c <= 0) {
    return false;
  }var h = g.shiftRight(c);f = f + 1 >> 1;if (f > lowprimes.length) {
    f = lowprimes.length;
  }var b = nbi();for (var e = 0; e < f; ++e) {
    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);var l = b.modPow(h, this);if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
      var d = 1;while (d++ < c && l.compareTo(g) != 0) {
        l = l.modPowInt(2, this);if (l.compareTo(BigInteger.ONE) == 0) {
          return false;
        }
      }if (l.compareTo(g) != 0) {
        return false;
      }
    }
  }return true;
}BigInteger.prototype.chunkSize = bnpChunkSize;BigInteger.prototype.toRadix = bnpToRadix;BigInteger.prototype.fromRadix = bnpFromRadix;BigInteger.prototype.fromNumber = bnpFromNumber;BigInteger.prototype.bitwiseTo = bnpBitwiseTo;BigInteger.prototype.changeBit = bnpChangeBit;BigInteger.prototype.addTo = bnpAddTo;BigInteger.prototype.dMultiply = bnpDMultiply;BigInteger.prototype.dAddOffset = bnpDAddOffset;BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;BigInteger.prototype.modInt = bnpModInt;BigInteger.prototype.millerRabin = bnpMillerRabin;BigInteger.prototype.clone = bnClone;BigInteger.prototype.intValue = bnIntValue;BigInteger.prototype.byteValue = bnByteValue;BigInteger.prototype.shortValue = bnShortValue;BigInteger.prototype.signum = bnSigNum;BigInteger.prototype.toByteArray = bnToByteArray;BigInteger.prototype.equals = bnEquals;BigInteger.prototype.min = bnMin;BigInteger.prototype.max = bnMax;BigInteger.prototype.and = bnAnd;BigInteger.prototype.or = bnOr;BigInteger.prototype.xor = bnXor;BigInteger.prototype.andNot = bnAndNot;BigInteger.prototype.not = bnNot;BigInteger.prototype.shiftLeft = bnShiftLeft;BigInteger.prototype.shiftRight = bnShiftRight;BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;BigInteger.prototype.bitCount = bnBitCount;BigInteger.prototype.testBit = bnTestBit;BigInteger.prototype.setBit = bnSetBit;BigInteger.prototype.clearBit = bnClearBit;BigInteger.prototype.flipBit = bnFlipBit;BigInteger.prototype.add = bnAdd;BigInteger.prototype.subtract = bnSubtract;BigInteger.prototype.multiply = bnMultiply;BigInteger.prototype.divide = bnDivide;BigInteger.prototype.remainder = bnRemainder;BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;BigInteger.prototype.modPow = bnModPow;BigInteger.prototype.modInverse = bnModInverse;BigInteger.prototype.pow = bnPow;BigInteger.prototype.gcd = bnGCD;BigInteger.prototype.isProbablePrime = bnIsProbablePrime;BigInteger.prototype.square = bnSquare;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Arcfour() {
  this.i = 0;this.j = 0;this.S = new Array();
}function ARC4init(d) {
  var c, a, b;for (c = 0; c < 256; ++c) {
    this.S[c] = c;
  }a = 0;for (c = 0; c < 256; ++c) {
    a = a + this.S[c] + d[c % d.length] & 255;b = this.S[c];this.S[c] = this.S[a];this.S[a] = b;
  }this.i = 0;this.j = 0;
}function ARC4next() {
  var a;this.i = this.i + 1 & 255;this.j = this.j + this.S[this.i] & 255;a = this.S[this.i];this.S[this.i] = this.S[this.j];this.S[this.j] = a;return this.S[a + this.S[this.i] & 255];
}Arcfour.prototype.init = ARC4init;Arcfour.prototype.next = ARC4next;function prng_newstate() {
  return new Arcfour();
}var rng_psize = 256;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a) {
  rng_pool[rng_pptr++] ^= a & 255;rng_pool[rng_pptr++] ^= a >> 8 & 255;rng_pool[rng_pptr++] ^= a >> 16 & 255;rng_pool[rng_pptr++] ^= a >> 24 & 255;if (rng_pptr >= rng_psize) {
    rng_pptr -= rng_psize;
  }
}function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}if (rng_pool == null) {
  rng_pool = new Array();rng_pptr = 0;var t;if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
    var crypto = window.crypto || window.msCrypto;if (crypto.getRandomValues) {
      var ua = new Uint8Array(32);crypto.getRandomValues(ua);for (t = 0; t < 32; ++t) {
        rng_pool[rng_pptr++] = ua[t];
      }
    } else {
      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
        var z = window.crypto.random(32);for (t = 0; t < z.length; ++t) {
          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
    }
  }while (rng_pptr < rng_psize) {
    t = Math.floor(65536 * Math.random());rng_pool[rng_pptr++] = t >>> 8;rng_pool[rng_pptr++] = t & 255;
  }rng_pptr = 0;rng_seed_time();
}function rng_get_byte() {
  if (rng_state == null) {
    rng_seed_time();rng_state = prng_newstate();rng_state.init(rng_pool);for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
      rng_pool[rng_pptr] = 0;
    }rng_pptr = 0;
  }return rng_state.next();
}function rng_get_bytes(b) {
  var a;for (a = 0; a < b.length; ++a) {
    b[a] = rng_get_byte();
  }
}function SecureRandom() {}SecureRandom.prototype.nextBytes = rng_get_bytes;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function parseBigInt(b, a) {
  return new BigInteger(b, a);
}function linebrk(c, d) {
  var a = "";var b = 0;while (b + d < c.length) {
    a += c.substring(b, b + d) + "\n";b += d;
  }return a + c.substring(b, c.length);
}function byte2Hex(a) {
  if (a < 16) {
    return "0" + a.toString(16);
  } else {
    return a.toString(16);
  }
}function pkcs1pad2(e, h) {
  if (h < e.length + 11) {
    throw "Message too long for RSA";return null;
  }var g = new Array();var d = e.length - 1;while (d >= 0 && h > 0) {
    var f = e.charCodeAt(d--);if (f < 128) {
      g[--h] = f;
    } else {
      if (f > 127 && f < 2048) {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 | 192;
      } else {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 & 63 | 128;g[--h] = f >> 12 | 224;
      }
    }
  }g[--h] = 0;var b = new SecureRandom();var a = new Array();while (h > 2) {
    a[0] = 0;while (a[0] == 0) {
      b.nextBytes(a);
    }g[--h] = a[0];
  }g[--h] = 2;g[--h] = 0;return new BigInteger(g);
}function oaep_mgf1_arr(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));d += 1;
  }return b;
}function oaep_pad(q, a, f, l) {
  var c = KJUR.crypto.MessageDigest;var o = KJUR.crypto.Util;var b = null;if (!f) {
    f = "sha1";
  }if (typeof f === "string") {
    b = c.getCanonicalAlgName(f);l = c.getHashLength(b);f = function f(i) {
      return hextorstr(o.hashHex(rstrtohex(i), b));
    };
  }if (q.length + 2 * l + 2 > a) {
    throw "Message too long for RSA";
  }var k = "",
      e;for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
    k += "\x00";
  }var h = f("") + k + "\x01" + q;var g = new Array(l);new SecureRandom().nextBytes(g);var j = oaep_mgf1_arr(g, h.length, f);var p = [];for (e = 0; e < h.length; e += 1) {
    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
  }var m = oaep_mgf1_arr(p, g.length, f);var d = [0];for (e = 0; e < g.length; e += 1) {
    d[e + 1] = g[e] ^ m.charCodeAt(e);
  }return new BigInteger(d.concat(p));
}function RSAKey() {
  this.n = null;this.e = 0;this.d = null;this.p = null;this.q = null;this.dmp1 = null;this.dmq1 = null;this.coeff = null;
}function RSASetPublic(b, a) {
  this.isPublic = true;this.isPrivate = false;if (typeof b !== "string") {
    this.n = b;this.e = a;
  } else {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
      this.n = parseBigInt(b, 16);this.e = parseInt(a, 16);
    } else {
      throw "Invalid RSA public key";
    }
  }
}function RSADoPublic(a) {
  return a.modPowInt(this.e, this.n);
}function RSAEncrypt(d) {
  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);if (a == null) {
    return null;
  }var e = this.doPublic(a);if (e == null) {
    return null;
  }var b = e.toString(16);if ((b.length & 1) == 0) {
    return b;
  } else {
    return "0" + b;
  }
}function RSAEncryptOAEP(f, e, b) {
  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);if (a == null) {
    return null;
  }var g = this.doPublic(a);if (g == null) {
    return null;
  }var d = g.toString(16);if ((d.length & 1) == 0) {
    return d;
  } else {
    return "0" + d;
  }
}RSAKey.prototype.doPublic = RSADoPublic;RSAKey.prototype.setPublic = RSASetPublic;RSAKey.prototype.encrypt = RSAEncrypt;RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;RSAKey.prototype.type = "RSA";
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ECFieldElementFp(b, a) {
  this.x = a;this.q = b;
}function feFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.x.equals(a.x);
}function feFpToBigInteger() {
  return this.x;
}function feFpNegate() {
  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
}function feFpAdd(a) {
  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
}function feFpSubtract(a) {
  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
}function feFpMultiply(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
}function feFpSquare() {
  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
}function feFpDivide(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
}ECFieldElementFp.prototype.equals = feFpEquals;ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;ECFieldElementFp.prototype.negate = feFpNegate;ECFieldElementFp.prototype.add = feFpAdd;ECFieldElementFp.prototype.subtract = feFpSubtract;ECFieldElementFp.prototype.multiply = feFpMultiply;ECFieldElementFp.prototype.square = feFpSquare;ECFieldElementFp.prototype.divide = feFpDivide;function ECPointFp(c, a, d, b) {
  this.curve = c;this.x = a;this.y = d;if (b == null) {
    this.z = BigInteger.ONE;
  } else {
    this.z = b;
  }this.zinv = null;
}function pointFpGetX() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpGetY() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpEquals(a) {
  if (a == this) {
    return true;
  }if (this.isInfinity()) {
    return a.isInfinity();
  }if (a.isInfinity()) {
    return this.isInfinity();
  }var c, b;c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if (!c.equals(BigInteger.ZERO)) {
    return false;
  }b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO);
}function pointFpIsInfinity() {
  if (this.x == null && this.y == null) {
    return true;
  }return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
}function pointFpNegate() {
  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
}function pointFpAdd(l) {
  if (this.isInfinity()) {
    return l;
  }if (l.isInfinity()) {
    return this;
  }var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if (BigInteger.ZERO.equals(o)) {
    if (BigInteger.ZERO.equals(p)) {
      return this.twice();
    }return this.curve.getInfinity();
  }var j = new BigInteger("3");var e = this.x.toBigInteger();var n = this.y.toBigInteger();var c = l.x.toBigInteger();var k = l.y.toBigInteger();var m = o.square();var i = m.multiply(o);var d = e.multiply(m);var g = p.square().multiply(this.z);var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
}function pointFpTwice() {
  if (this.isInfinity()) {
    return this;
  }if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }var g = new BigInteger("3");var c = this.x.toBigInteger();var h = this.y.toBigInteger();var e = h.multiply(this.z);var j = e.multiply(h).mod(this.curve.q);var i = this.curve.a.toBigInteger();var k = c.square().multiply(g);if (!BigInteger.ZERO.equals(i)) {
    k = k.add(this.z.square().multiply(i));
  }k = k.mod(this.curve.q);var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
}function pointFpMultiply(d) {
  if (this.isInfinity()) {
    return this;
  }if (d.signum() == 0) {
    return this.curve.getInfinity();
  }var m = d;var l = m.multiply(new BigInteger("3"));var b = this.negate();var j = this;var q = this.curve.q.subtract(d);var o = q.multiply(new BigInteger("3"));var c = new ECPointFp(this.curve, this.x, this.y);var a = c.negate();var g;for (g = l.bitLength() - 2; g > 0; --g) {
    j = j.twice();var n = l.testBit(g);var f = m.testBit(g);if (n != f) {
      j = j.add(n ? this : b);
    }
  }for (g = o.bitLength() - 2; g > 0; --g) {
    c = c.twice();var p = o.testBit(g);var r = q.testBit(g);if (p != r) {
      c = c.add(p ? c : a);
    }
  }return j;
}function pointFpMultiplyTwo(c, a, b) {
  var d;if (c.bitLength() > b.bitLength()) {
    d = c.bitLength() - 1;
  } else {
    d = b.bitLength() - 1;
  }var f = this.curve.getInfinity();var e = this.add(a);while (d >= 0) {
    f = f.twice();if (c.testBit(d)) {
      if (b.testBit(d)) {
        f = f.add(e);
      } else {
        f = f.add(this);
      }
    } else {
      if (b.testBit(d)) {
        f = f.add(a);
      }
    }--d;
  }return f;
}ECPointFp.prototype.getX = pointFpGetX;ECPointFp.prototype.getY = pointFpGetY;ECPointFp.prototype.equals = pointFpEquals;ECPointFp.prototype.isInfinity = pointFpIsInfinity;ECPointFp.prototype.negate = pointFpNegate;ECPointFp.prototype.add = pointFpAdd;ECPointFp.prototype.twice = pointFpTwice;ECPointFp.prototype.multiply = pointFpMultiply;ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;function ECCurveFp(e, d, c) {
  this.q = e;this.a = this.fromBigInteger(d);this.b = this.fromBigInteger(c);this.infinity = new ECPointFp(this, null, null);
}function curveFpGetQ() {
  return this.q;
}function curveFpGetA() {
  return this.a;
}function curveFpGetB() {
  return this.b;
}function curveFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
}function curveFpGetInfinity() {
  return this.infinity;
}function curveFpFromBigInteger(a) {
  return new ECFieldElementFp(this.q, a);
}function curveFpDecodePointHex(d) {
  switch (parseInt(d.substr(0, 2), 16)) {case 0:
      return this.infinity;case 2:case 3:
      return null;case 4:case 6:case 7:
      var a = (d.length - 2) / 2;var c = d.substr(2, a);var b = d.substr(a + 2, a);return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));default:
      return null;}
}ECCurveFp.prototype.getQ = curveFpGetQ;ECCurveFp.prototype.getA = curveFpGetA;ECCurveFp.prototype.getB = curveFpGetB;ECCurveFp.prototype.equals = curveFpEquals;ECCurveFp.prototype.getInfinity = curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
ECFieldElementFp.prototype.getByteLength = function () {
  return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
};ECPointFp.prototype.getEncoded = function (c) {
  var d = function d(h, f) {
    var g = h.toByteArrayUnsigned();if (f < g.length) {
      g = g.slice(g.length - f);
    } else {
      while (f > g.length) {
        g.unshift(0);
      }
    }return g;
  };var a = this.getX().toBigInteger();var e = this.getY().toBigInteger();var b = d(a, 32);if (c) {
    if (e.isEven()) {
      b.unshift(2);
    } else {
      b.unshift(3);
    }
  } else {
    b.unshift(4);b = b.concat(d(e, 32));
  }return b;
};ECPointFp.decodeFrom = function (g, c) {
  var f = c[0];var e = c.length - 1;var d = c.slice(1, 1 + e / 2);var b = c.slice(1 + e / 2, 1 + e);d.unshift(0);b.unshift(0);var a = new BigInteger(d);var h = new BigInteger(b);return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};ECPointFp.decodeFromHex = function (g, c) {
  var f = c.substr(0, 2);var e = c.length - 2;var d = c.substr(2, e / 2);var b = c.substr(2 + e / 2, e / 2);var a = new BigInteger(d, 16);var h = new BigInteger(b, 16);return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};ECPointFp.prototype.add2D = function (c) {
  if (this.isInfinity()) {
    return c;
  }if (c.isInfinity()) {
    return this;
  }if (this.x.equals(c.x)) {
    if (this.y.equals(c.y)) {
      return this.twice();
    }return this.curve.getInfinity();
  }var g = c.x.subtract(this.x);var e = c.y.subtract(this.y);var a = e.divide(g);var d = a.square().subtract(this.x).subtract(c.x);var f = a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve, d, f);
};ECPointFp.prototype.twice2D = function () {
  if (this.isInfinity()) {
    return this;
  }if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }var b = this.curve.fromBigInteger(BigInteger.valueOf(2));var e = this.curve.fromBigInteger(BigInteger.valueOf(3));var a = this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c = a.square().subtract(this.x.multiply(b));var d = a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve, c, d);
};ECPointFp.prototype.multiply2D = function (b) {
  if (this.isInfinity()) {
    return this;
  }if (b.signum() == 0) {
    return this.curve.getInfinity();
  }var g = b;var f = g.multiply(new BigInteger("3"));var l = this.negate();var d = this;var c;for (c = f.bitLength() - 2; c > 0; --c) {
    d = d.twice();var a = f.testBit(c);var j = g.testBit(c);if (a != j) {
      d = d.add2D(a ? this : l);
    }
  }return d;
};ECPointFp.prototype.isOnCurve = function () {
  var d = this.getX().toBigInteger();var i = this.getY().toBigInteger();var f = this.curve.getA().toBigInteger();var c = this.curve.getB().toBigInteger();var h = this.curve.getQ();var e = i.multiply(i).mod(h);var g = d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g);
};ECPointFp.prototype.toString = function () {
  return "(" + this.getX().toBigInteger().toString() + "," + this.getY().toBigInteger().toString() + ")";
};ECPointFp.prototype.validate = function () {
  var c = this.curve.getQ();if (this.isInfinity()) {
    throw new Error("Point is at infinity.");
  }var a = this.getX().toBigInteger();var b = this.getY().toBigInteger();if (a.compareTo(BigInteger.ONE) < 0 || a.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("x coordinate out of bounds");
  }if (b.compareTo(BigInteger.ONE) < 0 || b.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("y coordinate out of bounds");
  }if (!this.isOnCurve()) {
    throw new Error("Point is not on the curve.");
  }if (this.multiply(c).isInfinity()) {
    throw new Error("Point is not a scalar multiple of G.");
  }return true;
};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var jsonParse = function () {
  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i = '(?:"' + j + '*")';var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");var g = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function h(l, m, n) {
    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
  }var c = new String("");var a = "\\";var f = { "{": Object, "[": Array };var b = Object.hasOwnProperty;return function (u, q) {
    var p = u.match(d);var x;var v = p[0];var l = false;if ("{" === v) {
      x = {};
    } else {
      if ("[" === v) {
        x = [];
      } else {
        x = [];l = true;
      }
    }var t;var r = [x];for (var o = 1 - l, m = p.length; o < m; ++o) {
      v = p[o];var w;switch (v.charCodeAt(0)) {default:
          w = r[0];w[t || w.length] = +v;t = void 0;break;case 34:
          v = v.substring(1, v.length - 1);if (v.indexOf(a) !== -1) {
            v = v.replace(k, h);
          }w = r[0];if (!t) {
            if (w instanceof Array) {
              t = w.length;
            } else {
              t = v || c;break;
            }
          }w[t] = v;t = void 0;break;case 91:
          w = r[0];r.unshift(w[t || w.length] = []);t = void 0;break;case 93:
          r.shift();break;case 102:
          w = r[0];w[t || w.length] = false;t = void 0;break;case 110:
          w = r[0];w[t || w.length] = null;t = void 0;break;case 116:
          w = r[0];w[t || w.length] = true;t = void 0;break;case 123:
          w = r[0];r.unshift(w[t || w.length] = {});t = void 0;break;case 125:
          r.shift();break;}
    }if (l) {
      if (r.length !== 1) {
        throw new Error();
      }x = x[0];
    } else {
      if (r.length) {
        throw new Error();
      }
    }if (q) {
      var s = function s(C, B) {
        var D = C[B];if (D && (typeof D === "undefined" ? "undefined" : _typeof(D)) === "object") {
          var n = null;for (var z in D) {
            if (b.call(D, z) && D !== C) {
              var y = s(D, z);if (y !== void 0) {
                D[z] = y;
              } else {
                if (!n) {
                  n = [];
                }n.push(z);
              }
            }
          }if (n) {
            for (var A = n.length; --A >= 0;) {
              delete D[n[A]];
            }
          }
        }return q.call(C, B, D);
      };x = s({ "": x }, "");
    }return x;
  };
}();
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
  KJUR.asn1 = {};
}KJUR.asn1.ASN1Util = new function () {
  this.integerToByteHex = function (a) {
    var b = a.toString(16);if (b.length % 2 == 1) {
      b = "0" + b;
    }return b;
  };this.bigIntToMinTwosComplementsHex = function (j) {
    var f = j.toString(16);if (f.substr(0, 1) != "-") {
      if (f.length % 2 == 1) {
        f = "0" + f;
      } else {
        if (!f.match(/^[0-7]/)) {
          f = "00" + f;
        }
      }
    } else {
      var a = f.substr(1);var e = a.length;if (e % 2 == 1) {
        e += 1;
      } else {
        if (!f.match(/^[0-7]/)) {
          e += 2;
        }
      }var g = "";for (var d = 0; d < e; d++) {
        g += "f";
      }var c = new BigInteger(g, 16);var b = c.xor(j).add(BigInteger.ONE);f = b.toString(16).replace(/^-/, "");
    }return f;
  };this.getPEMStringFromHex = function (a, b) {
    return hextopem(a, b);
  };this.newObject = function (k) {
    var F = KJUR,
        o = F.asn1,
        v = o.ASN1Object,
        B = o.DERBoolean,
        e = o.DERInteger,
        t = o.DERBitString,
        h = o.DEROctetString,
        x = o.DERNull,
        y = o.DERObjectIdentifier,
        m = o.DEREnumerated,
        g = o.DERUTF8String,
        f = o.DERNumericString,
        A = o.DERPrintableString,
        w = o.DERTeletexString,
        q = o.DERIA5String,
        E = o.DERUTCTime,
        j = o.DERGeneralizedTime,
        b = o.DERVisibleString,
        l = o.DERBMPString,
        n = o.DERSequence,
        c = o.DERSet,
        s = o.DERTaggedObject,
        p = o.ASN1Util.newObject;if (k instanceof o.ASN1Object) {
      return k;
    }var u = Object.keys(k);if (u.length != 1) {
      throw new Error("key of param shall be only one.");
    }var H = u[0];if (":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":" + H + ":") == -1) {
      throw new Error("undefined key: " + H);
    }if (H == "bool") {
      return new B(k[H]);
    }if (H == "int") {
      return new e(k[H]);
    }if (H == "bitstr") {
      return new t(k[H]);
    }if (H == "octstr") {
      return new h(k[H]);
    }if (H == "null") {
      return new x(k[H]);
    }if (H == "oid") {
      return new y(k[H]);
    }if (H == "enum") {
      return new m(k[H]);
    }if (H == "utf8str") {
      return new g(k[H]);
    }if (H == "numstr") {
      return new f(k[H]);
    }if (H == "prnstr") {
      return new A(k[H]);
    }if (H == "telstr") {
      return new w(k[H]);
    }if (H == "ia5str") {
      return new q(k[H]);
    }if (H == "utctime") {
      return new E(k[H]);
    }if (H == "gentime") {
      return new j(k[H]);
    }if (H == "visstr") {
      return new b(k[H]);
    }if (H == "bmpstr") {
      return new l(k[H]);
    }if (H == "asn1") {
      return new v(k[H]);
    }if (H == "seq") {
      var d = k[H];var G = [];for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);G.push(D);
      }return new n({ array: G });
    }if (H == "set") {
      var d = k[H];var G = [];for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);G.push(D);
      }return new c({ array: G });
    }if (H == "tag") {
      var C = k[H];if (Object.prototype.toString.call(C) === "[object Array]" && C.length == 3) {
        var r = p(C[2]);return new s({ tag: C[0], explicit: C[1], obj: r });
      } else {
        return new s(C);
      }
    }
  };this.jsonToASN1HEX = function (b) {
    var a = this.newObject(b);return a.getEncodedHex();
  };
}();KJUR.asn1.ASN1Util.oidHexToInt = function (a) {
  var j = "";var k = parseInt(a.substr(0, 2), 16);var d = Math.floor(k / 40);var c = k % 40;var j = d + "." + c;var e = "";for (var f = 2; f < a.length; f += 2) {
    var g = parseInt(a.substr(f, 2), 16);var h = ("00000000" + g.toString(2)).slice(-8);e = e + h.substr(1, 7);if (h.substr(0, 1) == "0") {
      var b = new BigInteger(e, 2);j = j + "." + b.toString(10);e = "";
    }
  }return j;
};KJUR.asn1.ASN1Util.oidIntToHex = function (f) {
  var e = function e(a) {
    var k = a.toString(16);if (k.length == 1) {
      k = "0" + k;
    }return k;
  };var d = function d(o) {
    var n = "";var k = new BigInteger(o, 10);var a = k.toString(2);var l = 7 - a.length % 7;if (l == 7) {
      l = 0;
    }var q = "";for (var m = 0; m < l; m++) {
      q += "0";
    }a = q + a;for (var m = 0; m < a.length - 1; m += 7) {
      var p = a.substr(m, 7);if (m != a.length - 7) {
        p = "1" + p;
      }n += e(parseInt(p, 2));
    }return n;
  };if (!f.match(/^[0-9.]+$/)) {
    throw "malformed oid string: " + f;
  }var g = "";var b = f.split(".");var j = parseInt(b[0]) * 40 + parseInt(b[1]);g += e(j);b.splice(0, 2);for (var c = 0; c < b.length; c++) {
    g += d(b[c]);
  }return g;
};KJUR.asn1.ASN1Object = function (e) {
  var c = true;var b = null;var d = "00";var f = "00";var a = "";this.params = null;this.getLengthHexFromValue = function () {
    if (typeof this.hV == "undefined" || this.hV == null) {
      throw new Error("this.hV is null or undefined");
    }if (this.hV.length % 2 == 1) {
      throw new Error("value hex must be even length: n=" + a.length + ",v=" + this.hV);
    }var j = this.hV.length / 2;var i = j.toString(16);if (i.length % 2 == 1) {
      i = "0" + i;
    }if (j < 128) {
      return i;
    } else {
      var h = i.length / 2;if (h > 15) {
        throw "ASN.1 length too long to represent by 8x: n = " + j.toString(16);
      }var g = 128 + h;return g.toString(16) + i;
    }
  };this.getEncodedHex = function () {
    if (this.hTLV == null || this.isModified) {
      this.hV = this.getFreshValueHex();this.hL = this.getLengthHexFromValue();this.hTLV = this.hT + this.hL + this.hV;this.isModified = false;
    }return this.hTLV;
  };this.getValueHex = function () {
    this.getEncodedHex();return this.hV;
  };this.getFreshValueHex = function () {
    return "";
  };this.setByParam = function (g) {
    this.params = g;
  };if (e != undefined) {
    if (e.tlv != undefined) {
      this.hTLV = e.tlv;this.isModified = false;
    }
  }
};KJUR.asn1.DERAbstractString = function (c) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b = null;var a = null;this.getString = function () {
    return this.s;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;this.s = d;this.hV = utf8tohex(this.s).toLowerCase();
  };this.setStringHex = function (d) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof c != "undefined") {
    if (typeof c == "string") {
      this.setString(c);
    } else {
      if (typeof c.str != "undefined") {
        this.setString(c.str);
      } else {
        if (typeof c.hex != "undefined") {
          this.setStringHex(c.hex);
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime = function (c) {
  KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b = null;var a = null;this.localDateToUTC = function (g) {
    var e = g.getTime() + g.getTimezoneOffset() * 60000;var f = new Date(e);return f;
  };this.formatDate = function (m, o, e) {
    var g = this.zeroPadding;var n = this.localDateToUTC(m);var p = String(n.getFullYear());if (o == "utc") {
      p = p.substr(2, 2);
    }var l = g(String(n.getMonth() + 1), 2);var q = g(String(n.getDate()), 2);var h = g(String(n.getHours()), 2);var i = g(String(n.getMinutes()), 2);var j = g(String(n.getSeconds()), 2);var r = p + l + q + h + i + j;if (e === true) {
      var f = n.getMilliseconds();if (f != 0) {
        var k = g(String(f), 3);k = k.replace(/[0]+$/, "");r = r + "." + k;
      }
    }return r + "Z";
  };this.zeroPadding = function (e, d) {
    if (e.length >= d) {
      return e;
    }return new Array(d - e.length + 1).join("0") + e;
  };this.getString = function () {
    return this.s;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;this.s = d;this.hV = stohex(d);
  };this.setByDateValue = function (h, j, e, d, f, g) {
    var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0));this.setByDate(i);
  };this.getFreshValueHex = function () {
    return this.hV;
  };
};YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured = function (b) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a = null;this.setByASN1ObjectArray = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array = c;
  };this.appendASN1Object = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array.push(c);
  };this.asn1Array = new Array();if (typeof b != "undefined") {
    if (typeof b.array != "undefined") {
      this.asn1Array = b.array;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean = function (a) {
  KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT = "01";if (a == false) {
    this.hTLV = "010100";
  } else {
    this.hTLV = "0101ff";
  }
};YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger = function (a) {
  KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT = "02";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.bigint != "undefined") {
      this.setByBigInteger(a.bigint);
    } else {
      if (typeof a["int"] != "undefined") {
        this.setByInteger(a["int"]);
      } else {
        if (typeof a == "number") {
          this.setByInteger(a);
        } else {
          if (typeof a.hex != "undefined") {
            this.setValueHex(a.hex);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = "00" + a.getEncodedHex();
  }KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT = "03";this.setHexValueIncludingUnusedBits = function (c) {
    this.hTLV = null;this.isModified = true;this.hV = c;
  };this.setUnusedBitsAndHexValue = function (c, e) {
    if (c < 0 || 7 < c) {
      throw "unused bits shall be from 0 to 7: u = " + c;
    }var d = "0" + c;this.hTLV = null;this.isModified = true;this.hV = d + e;
  };this.setByBinaryString = function (e) {
    e = e.replace(/0+$/, "");var f = 8 - e.length % 8;if (f == 8) {
      f = 0;
    }for (var g = 0; g <= f; g++) {
      e += "0";
    }var j = "";for (var g = 0; g < e.length - 1; g += 8) {
      var d = e.substr(g, 8);var c = parseInt(d, 2).toString(16);if (c.length == 1) {
        c = "0" + c;
      }j += c;
    }this.hTLV = null;this.isModified = true;this.hV = "0" + f + j;
  };this.setByBooleanArray = function (e) {
    var d = "";for (var c = 0; c < e.length; c++) {
      if (e[c] == true) {
        d += "1";
      } else {
        d += "0";
      }
    }this.setByBinaryString(d);
  };this.newFalseArray = function (e) {
    var c = new Array(e);for (var d = 0; d < e; d++) {
      c[d] = false;
    }return c;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof b != "undefined") {
    if (typeof b == "string" && b.toLowerCase().match(/^[0-9a-f]+$/)) {
      this.setHexValueIncludingUnusedBits(b);
    } else {
      if (typeof b.hex != "undefined") {
        this.setHexValueIncludingUnusedBits(b.hex);
      } else {
        if (typeof b.bin != "undefined") {
          this.setByBinaryString(b.bin);
        } else {
          if (typeof b.array != "undefined") {
            this.setByBooleanArray(b.array);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = a.getEncodedHex();
  }KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);this.hT = "04";
};YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull = function () {
  KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT = "05";this.hTLV = "0500";
};YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier = function (a) {
  KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT = "06";this.setValueHex = function (b) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = b;
  };this.setValueOidString = function (b) {
    var c = oidtohex(b);if (c == null) {
      throw new Error("malformed oid string: " + b);
    }this.hTLV = null;this.isModified = true;this.s = null;this.hV = c;
  };this.setValueName = function (c) {
    var b = KJUR.asn1.x509.OID.name2oid(c);if (b !== "") {
      this.setValueOidString(b);
    } else {
      throw new Error("DERObjectIdentifier oidName undefined: " + c);
    }
  };this.setValueNameOrOid = function (b) {
    if (b.match(/^[0-2].[0-9.]+$/)) {
      this.setValueOidString(b);
    } else {
      this.setValueName(b);
    }
  };this.getFreshValueHex = function () {
    return this.hV;
  };this.setByParam = function (b) {
    if (typeof b === "string") {
      this.setValueNameOrOid(b);
    } else {
      if (b.oid !== undefined) {
        this.setValueNameOrOid(b.oid);
      } else {
        if (b.name !== undefined) {
          this.setValueNameOrOid(b.name);
        } else {
          if (b.hex !== undefined) {
            this.setValueHex(b.hex);
          }
        }
      }
    }
  };if (a !== undefined) {
    this.setByParam(a);
  }
};YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated = function (a) {
  KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT = "0a";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a["int"] != "undefined") {
      this.setByInteger(a["int"]);
    } else {
      if (typeof a == "number") {
        this.setByInteger(a);
      } else {
        if (typeof a.hex != "undefined") {
          this.setValueHex(a.hex);
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String = function (a) {
  KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);this.hT = "0c";
};YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString = function (a) {
  KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);this.hT = "12";
};YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString = function (a) {
  KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);this.hT = "13";
};YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString = function (a) {
  KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);this.hT = "14";
};YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "16";
};YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERVisibleString = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "1a";
};YAHOO.lang.extend(KJUR.asn1.DERVisibleString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERBMPString = function (a) {
  KJUR.asn1.DERBMPString.superclass.constructor.call(this, a);this.hT = "1e";
};YAHOO.lang.extend(KJUR.asn1.DERBMPString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime = function (a) {
  KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);this.hT = "17";this.setByDate = function (b) {
    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
  };this.getFreshValueHex = function () {
    if (typeof this.date == "undefined" && typeof this.s == "undefined") {
      this.date = new Date();this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
    }return this.hV;
  };if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{12}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime = function (a) {
  KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);this.hT = "18";this.withMillis = false;this.setByDate = function (b) {
    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
  };this.getFreshValueHex = function () {
    if (this.date === undefined && this.s === undefined) {
      this.date = new Date();this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
    }return this.hV;
  };if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{14}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }if (a.millis === true) {
      this.withMillis = true;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence = function (a) {
  KJUR.asn1.DERSequence.superclass.constructor.call(this, a);this.hT = "30";this.getFreshValueHex = function () {
    var c = "";for (var b = 0; b < this.asn1Array.length; b++) {
      var d = this.asn1Array[b];c += d.getEncodedHex();
    }this.hV = c;return this.hV;
  };
};YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet = function (a) {
  KJUR.asn1.DERSet.superclass.constructor.call(this, a);this.hT = "31";this.sortFlag = true;this.getFreshValueHex = function () {
    var b = new Array();for (var c = 0; c < this.asn1Array.length; c++) {
      var d = this.asn1Array[c];b.push(d.getEncodedHex());
    }if (this.sortFlag == true) {
      b.sort();
    }this.hV = b.join("");return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.sortflag != "undefined" && a.sortflag == false) {
      this.sortFlag = false;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject = function (b) {
  KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);var a = KJUR.asn1;this.hT = "a0";this.hV = "";this.isExplicit = true;this.asn1Object = null;this.setASN1Object = function (c, d, e) {
    this.hT = d;this.isExplicit = c;this.asn1Object = e;if (this.isExplicit) {
      this.hV = this.asn1Object.getEncodedHex();this.hTLV = null;this.isModified = true;
    } else {
      this.hV = null;this.hTLV = e.getEncodedHex();this.hTLV = this.hTLV.replace(/^../, d);this.isModified = false;
    }
  };this.getFreshValueHex = function () {
    return this.hV;
  };this.setByParam = function (c) {
    if (c.tag != undefined) {
      this.hT = c.tag;
    }if (c.explicit != undefined) {
      this.isExplicit = c.explicit;
    }if (c.tage != undefined) {
      this.hT = c.tage;this.isExplicit = true;
    }if (c.tagi != undefined) {
      this.hT = c.tagi;this.isExplicit = false;
    }if (c.obj != undefined) {
      if (c.obj instanceof a.ASN1Object) {
        this.asn1Object = c.obj;this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
      } else {
        if (_typeof(c.obj) == "object") {
          this.asn1Object = a.ASN1Util.newObject(c.obj);this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
        }
      }
    }
  };if (b != undefined) {
    this.setByParam(b);
  }
};YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);
var ASN1HEX = new function () {}();ASN1HEX.getLblen = function (c, a) {
  if (c.substr(a + 2, 1) != "8") {
    return 1;
  }var b = parseInt(c.substr(a + 3, 1));if (b == 0) {
    return -1;
  }if (0 < b && b < 10) {
    return b + 1;
  }return -2;
};ASN1HEX.getL = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 1) {
    return "";
  }return c.substr(b + 2, a * 2);
};ASN1HEX.getVblen = function (d, a) {
  var c, b;c = ASN1HEX.getL(d, a);if (c == "") {
    return -1;
  }if (c.substr(0, 1) === "8") {
    b = new BigInteger(c.substr(2), 16);
  } else {
    b = new BigInteger(c, 16);
  }return b.intValue();
};ASN1HEX.getVidx = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 0) {
    return a;
  }return b + (a + 1) * 2;
};ASN1HEX.getV = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return d.substr(c, b * 2);
};ASN1HEX.getTLV = function (b, a) {
  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
};ASN1HEX.getTLVblen = function (b, a) {
  return 2 + ASN1HEX.getLblen(b, a) * 2 + ASN1HEX.getVblen(b, a) * 2;
};ASN1HEX.getNextSiblingIdx = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return c + b * 2;
};ASN1HEX.getChildIdx = function (e, k) {
  var l = ASN1HEX;var j = [];var c, f, g;c = l.getVidx(e, k);f = l.getVblen(e, k) * 2;if (e.substr(k, 2) == "03") {
    c += 2;f -= 2;
  }g = 0;var d = c;while (g <= f) {
    var b = l.getTLVblen(e, d);g += b;if (g <= f) {
      j.push(d);
    }d += b;if (g >= f) {
      break;
    }
  }return j;
};ASN1HEX.getNthChildIdx = function (d, b, e) {
  var c = ASN1HEX.getChildIdx(d, b);return c[e];
};ASN1HEX.getIdxbyList = function (e, d, c, i) {
  var g = ASN1HEX;var f, b;if (c.length == 0) {
    if (i !== undefined) {
      if (e.substr(d, 2) !== i) {
        return -1;
      }
    }return d;
  }f = c.shift();b = g.getChildIdx(e, d);if (f >= b.length) {
    return -1;
  }return g.getIdxbyList(e, b[f], c, i);
};ASN1HEX.getIdxbyListEx = function (f, k, b, g) {
  var m = ASN1HEX;var d, l;if (b.length == 0) {
    if (g !== undefined) {
      if (f.substr(k, 2) !== g) {
        return -1;
      }
    }return k;
  }d = b.shift();l = m.getChildIdx(f, k);var j = 0;for (var e = 0; e < l.length; e++) {
    var c = f.substr(l[e], 2);if (typeof d == "number" && !m.isContextTag(c) && j == d || typeof d == "string" && m.isContextTag(c, d)) {
      return m.getIdxbyListEx(f, l[e], b, g);
    }if (!m.isContextTag(c)) {
      j++;
    }
  }return -1;
};ASN1HEX.getTLVbyList = function (d, c, b, f) {
  var e = ASN1HEX;var a = e.getIdxbyList(d, c, b, f);if (a == -1) {
    return null;
  }if (a >= d.length) {
    return null;
  }return e.getTLV(d, a);
};ASN1HEX.getTLVbyListEx = function (d, c, b, f) {
  var e = ASN1HEX;var a = e.getIdxbyListEx(d, c, b, f);if (a == -1) {
    return null;
  }return e.getTLV(d, a);
};ASN1HEX.getVbyList = function (e, c, b, g, i) {
  var f = ASN1HEX;var a, d;a = f.getIdxbyList(e, c, b, g);if (a == -1) {
    return null;
  }if (a >= e.length) {
    return null;
  }d = f.getV(e, a);if (i === true) {
    d = d.substr(2);
  }return d;
};ASN1HEX.getVbyListEx = function (b, e, a, d, f) {
  var j = ASN1HEX;var g, c, i;g = j.getIdxbyListEx(b, e, a, d);if (g == -1) {
    return null;
  }i = j.getV(b, g);if (b.substr(g, 2) == "03" && f !== false) {
    i = i.substr(2);
  }return i;
};ASN1HEX.getInt = function (e, b, f) {
  if (f == undefined) {
    f = -1;
  }try {
    var c = e.substr(b, 2);if (c != "02" && c != "03") {
      return f;
    }var a = ASN1HEX.getV(e, b);if (c == "02") {
      return parseInt(a, 16);
    } else {
      return bitstrtoint(a);
    }
  } catch (d) {
    return f;
  }
};ASN1HEX.getOID = function (c, a, d) {
  if (d == undefined) {
    d = null;
  }try {
    if (c.substr(a, 2) != "06") {
      return d;
    }var e = ASN1HEX.getV(c, a);return hextooid(e);
  } catch (b) {
    return d;
  }
};ASN1HEX.getOIDName = function (d, a, f) {
  if (f == undefined) {
    f = null;
  }try {
    var e = ASN1HEX.getOID(d, a, f);if (e == f) {
      return f;
    }var b = KJUR.asn1.x509.OID.oid2name(e);if (b == "") {
      return e;
    }return b;
  } catch (c) {
    return f;
  }
};ASN1HEX.getString = function (d, b, e) {
  if (e == undefined) {
    e = null;
  }try {
    var a = ASN1HEX.getV(d, b);return hextorstr(a);
  } catch (c) {
    return e;
  }
};ASN1HEX.hextooidstr = function (e) {
  var h = function h(b, a) {
    if (b.length >= a) {
      return b;
    }return new Array(a - b.length + 1).join("0") + b;
  };var l = [];var o = e.substr(0, 2);var f = parseInt(o, 16);l[0] = new String(Math.floor(f / 40));l[1] = new String(f % 40);var m = e.substr(2);var k = [];for (var g = 0; g < m.length / 2; g++) {
    k.push(parseInt(m.substr(g * 2, 2), 16));
  }var j = [];var d = "";for (var g = 0; g < k.length; g++) {
    if (k[g] & 128) {
      d = d + h((k[g] & 127).toString(2), 7);
    } else {
      d = d + h((k[g] & 127).toString(2), 7);j.push(new String(parseInt(d, 2)));d = "";
    }
  }var n = l.join(".");if (j.length > 0) {
    n = n + "." + j.join(".");
  }return n;
};ASN1HEX.dump = function (t, c, l, g) {
  var p = ASN1HEX;var j = p.getV;var y = p.dump;var w = p.getChildIdx;var e = t;if (t instanceof KJUR.asn1.ASN1Object) {
    e = t.getEncodedHex();
  }var q = function q(A, i) {
    if (A.length <= i * 2) {
      return A;
    } else {
      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);return v;
    }
  };if (c === undefined) {
    c = { ommit_long_octet: 32 };
  }if (l === undefined) {
    l = 0;
  }if (g === undefined) {
    g = "";
  }var x = c.ommit_long_octet;var z = e.substr(l, 2);if (z == "01") {
    var h = j(e, l);if (h == "00") {
      return g + "BOOLEAN FALSE\n";
    } else {
      return g + "BOOLEAN TRUE\n";
    }
  }if (z == "02") {
    var h = j(e, l);return g + "INTEGER " + q(h, x) + "\n";
  }if (z == "03") {
    var h = j(e, l);if (p.isASN1HEX(h.substr(2))) {
      var k = g + "BITSTRING, encapsulates\n";k = k + y(h.substr(2), c, 0, g + "  ");return k;
    } else {
      return g + "BITSTRING " + q(h, x) + "\n";
    }
  }if (z == "04") {
    var h = j(e, l);if (p.isASN1HEX(h)) {
      var k = g + "OCTETSTRING, encapsulates\n";k = k + y(h, c, 0, g + "  ");return k;
    } else {
      return g + "OCTETSTRING " + q(h, x) + "\n";
    }
  }if (z == "05") {
    return g + "NULL\n";
  }if (z == "06") {
    var m = j(e, l);var b = KJUR.asn1.ASN1Util.oidHexToInt(m);var o = KJUR.asn1.x509.OID.oid2name(b);var a = b.replace(/\./g, " ");if (o != "") {
      return g + "ObjectIdentifier " + o + " (" + a + ")\n";
    } else {
      return g + "ObjectIdentifier (" + a + ")\n";
    }
  }if (z == "0a") {
    return g + "ENUMERATED " + parseInt(j(e, l)) + "\n";
  }if (z == "0c") {
    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "13") {
    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "14") {
    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "16") {
    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "17") {
    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
  }if (z == "18") {
    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
  }if (z == "1a") {
    return g + "VisualString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "1e") {
    return g + "BMPString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "30") {
    if (e.substr(l, 4) == "3000") {
      return g + "SEQUENCE {}\n";
    }var k = g + "SEQUENCE\n";var d = w(e, l);var f = c;if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
      var o = p.oidname(j(e, d[0]));var r = JSON.parse(JSON.stringify(c));r.x509ExtName = o;f = r;
    }for (var u = 0; u < d.length; u++) {
      k = k + y(e, f, d[u], g + "  ");
    }return k;
  }if (z == "31") {
    var k = g + "SET\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
      k = k + y(e, c, d[u], g + "  ");
    }return k;
  }var z = parseInt(z, 16);if ((z & 128) != 0) {
    var n = z & 31;if ((z & 32) != 0) {
      var k = g + "[" + n + "]\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
        k = k + y(e, c, d[u], g + "  ");
      }return k;
    } else {
      var h = j(e, l);if (ASN1HEX.isASN1HEX(h)) {
        var k = g + "[" + n + "]\n";k = k + y(h, c, 0, g + "  ");return k;
      } else {
        if (h.substr(0, 8) == "68747470") {
          h = hextoutf8(h);
        } else {
          if (c.x509ExtName === "subjectAltName" && n == 2) {
            h = hextoutf8(h);
          }
        }
      }var k = g + "[" + n + "] " + h + "\n";return k;
    }
  }return g + "UNKNOWN(" + z + ") " + j(e, l) + "\n";
};ASN1HEX.isContextTag = function (c, b) {
  c = c.toLowerCase();var f, e;try {
    f = parseInt(c, 16);
  } catch (d) {
    return -1;
  }if (b === undefined) {
    if ((f & 192) == 128) {
      return true;
    } else {
      return false;
    }
  }try {
    var a = b.match(/^\[[0-9]+\]$/);if (a == null) {
      return false;
    }e = parseInt(b.substr(1, b.length - 1), 10);if (e > 31) {
      return false;
    }if ((f & 192) == 128 && (f & 31) == e) {
      return true;
    }return false;
  } catch (d) {
    return false;
  }
};ASN1HEX.isASN1HEX = function (e) {
  var d = ASN1HEX;if (e.length % 2 == 1) {
    return false;
  }var c = d.getVblen(e, 0);var b = e.substr(0, 2);var f = d.getL(e, 0);var a = e.length - b.length - f.length;if (a == c * 2) {
    return true;
  }return false;
};ASN1HEX.checkStrictDER = function (g, o, d, c, r) {
  var s = ASN1HEX;if (d === undefined) {
    if (typeof g != "string") {
      throw new Error("not hex string");
    }g = g.toLowerCase();if (!KJUR.lang.String.isHex(g)) {
      throw new Error("not hex string");
    }d = g.length;c = g.length / 2;if (c < 128) {
      r = 1;
    } else {
      r = Math.ceil(c.toString(16)) + 1;
    }
  }var k = s.getL(g, o);if (k.length > r * 2) {
    throw new Error("L of TLV too long: idx=" + o);
  }var n = s.getVblen(g, o);if (n > c) {
    throw new Error("value of L too long than hex: idx=" + o);
  }var q = s.getTLV(g, o);var f = q.length - 2 - s.getL(g, o).length;if (f !== n * 2) {
    throw new Error("V string length and L's value not the same:" + f + "/" + n * 2);
  }if (o === 0) {
    if (g.length != q.length) {
      throw new Error("total length and TLV length unmatch:" + g.length + "!=" + q.length);
    }
  }var b = g.substr(o, 2);if (b === "02") {
    var a = s.getVidx(g, o);if (g.substr(a, 2) == "00" && g.charCodeAt(a + 2) < 56) {
      throw new Error("not least zeros for DER INTEGER");
    }
  }if (parseInt(b, 16) & 32) {
    var p = s.getVblen(g, o);var m = 0;var l = s.getChildIdx(g, o);for (var e = 0; e < l.length; e++) {
      var j = s.getTLV(g, l[e]);m += j.length;s.checkStrictDER(g, l[e], d, c, r);
    }if (p * 2 != m) {
      throw new Error("sum of children's TLV length and L unmatch: " + p * 2 + "!=" + m);
    }
  }
};ASN1HEX.oidname = function (a) {
  var c = KJUR.asn1;if (KJUR.lang.String.isHex(a)) {
    a = c.ASN1Util.oidHexToInt(a);
  }var b = c.x509.OID.oid2name(a);if (b === "") {
    b = a;
  }return b;
};
var KJUR;if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
  KJUR.lang = {};
}KJUR.lang.String = function () {};function Base64x() {}function stoBA(d) {
  var b = new Array();for (var c = 0; c < d.length; c++) {
    b[c] = d.charCodeAt(c);
  }return b;
}function BAtos(b) {
  var d = "";for (var c = 0; c < b.length; c++) {
    d = d + String.fromCharCode(b[c]);
  }return d;
}function BAtohex(b) {
  var e = "";for (var d = 0; d < b.length; d++) {
    var c = b[d].toString(16);if (c.length == 1) {
      c = "0" + c;
    }e = e + c;
  }return e;
}function stohex(a) {
  return BAtohex(stoBA(a));
}function stob64(a) {
  return hex2b64(stohex(a));
}function stob64u(a) {
  return b64tob64u(hex2b64(stohex(a)));
}function b64utos(a) {
  return BAtos(b64toBA(b64utob64(a)));
}function b64tob64u(a) {
  a = a.replace(/\=/g, "");a = a.replace(/\+/g, "-");a = a.replace(/\//g, "_");return a;
}function b64utob64(a) {
  if (a.length % 4 == 2) {
    a = a + "==";
  } else {
    if (a.length % 4 == 3) {
      a = a + "=";
    }
  }a = a.replace(/-/g, "+");a = a.replace(/_/g, "/");return a;
}function hextob64u(a) {
  if (a.length % 2 == 1) {
    a = "0" + a;
  }return b64tob64u(hex2b64(a));
}function b64utohex(a) {
  return b64tohex(b64utob64(a));
}var utf8tob64u, b64utoutf8;if (typeof Buffer === "function") {
  exports.utf8tob64u = utf8tob64u = function utf8tob64u(a) {
    return b64tob64u(Buffer.from(a, "utf8").toString("base64"));
  };exports.b64utoutf8 = b64utoutf8 = function b64utoutf8(a) {
    return Buffer.from(b64utob64(a), "base64").toString("utf8");
  };
} else {
  exports.utf8tob64u = utf8tob64u = function utf8tob64u(a) {
    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
  };exports.b64utoutf8 = b64utoutf8 = function b64utoutf8(a) {
    return decodeURIComponent(hextouricmp(b64utohex(a)));
  };
}function utf8tob64(a) {
  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
}function b64toutf8(a) {
  return decodeURIComponent(hextouricmp(b64tohex(a)));
}function utf8tohex(a) {
  return uricmptohex(encodeURIComponentAll(a));
}function hextoutf8(a) {
  return decodeURIComponent(hextouricmp(a));
}function hextorstr(c) {
  var b = "";for (var a = 0; a < c.length - 1; a += 2) {
    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
  }return b;
}function rstrtohex(c) {
  var a = "";for (var b = 0; b < c.length; b++) {
    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
  }return a;
}function hextob64(a) {
  return hex2b64(a);
}function hextob64nl(b) {
  var a = hextob64(b);var c = a.replace(/(.{64})/g, "$1\r\n");c = c.replace(/\r\n$/, "");return c;
}function b64nltohex(b) {
  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");var c = b64tohex(a);return c;
}function hextopem(a, b) {
  var c = hextob64nl(a);return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
}function pemtohex(a, b) {
  if (a.indexOf("-----BEGIN ") == -1) {
    throw "can't find PEM header: " + b;
  }if (b !== undefined) {
    a = a.replace(new RegExp("^[^]*-----BEGIN " + b + "-----"), "");a = a.replace(new RegExp("-----END " + b + "-----[^]*$"), "");
  } else {
    a = a.replace(/^[^]*-----BEGIN [^-]+-----/, "");a = a.replace(/-----END [^-]+-----[^]*$/, "");
  }return b64nltohex(a);
}function hextoArrayBuffer(d) {
  if (d.length % 2 != 0) {
    throw "input is not even length";
  }if (d.match(/^[0-9A-Fa-f]+$/) == null) {
    throw "input is not hexadecimal";
  }var b = new ArrayBuffer(d.length / 2);var a = new DataView(b);for (var c = 0; c < d.length / 2; c++) {
    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
  }return b;
}function ArrayBuffertohex(b) {
  var d = "";var a = new DataView(b);for (var c = 0; c < b.byteLength; c++) {
    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
  }return d;
}function zulutomsec(n) {
  var l, j, m, e, f, i, b, k;var a, h, g, c;c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if (c) {
    a = c[1];l = parseInt(a);if (a.length === 2) {
      if (50 <= l && l < 100) {
        l = 1900 + l;
      } else {
        if (0 <= l && l < 50) {
          l = 2000 + l;
        }
      }
    }j = parseInt(c[2]) - 1;m = parseInt(c[3]);e = parseInt(c[4]);f = parseInt(c[5]);i = parseInt(c[6]);b = 0;h = c[7];if (h !== "") {
      g = (h.substr(1) + "00").substr(0, 3);b = parseInt(g);
    }return Date.UTC(l, j, m, e, f, i, b);
  }throw "unsupported zulu format: " + n;
}function zulutosec(a) {
  var b = zulutomsec(a);return ~~(b / 1000);
}function zulutodate(a) {
  return new Date(zulutomsec(a));
}function datetozulu(g, e, f) {
  var b;var a = g.getUTCFullYear();if (e) {
    if (a < 1950 || 2049 < a) {
      throw "not proper year for UTCTime: " + a;
    }b = ("" + a).slice(-2);
  } else {
    b = ("000" + a).slice(-4);
  }b += ("0" + (g.getUTCMonth() + 1)).slice(-2);b += ("0" + g.getUTCDate()).slice(-2);b += ("0" + g.getUTCHours()).slice(-2);b += ("0" + g.getUTCMinutes()).slice(-2);b += ("0" + g.getUTCSeconds()).slice(-2);if (f) {
    var c = g.getUTCMilliseconds();if (c !== 0) {
      c = ("00" + c).slice(-3);c = c.replace(/0+$/g, "");b += "." + c;
    }
  }b += "Z";return b;
}function uricmptohex(a) {
  return a.replace(/%/g, "");
}function hextouricmp(a) {
  return a.replace(/(..)/g, "%$1");
}function ipv6tohex(g) {
  var b = "malformed IPv6 address";if (!g.match(/^[0-9A-Fa-f:]+$/)) {
    throw b;
  }g = g.toLowerCase();var d = g.split(":").length - 1;if (d < 2) {
    throw b;
  }var e = ":".repeat(7 - d + 2);g = g.replace("::", e);var c = g.split(":");if (c.length != 8) {
    throw b;
  }for (var f = 0; f < 8; f++) {
    c[f] = ("0000" + c[f]).slice(-4);
  }return c.join("");
}function hextoipv6(e) {
  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
    throw "malformed IPv6 address octet";
  }e = e.toLowerCase();var b = e.match(/.{1,4}/g);for (var d = 0; d < 8; d++) {
    b[d] = b[d].replace(/^0+/, "");if (b[d] == "") {
      b[d] = "0";
    }
  }e = ":" + b.join(":") + ":";var c = e.match(/:(0:){2,}/g);if (c === null) {
    return e.slice(1, -1);
  }var f = "";for (var d = 0; d < c.length; d++) {
    if (c[d].length > f.length) {
      f = c[d];
    }
  }e = e.replace(f, "::");return e.slice(1, -1);
}function hextoip(b) {
  var d = "malformed hex value";if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
    throw d;
  }if (b.length == 8) {
    var c;try {
      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);return c;
    } catch (a) {
      throw d;
    }
  } else {
    if (b.length == 32) {
      return hextoipv6(b);
    } else {
      return b;
    }
  }
}function iptohex(f) {
  var j = "malformed IP address";f = f.toLowerCase(f);if (f.match(/^[0-9.]+$/)) {
    var b = f.split(".");if (b.length !== 4) {
      throw j;
    }var g = "";try {
      for (var e = 0; e < 4; e++) {
        var h = parseInt(b[e]);g += ("0" + h.toString(16)).slice(-2);
      }return g;
    } catch (c) {
      throw j;
    }
  } else {
    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
      return ipv6tohex(f);
    } else {
      throw j;
    }
  }
}function encodeURIComponentAll(a) {
  var d = encodeURIComponent(a);var b = "";for (var c = 0; c < d.length; c++) {
    if (d[c] == "%") {
      b = b + d.substr(c, 3);c = c + 2;
    } else {
      b = b + "%" + stohex(d[c]);
    }
  }return b;
}function newline_toUnix(a) {
  a = a.replace(/\r\n/mg, "\n");return a;
}function newline_toDos(a) {
  a = a.replace(/\r\n/mg, "\n");a = a.replace(/\n/mg, "\r\n");return a;
}KJUR.lang.String.isInteger = function (a) {
  if (a.match(/^[0-9]+$/)) {
    return true;
  } else {
    if (a.match(/^-[0-9]+$/)) {
      return true;
    } else {
      return false;
    }
  }
};KJUR.lang.String.isHex = function (a) {
  return ishex(a);
};function ishex(a) {
  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
    return true;
  } else {
    return false;
  }
}KJUR.lang.String.isBase64 = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isBase64URL = function (a) {
  if (a.match(/[+/=]/)) {
    return false;
  }a = b64utob64(a);return KJUR.lang.String.isBase64(a);
};KJUR.lang.String.isIntegerArray = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^\[[0-9,]+\]$/)) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isPrintable = function (a) {
  if (a.match(/^[0-9A-Za-z '()+,-./:=?]*$/) !== null) {
    return true;
  }return false;
};KJUR.lang.String.isIA5 = function (a) {
  if (a.match(/^[\x20-\x21\x23-\x7f]*$/) !== null) {
    return true;
  }return false;
};KJUR.lang.String.isMail = function (a) {
  if (a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/) !== null) {
    return true;
  }return false;
};function hextoposhex(a) {
  if (a.length % 2 == 1) {
    return "0" + a;
  }if (a.substr(0, 1) > "7") {
    return "00" + a;
  }return a;
}function intarystrtohex(b) {
  b = b.replace(/^\s*\[\s*/, "");b = b.replace(/\s*\]\s*$/, "");b = b.replace(/\s*/g, "");try {
    var c = b.split(/,/).map(function (g, e, h) {
      var f = parseInt(g);if (f < 0 || 255 < f) {
        throw "integer not in range 0-255";
      }var d = ("00" + f.toString(16)).slice(-2);return d;
    }).join("");return c;
  } catch (a) {
    throw "malformed integer array string: " + a;
  }
}var strdiffidx = function strdiffidx(c, a) {
  var d = c.length;if (c.length > a.length) {
    d = a.length;
  }for (var b = 0; b < d; b++) {
    if (c.charCodeAt(b) != a.charCodeAt(b)) {
      return b;
    }
  }if (c.length != a.length) {
    return d;
  }return -1;
};function oidtohex(g) {
  var f = function f(a) {
    var l = a.toString(16);if (l.length == 1) {
      l = "0" + l;
    }return l;
  };var e = function e(p) {
    var o = "";var l = parseInt(p, 10);var a = l.toString(2);var m = 7 - a.length % 7;if (m == 7) {
      m = 0;
    }var r = "";for (var n = 0; n < m; n++) {
      r += "0";
    }a = r + a;for (var n = 0; n < a.length - 1; n += 7) {
      var q = a.substr(n, 7);if (n != a.length - 7) {
        q = "1" + q;
      }o += f(parseInt(q, 2));
    }return o;
  };try {
    if (!g.match(/^[0-9.]+$/)) {
      return null;
    }var j = "";var b = g.split(".");var k = parseInt(b[0], 10) * 40 + parseInt(b[1], 10);j += f(k);b.splice(0, 2);for (var d = 0; d < b.length; d++) {
      j += e(b[d]);
    }return j;
  } catch (c) {
    return null;
  }
}function hextooid(g) {
  if (!ishex(g)) {
    return null;
  }try {
    var m = [];var p = g.substr(0, 2);var e = parseInt(p, 16);m[0] = new String(Math.floor(e / 40));m[1] = new String(e % 40);var n = g.substr(2);var l = [];for (var f = 0; f < n.length / 2; f++) {
      l.push(parseInt(n.substr(f * 2, 2), 16));
    }var k = [];var d = "";for (var f = 0; f < l.length; f++) {
      if (l[f] & 128) {
        d = d + strpad((l[f] & 127).toString(2), 7);
      } else {
        d = d + strpad((l[f] & 127).toString(2), 7);k.push(new String(parseInt(d, 2)));d = "";
      }
    }var o = m.join(".");if (k.length > 0) {
      o = o + "." + k.join(".");
    }return o;
  } catch (j) {
    return null;
  }
}var strpad = function strpad(c, b, a) {
  if (a == undefined) {
    a = "0";
  }if (c.length >= b) {
    return c;
  }return new Array(b - c.length + 1).join(a) + c;
};function bitstrtoint(e) {
  try {
    var a = e.substr(0, 2);if (a == "00") {
      return parseInt(e.substr(2), 16);
    }var b = parseInt(a, 16);var f = e.substr(2);var d = parseInt(f, 16).toString(2);if (d == "0") {
      d = "00000000";
    }d = d.slice(0, 0 - b);return parseInt(d, 2);
  } catch (c) {
    return -1;
  }
}function inttobitstr(e) {
  var c = Number(e).toString(2);var b = 8 - c.length % 8;if (b == 8) {
    b = 0;
  }c = c + strpad("", b, "0");var d = parseInt(c, 2).toString(16);if (d.length % 2 == 1) {
    d = "0" + d;
  }var a = "0" + b;return a + d;
};
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.Util = new function () {
  this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" };this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHAwithRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" };this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };this.getDigestInfoHex = function (a, b) {
    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
    }return this.DIGESTINFOHEAD[b] + a;
  };this.getPaddedDigestInfoHex = function (h, a, j) {
    var c = this.getDigestInfoHex(h, a);var d = j / 4;if (c.length + 22 > d) {
      throw "key is too short for SigAlg: keylen=" + j + "," + a;
    }var b = "0001";var k = "00" + c;var g = "";var l = d - b.length - k.length;for (var f = 0; f < l; f += 2) {
      g += "ff";
    }var e = b + g + k;return e;
  };this.hashString = function (a, c) {
    var b = new KJUR.crypto.MessageDigest({ alg: c });return b.digestString(a);
  };this.hashHex = function (b, c) {
    var a = new KJUR.crypto.MessageDigest({ alg: c });return a.digestHex(b);
  };this.sha1 = function (a) {
    return this.hashString(a, "sha1");
  };this.sha256 = function (a) {
    return this.hashString(a, "sha256");
  };this.sha256Hex = function (a) {
    return this.hashHex(a, "sha256");
  };this.sha512 = function (a) {
    return this.hashString(a, "sha512");
  };this.sha512Hex = function (a) {
    return this.hashHex(a, "sha512");
  };this.isKey = function (a) {
    if (a instanceof RSAKey || a instanceof KJUR.crypto.DSA || a instanceof KJUR.crypto.ECDSA) {
      return true;
    } else {
      return false;
    }
  };
}();KJUR.crypto.Util.md5 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.ripemd160 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
  var a = new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a);
};KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
};KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
  var c = d % 8;var a = (d - c) / 8;var b = new Array(a + 1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0] = (255 << c & 255 ^ 255) & b[0];return BAtohex(b);
};KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
};KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
  var a = b.bitLength();while (1) {
    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if (b.compareTo(c) != -1) {
      return c;
    }
  }
};KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
  var c = e.compareTo(b);if (c == 1) {
    throw "biMin is greater than biMax";
  }if (c == 0) {
    return e;
  }var a = b.subtract(e);var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e);
};KJUR.crypto.MessageDigest = function (c) {
  var b = null;var a = null;var d = null;this.setAlgAndProvider = function (g, f) {
    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if (g !== null && f === undefined) {
      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
      try {
        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (h) {
        var i = CryptoJS.enc.Hex.parse(h);this.md.update(i);
      };this.digest = function () {
        var h = this.md.finalize();return h.toString(CryptoJS.enc.Hex);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
      try {
        this.md = new sjcl.hash.sha256();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (i) {
        var h = sjcl.codec.hex.toBits(i);this.md.update(h);
      };this.digest = function () {
        var h = this.md.finalize();return sjcl.codec.hex.fromBits(h);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }
  };this.updateString = function (e) {
    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.updateHex = function (e) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digest = function () {
    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestString = function (e) {
    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestHex = function (e) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };if (c !== undefined) {
    if (c.alg !== undefined) {
      this.algName = c.alg;if (c.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
  if (typeof a === "string") {
    a = a.toLowerCase();a = a.replace(/-/, "");
  }return a;
};KJUR.crypto.MessageDigest.getHashLength = function (c) {
  var b = KJUR.crypto.MessageDigest;var a = b.getCanonicalAlgName(c);if (b.HASHLENGTH[a] === undefined) {
    throw "not supported algorithm: " + c;
  }return b.HASHLENGTH[a];
};KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };KJUR.crypto.Mac = function (d) {
  var f = null;var c = null;var a = null;var e = null;var b = null;this.setAlgAndProvider = function (k, i) {
    k = k.toLowerCase();if (k == null) {
      k = "hmacsha1";
    }k = k.toLowerCase();if (k.substr(0, 4) != "hmac") {
      throw "setAlgAndProvider unsupported HMAC alg: " + k;
    }if (i === undefined) {
      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
    }this.algProv = k + "/" + i;var g = k.substr(4);if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
      try {
        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
      } catch (h) {
        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
      }this.updateString = function (l) {
        this.mac.update(l);
      };this.updateHex = function (l) {
        var m = CryptoJS.enc.Hex.parse(l);this.mac.update(m);
      };this.doFinal = function () {
        var l = this.mac.finalize();return l.toString(CryptoJS.enc.Hex);
      };this.doFinalString = function (l) {
        this.updateString(l);return this.doFinal();
      };this.doFinalHex = function (l) {
        this.updateHex(l);return this.doFinal();
      };
    }
  };this.updateString = function (g) {
    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
  };this.updateHex = function (g) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.doFinal = function () {
    throw "digest() not supported for this alg/prov: " + this.algProv;
  };this.doFinalString = function (g) {
    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
  };this.doFinalHex = function (g) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.setPassword = function (h) {
    if (typeof h == "string") {
      var g = h;if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
        g = rstrtohex(h);
      }this.pass = CryptoJS.enc.Hex.parse(g);return;
    }if ((typeof h === "undefined" ? "undefined" : _typeof(h)) != "object") {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }var g = null;if (h.hex !== undefined) {
      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
        throw "Mac: wrong hex password: " + h.hex;
      }g = h.hex;
    }if (h.utf8 !== undefined) {
      g = utf8tohex(h.utf8);
    }if (h.rstr !== undefined) {
      g = rstrtohex(h.rstr);
    }if (h.b64 !== undefined) {
      g = b64tohex(h.b64);
    }if (h.b64u !== undefined) {
      g = b64utohex(h.b64u);
    }if (g == null) {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }this.pass = CryptoJS.enc.Hex.parse(g);
  };if (d !== undefined) {
    if (d.pass !== undefined) {
      this.setPassword(d.pass);
    }if (d.alg !== undefined) {
      this.algName = d.alg;if (d.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.Signature = function (o) {
  var q = null;var n = null;var r = null;var c = null;var l = null;var d = null;var k = null;var h = null;var p = null;var e = null;var b = -1;var g = null;var j = null;var a = null;var i = null;var f = null;this._setAlgNames = function () {
    var s = this.algName.match(/^(.+)with(.+)$/);if (s) {
      this.mdAlgName = s[1].toLowerCase();this.pubkeyAlgName = s[2].toLowerCase();if (this.pubkeyAlgName == "rsaandmgf1" && this.mdAlgName == "sha") {
        this.mdAlgName = "sha1";
      }
    }
  };this._zeroPaddingOfSignature = function (x, w) {
    var v = "";var t = w / 4 - x.length;for (var u = 0; u < t; u++) {
      v = v + "0";
    }return v + x;
  };this.setAlgAndProvider = function (u, t) {
    this._setAlgNames();if (t != "cryptojs/jsrsa") {
      throw new Error("provider not supported: " + t);
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
      try {
        this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });
      } catch (s) {
        throw new Error("setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s);
      }this.init = function (w, x) {
        var y = null;try {
          if (x === undefined) {
            y = KEYUTIL.getKey(w);
          } else {
            y = KEYUTIL.getKey(w, x);
          }
        } catch (v) {
          throw "init failed:" + v;
        }if (y.isPrivate === true) {
          this.prvKey = y;this.state = "SIGN";
        } else {
          if (y.isPublic === true) {
            this.pubKey = y;this.state = "VERIFY";
          } else {
            throw "init failed.:" + y;
          }
        }
      };this.updateString = function (v) {
        this.md.updateString(v);
      };this.updateHex = function (v) {
        this.md.updateHex(v);
      };this.sign = function () {
        this.sHashHex = this.md.digest();if (this.prvKey === undefined && this.ecprvhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.prvKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, prv: this.ecprvhex });
        }if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
          } else {
            if (this.prvKey instanceof KJUR.crypto.ECDSA) {
              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
            } else {
              if (this.prvKey instanceof KJUR.crypto.DSA) {
                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
              } else {
                throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }return this.hSign;
      };this.signString = function (v) {
        this.updateString(v);return this.sign();
      };this.signHex = function (v) {
        this.updateHex(v);return this.sign();
      };this.verify = function (v) {
        this.sHashHex = this.md.digest();if (this.pubKey === undefined && this.ecpubhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.pubKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, pub: this.ecpubhex });
        }if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
          } else {
            if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
            } else {
              if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
              } else {
                throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }
      };
    }
  };this.init = function (s, t) {
    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
  };this.updateString = function (s) {
    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
  };this.updateHex = function (s) {
    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.sign = function () {
    throw "sign() not supported for this alg:prov=" + this.algProvName;
  };this.signString = function (s) {
    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
  };this.signHex = function (s) {
    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.verify = function (s) {
    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
  };this.initParams = o;if (o !== undefined) {
    if (o.alg !== undefined) {
      this.algName = o.alg;if (o.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      } else {
        this.provName = o.prov;
      }this.algProvName = this.algName + ":" + this.provName;this.setAlgAndProvider(this.algName, this.provName);this._setAlgNames();
    }if (o.psssaltlen !== undefined) {
      this.pssSaltLen = o.psssaltlen;
    }if (o.prvkeypem !== undefined) {
      if (o.prvkeypas !== undefined) {
        throw "both prvkeypem and prvkeypas parameters not supported";
      } else {
        try {
          var q = KEYUTIL.getKey(o.prvkeypem);this.init(q);
        } catch (m) {
          throw "fatal error to load pem private key: " + m;
        }
      }
    }
  }
};KJUR.crypto.Cipher = function (a) {};KJUR.crypto.Cipher.encrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPublic) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.encrypt(e);
    }if (c === "RSAOAEP") {
      return f.encryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.encryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.encrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.decrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPrivate) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.decrypt(e);
    }if (c === "RSAOAEP") {
      return f.decryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.decryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.decrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
  if (b instanceof RSAKey) {
    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
      return a;
    }if (a === null || a === undefined) {
      return "RSA";
    }throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
  }throw "getAlgByKeyAndName: not supported algorithm name: " + a;
};KJUR.crypto.OID = new function () {
  this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040023": "secp521r1", "2b81040022": "secp384r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
}();
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECDSA = function (e) {
  var g = "secp256r1";var p = null;var b = null;var i = null;var j = Error,
      f = BigInteger,
      h = ECPointFp,
      m = KJUR.crypto.ECDSA,
      c = KJUR.crypto.ECParameterDB,
      d = m.getName,
      q = ASN1HEX,
      n = q.getVbyListEx,
      k = q.isASN1HEX;var a = new SecureRandom();var o = null;this.type = "EC";this.isPrivate = false;this.isPublic = false;function l(x, t, w, s) {
    var r = Math.max(t.bitLength(), s.bitLength());var y = x.add2D(w);var v = x.curve.getInfinity();for (var u = r - 1; u >= 0; --u) {
      v = v.twice2D();v.z = f.ONE;if (t.testBit(u)) {
        if (s.testBit(u)) {
          v = v.add2D(y);
        } else {
          v = v.add2D(x);
        }
      } else {
        if (s.testBit(u)) {
          v = v.add2D(w);
        }
      }
    }return v;
  }this.getBigRandom = function (r) {
    return new f(r.bitLength(), a).mod(r.subtract(f.ONE)).add(f.ONE);
  };this.setNamedCurve = function (r) {
    this.ecparams = c.getByName(r);this.prvKeyHex = null;this.pubKeyHex = null;this.curveName = r;
  };this.setPrivateKeyHex = function (r) {
    this.isPrivate = true;this.prvKeyHex = r;
  };this.setPublicKeyHex = function (r) {
    this.isPublic = true;this.pubKeyHex = r;
  };this.getPublicKeyXYHex = function () {
    var t = this.pubKeyHex;if (t.substr(0, 2) !== "04") {
      throw "this method supports uncompressed format(04) only";
    }var s = this.ecparams.keylen / 4;if (t.length !== 2 + s * 2) {
      throw "malformed public key hex length";
    }var r = {};r.x = t.substr(2, s);r.y = t.substr(2 + s);return r;
  };this.getShortNISTPCurveName = function () {
    var r = this.curveName;if (r === "secp256r1" || r === "NIST P-256" || r === "P-256" || r === "prime256v1") {
      return "P-256";
    }if (r === "secp384r1" || r === "NIST P-384" || r === "P-384") {
      return "P-384";
    }return null;
  };this.generateKeyPairHex = function () {
    var t = this.ecparams.n;var w = this.getBigRandom(t);var u = this.ecparams.G.multiply(w);var z = u.getX().toBigInteger();var x = u.getY().toBigInteger();var r = this.ecparams.keylen / 4;var v = ("0000000000" + w.toString(16)).slice(-r);var A = ("0000000000" + z.toString(16)).slice(-r);var y = ("0000000000" + x.toString(16)).slice(-r);var s = "04" + A + y;this.setPrivateKeyHex(v);this.setPublicKeyHex(s);return { ecprvhex: v, ecpubhex: s };
  };this.signWithMessageHash = function (r) {
    return this.signHex(r, this.prvKeyHex);
  };this.signHex = function (x, u) {
    var A = new f(u, 16);var v = this.ecparams.n;var z = new f(x.substring(0, this.ecparams.keylen / 4), 16);do {
      var w = this.getBigRandom(v);var B = this.ecparams.G;var y = B.multiply(w);var t = y.getX().toBigInteger().mod(v);
    } while (t.compareTo(f.ZERO) <= 0);var C = w.modInverse(v).multiply(z.add(A.multiply(t))).mod(v);return m.biRSSigToASN1Sig(t, C);
  };this.sign = function (w, B) {
    var z = B;var u = this.ecparams.n;var y = f.fromByteArrayUnsigned(w);do {
      var v = this.getBigRandom(u);var A = this.ecparams.G;var x = A.multiply(v);var t = x.getX().toBigInteger().mod(u);
    } while (t.compareTo(BigInteger.ZERO) <= 0);var C = v.modInverse(u).multiply(y.add(z.multiply(t))).mod(u);return this.serializeSig(t, C);
  };this.verifyWithMessageHash = function (s, r) {
    return this.verifyHex(s, r, this.pubKeyHex);
  };this.verifyHex = function (v, y, u) {
    try {
      var t, B;var w = m.parseSigHex(y);t = w.r;B = w.s;var x = h.decodeFromHex(this.ecparams.curve, u);var z = new f(v.substring(0, this.ecparams.keylen / 4), 16);return this.verifyRaw(z, t, B, x);
    } catch (A) {
      return false;
    }
  };this.verify = function (z, A, u) {
    var w, t;if (Bitcoin.Util.isArray(A)) {
      var y = this.parseSig(A);w = y.r;t = y.s;
    } else {
      if ("object" === (typeof A === "undefined" ? "undefined" : _typeof(A)) && A.r && A.s) {
        w = A.r;t = A.s;
      } else {
        throw "Invalid value for signature";
      }
    }var v;if (u instanceof ECPointFp) {
      v = u;
    } else {
      if (Bitcoin.Util.isArray(u)) {
        v = h.decodeFrom(this.ecparams.curve, u);
      } else {
        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
      }
    }var x = f.fromByteArrayUnsigned(z);return this.verifyRaw(x, w, t, v);
  };this.verifyRaw = function (z, t, E, y) {
    var x = this.ecparams.n;var D = this.ecparams.G;if (t.compareTo(f.ONE) < 0 || t.compareTo(x) >= 0) {
      return false;
    }if (E.compareTo(f.ONE) < 0 || E.compareTo(x) >= 0) {
      return false;
    }var A = E.modInverse(x);var w = z.multiply(A).mod(x);var u = t.multiply(A).mod(x);var B = D.multiply(w).add(y.multiply(u));var C = B.getX().toBigInteger().mod(x);return C.equals(t);
  };this.serializeSig = function (v, u) {
    var w = v.toByteArraySigned();var t = u.toByteArraySigned();var x = [];x.push(2);x.push(w.length);x = x.concat(w);x.push(2);x.push(t.length);x = x.concat(t);x.unshift(x.length);x.unshift(48);return x;
  };this.parseSig = function (y) {
    var x;if (y[0] != 48) {
      throw new Error("Signature not a valid DERSequence");
    }x = 2;if (y[x] != 2) {
      throw new Error("First element in signature must be a DERInteger");
    }var w = y.slice(x + 2, x + 2 + y[x + 1]);x += 2 + y[x + 1];if (y[x] != 2) {
      throw new Error("Second element in signature must be a DERInteger");
    }var t = y.slice(x + 2, x + 2 + y[x + 1]);x += 2 + y[x + 1];var v = f.fromByteArrayUnsigned(w);var u = f.fromByteArrayUnsigned(t);return { r: v, s: u };
  };this.parseSigCompact = function (w) {
    if (w.length !== 65) {
      throw "Signature has the wrong length";
    }var t = w[0] - 27;if (t < 0 || t > 7) {
      throw "Invalid signature type";
    }var x = this.ecparams.n;var v = f.fromByteArrayUnsigned(w.slice(1, 33)).mod(x);var u = f.fromByteArrayUnsigned(w.slice(33, 65)).mod(x);return { r: v, s: u, i: t };
  };this.readPKCS5PrvKeyHex = function (u) {
    if (k(u) === false) {
      throw new Error("not ASN.1 hex string");
    }var r, t, v;try {
      r = n(u, 0, ["[0]", 0], "06");t = n(u, 0, [1], "04");try {
        v = n(u, 0, ["[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new Error("malformed PKCS#1/5 plain ECC private key");
    }this.curveName = d(r);if (this.curveName === undefined) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);this.setPrivateKeyHex(t);this.isPublic = false;
  };this.readPKCS8PrvKeyHex = function (v) {
    if (k(v) === false) {
      throw new j("not ASN.1 hex string");
    }var t, r, u, w;try {
      t = n(v, 0, [1, 0], "06");r = n(v, 0, [1, 1], "06");u = n(v, 0, [2, 0, 1], "04");try {
        w = n(v, 0, [2, 0, "[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new j("malformed PKCS#8 plain ECC private key");
    }this.curveName = d(r);if (this.curveName === undefined) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(w);this.setPrivateKeyHex(u);this.isPublic = false;
  };this.readPKCS8PubKeyHex = function (u) {
    if (k(u) === false) {
      throw new j("not ASN.1 hex string");
    }var t, r, v;try {
      t = n(u, 0, [0, 0], "06");r = n(u, 0, [0, 1], "06");v = n(u, 0, [1], "03");
    } catch (s) {
      throw new j("malformed PKCS#8 ECC public key");
    }this.curveName = d(r);if (this.curveName === null) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);
  };this.readCertPubKeyHex = function (t, v) {
    if (k(t) === false) {
      throw new j("not ASN.1 hex string");
    }var r, u;try {
      r = n(t, 0, [0, 5, 0, 1], "06");u = n(t, 0, [0, 5, 1], "03");
    } catch (s) {
      throw new j("malformed X.509 certificate ECC public key");
    }this.curveName = d(r);if (this.curveName === null) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(u);
  };if (e !== undefined) {
    if (e.curve !== undefined) {
      this.curveName = e.curve;
    }
  }if (this.curveName === undefined) {
    this.curveName = g;
  }this.setNamedCurve(this.curveName);if (e !== undefined) {
    if (e.prv !== undefined) {
      this.setPrivateKeyHex(e.prv);
    }if (e.pub !== undefined) {
      this.setPublicKeyHex(e.pub);
    }
  }
};KJUR.crypto.ECDSA.parseSigHex = function (a) {
  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d = new BigInteger(b.r, 16);var c = new BigInteger(b.s, 16);return { r: d, s: c };
};KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
  var j = ASN1HEX,
      i = j.getChildIdx,
      g = j.getV;j.checkStrictDER(f, 0);if (f.substr(0, 2) != "30") {
    throw new Error("signature is not a ASN.1 sequence");
  }var h = i(f, 0);if (h.length != 2) {
    throw new Error("signature shall have two elements");
  }var e = h[0];var d = h[1];if (f.substr(e, 2) != "02") {
    throw new Error("1st item not ASN.1 integer");
  }if (f.substr(d, 2) != "02") {
    throw new Error("2nd item not ASN.1 integer");
  }var c = g(f, e);var b = g(f, d);return { r: c, s: b };
};KJUR.crypto.ECDSA.asn1SigToConcatSig = function (c) {
  var d = KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b = d.r;var a = d.s;if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
    b = b.substr(2);
  }if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
    a = a.substr(2);
  }if (b.length % 32 == 30) {
    b = "00" + b;
  }if (a.length % 32 == 30) {
    a = "00" + a;
  }if (b.length % 32 != 0) {
    throw "unknown ECDSA sig r length error";
  }if (a.length % 32 != 0) {
    throw "unknown ECDSA sig s length error";
  }return b + a;
};KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
  if (a.length / 2 * 8 % (16 * 8) != 0) {
    throw "unknown ECDSA concatinated r-s sig  length error";
  }var c = a.substr(0, a.length / 2);var b = a.substr(a.length / 2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
};KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
  var d = new BigInteger(b, 16);var c = new BigInteger(a, 16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
};KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
  var c = KJUR.asn1;var b = new c.DERInteger({ bigint: f });var a = new c.DERInteger({ bigint: d });var e = new c.DERSequence({ array: [b, a] });return e.getEncodedHex();
};KJUR.crypto.ECDSA.getName = function (a) {
  if (a === "2b8104001f") {
    return "secp192k1";
  }if (a === "2a8648ce3d030107") {
    return "secp256r1";
  }if (a === "2b8104000a") {
    return "secp256k1";
  }if (a === "2b81040021") {
    return "secp224r1";
  }if (a === "2b81040022") {
    return "secp384r1";
  }if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
    return "secp256r1";
  }if ("|secp256k1|".indexOf(a) !== -1) {
    return "secp256k1";
  }if ("|secp224r1|NIST P-224|P-224|".indexOf(a) !== -1) {
    return "secp224r1";
  }if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
    return "secp384r1";
  }return null;
};
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECParameterDB = new function () {
  var b = {};var c = {};function a(d) {
    return new BigInteger(d, 16);
  }this.getByName = function (e) {
    var d = e;if (typeof c[d] != "undefined") {
      d = c[e];
    }if (typeof b[d] != "undefined") {
      return b[d];
    }throw "unregistered EC curve name: " + d;
  };this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
    b[A] = {};var s = a(o);var z = a(g);var y = a(m);var t = a(e);var w = a(j);var r = new ECCurveFp(s, z, y);var q = r.decodePointHex("04" + f + k);b[A]["name"] = A;b[A]["keylen"] = l;b[A]["curve"] = r;b[A]["G"] = q;b[A]["n"] = t;b[A]["h"] = w;b[A]["oid"] = d;b[A]["info"] = x;for (var v = 0; v < u.length; v++) {
      c[u[v]] = A;
    }
  };
}();KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);
var KEYUTIL = function () {
  var d = function d(p, r, q) {
    return k(CryptoJS.AES, p, r, q);
  };var e = function e(p, r, q) {
    return k(CryptoJS.TripleDES, p, r, q);
  };var a = function a(p, r, q) {
    return k(CryptoJS.DES, p, r, q);
  };var k = function k(s, x, u, q) {
    var r = CryptoJS.enc.Hex.parse(x);var w = CryptoJS.enc.Hex.parse(u);var p = CryptoJS.enc.Hex.parse(q);var t = {};t.key = w;t.iv = p;t.ciphertext = r;var v = s.decrypt(t, w, { iv: p });return CryptoJS.enc.Hex.stringify(v);
  };var l = function l(p, r, q) {
    return g(CryptoJS.AES, p, r, q);
  };var o = function o(p, r, q) {
    return g(CryptoJS.TripleDES, p, r, q);
  };var f = function f(p, r, q) {
    return g(CryptoJS.DES, p, r, q);
  };var g = function g(t, y, v, q) {
    var s = CryptoJS.enc.Hex.parse(y);var x = CryptoJS.enc.Hex.parse(v);var p = CryptoJS.enc.Hex.parse(q);var w = t.encrypt(s, x, { iv: p });var r = CryptoJS.enc.Hex.parse(w.toString());var u = CryptoJS.enc.Base64.stringify(r);return u;
  };var i = { "AES-256-CBC": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };var c = function c(p) {
    return i[p]["proc"];
  };var m = function m(p) {
    var r = CryptoJS.lib.WordArray.random(p);var q = CryptoJS.enc.Hex.stringify(r);return q;
  };var n = function n(v) {
    var w = {};var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));if (q) {
      w.cipher = q[1];w.ivsalt = q[2];
    }var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if (p) {
      w.type = p[1];
    }var u = -1;var x = 0;if (v.indexOf("\r\n\r\n") != -1) {
      u = v.indexOf("\r\n\r\n");x = 2;
    }if (v.indexOf("\n\n") != -1) {
      u = v.indexOf("\n\n");x = 1;
    }var t = v.indexOf("-----END");if (u != -1 && t != -1) {
      var r = v.substring(u + x * 2, t - x);r = r.replace(/\s+/g, "");w.data = r;
    }return w;
  };var j = function j(q, y, p) {
    var v = p.substring(0, 16);var t = CryptoJS.enc.Hex.parse(v);var r = CryptoJS.enc.Utf8.parse(y);var u = i[q]["keylen"] + i[q]["ivlen"];var x = "";var w = null;for (;;) {
      var s = CryptoJS.algo.MD5.create();if (w != null) {
        s.update(w);
      }s.update(r);s.update(t);w = s.finalize();x = x + CryptoJS.enc.Hex.stringify(w);if (x.length >= u * 2) {
        break;
      }
    }var z = {};z.keyhex = x.substr(0, i[q]["keylen"] * 2);z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);return z;
  };var b = function b(p, v, r, w) {
    var s = CryptoJS.enc.Base64.parse(p);var q = CryptoJS.enc.Hex.stringify(s);var u = i[v]["proc"];var t = u(q, r, w);return t;
  };var h = function h(p, s, q, u) {
    var r = i[s]["eproc"];var t = r(p, q, u);return t;
  };return { version: "1.0.0", parsePKCS5PEM: function parsePKCS5PEM(p) {
      return n(p);
    }, getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
      return j(q, p, r);
    }, decryptKeyB64: function decryptKeyB64(p, r, q, s) {
      return b(p, r, q, s);
    }, getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
      var q = n(y);var t = q.type;var r = q.cipher;var p = q.ivsalt;var s = q.data;var w = j(r, x, p);var v = w.keyhex;var u = b(s, r, v, p);return u;
    }, getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
      var p = "";if (typeof t == "undefined" || t == null) {
        t = "AES-256-CBC";
      }if (typeof i[t] == "undefined") {
        throw "KEYUTIL unsupported algorithm: " + t;
      }if (typeof r == "undefined" || r == null) {
        var v = i[t]["ivlen"];var u = m(v);r = u.toUpperCase();
      }var z = j(t, A, r);var y = z.keyhex;var w = h(s, t, y, r);var q = w.replace(/(.{64})/g, "$1\r\n");var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";p += "Proc-Type: 4,ENCRYPTED\r\n";p += "DEK-Info: " + t + "," + r + "\r\n";p += "\r\n";p += q;p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";return p;
    }, parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
      var B = ASN1HEX;var z = B.getChildIdx;var w = B.getV;var t = {};var r = z(y, 0);if (r.length != 2) {
        throw "malformed format: SEQUENCE(0).items != 2: " + r.length;
      }t.ciphertext = w(y, r[1]);var A = z(y, r[0]);if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0).items != 2: " + A.length;
      }if (w(y, A[0]) != "2a864886f70d01050d") {
        throw "this only supports pkcs5PBES2";
      }var p = z(y, A[1]);if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1).items != 2: " + p.length;
      }var q = z(y, p[1]);if (q.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length;
      }if (w(y, q[0]) != "2a864886f70d0307") {
        throw "this only supports TripleDES";
      }t.encryptionSchemeAlg = "TripleDES";t.encryptionSchemeIV = w(y, q[1]);var s = z(y, p[0]);if (s.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length;
      }if (w(y, s[0]) != "2a864886f70d01050c") {
        throw "this only supports pkcs5PBKDF2";
      }var x = z(y, s[1]);if (x.length < 2) {
        throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length;
      }t.pbkdf2Salt = w(y, x[0]);var u = w(y, x[1]);try {
        t.pbkdf2Iter = parseInt(u, 16);
      } catch (v) {
        throw "malformed format pbkdf2Iter: " + u;
      }return t;
    }, getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q = u.pbkdf2Iter;var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q });var r = CryptoJS.enc.Hex.stringify(s);return r;
    }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");var p = this.parseHexOfEncryptedPKCS8(r);var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);var v = {};v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);var t = CryptoJS.enc.Hex.parse(u);var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s });var q = CryptoJS.enc.Hex.stringify(w);return q;
    }, getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
      var v = ASN1HEX;var u = v.getChildIdx;var t = v.getV;var q = {};q.algparam = null;if (s.substr(0, 2) != "30") {
        throw "malformed plain PKCS8 private key(code:001)";
      }var r = u(s, 0);if (r.length != 3) {
        throw "malformed plain PKCS8 private key(code:002)";
      }if (s.substr(r[1], 2) != "30") {
        throw "malformed PKCS8 private key(code:003)";
      }var p = u(s, r[1]);if (p.length != 2) {
        throw "malformed PKCS8 private key(code:004)";
      }if (s.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 private key(code:005)";
      }q.algoid = t(s, p[0]);if (s.substr(p[1], 2) == "06") {
        q.algparam = t(s, p[1]);
      }if (s.substr(r[2], 2) != "04") {
        throw "malformed PKCS8 private key(code:006)";
      }q.keyidx = v.getVidx(s, r[2]);return q;
    }, getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
      var p = pemtohex(q, "PRIVATE KEY");var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
      var q = this.parsePlainPrivatePKCS8Hex(p);var r;if (q.algoid == "2a864886f70d010101") {
        r = new RSAKey();
      } else {
        if (q.algoid == "2a8648ce380401") {
          r = new KJUR.crypto.DSA();
        } else {
          if (q.algoid == "2a8648ce3d0201") {
            r = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported private key algorithm";
          }
        }
      }r.readPKCS8PrvKeyHex(p);return r;
    }, _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
      var p;var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");if (r === "2a864886f70d010101") {
        p = new RSAKey();
      } else {
        if (r === "2a8648ce380401") {
          p = new KJUR.crypto.DSA();
        } else {
          if (r === "2a8648ce3d0201") {
            p = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported PKCS#8 public key hex";
          }
        }
      }p.readPKCS8PubKeyHex(q);return p;
    }, parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
      var u = ASN1HEX;var t = u.getChildIdx;var s = u.getV;var p = {};if (r.substr(0, 2) != "30") {
        throw "malformed RSA key(code:001)";
      }var q = t(r, 0);if (q.length != 2) {
        throw "malformed RSA key(code:002)";
      }if (r.substr(q[0], 2) != "02") {
        throw "malformed RSA key(code:003)";
      }p.n = s(r, q[0]);if (r.substr(q[1], 2) != "02") {
        throw "malformed RSA key(code:004)";
      }p.e = s(r, q[1]);return p;
    }, parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
      var v = ASN1HEX;var u = v.getChildIdx;var s = v.getV;var q = {};q.algparam = null;var r = u(t, 0);if (r.length != 2) {
        throw "outer DERSequence shall have 2 elements: " + r.length;
      }var w = r[0];if (t.substr(w, 2) != "30") {
        throw "malformed PKCS8 public key(code:001)";
      }var p = u(t, w);if (p.length != 2) {
        throw "malformed PKCS8 public key(code:002)";
      }if (t.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 public key(code:003)";
      }q.algoid = s(t, p[0]);if (t.substr(p[1], 2) == "06") {
        q.algparam = s(t, p[1]);
      } else {
        if (t.substr(p[1], 2) == "30") {
          q.algparam = {};q.algparam.p = v.getVbyList(t, p[1], [0], "02");q.algparam.q = v.getVbyList(t, p[1], [1], "02");q.algparam.g = v.getVbyList(t, p[1], [2], "02");
        }
      }if (t.substr(r[1], 2) != "03") {
        throw "malformed PKCS8 public key(code:004)";
      }q.key = s(t, r[1]).substr(2);return q;
    } };
}();KEYUTIL.getKey = function (l, k, n) {
  var G = ASN1HEX,
      L = G.getChildIdx,
      v = G.getV,
      d = G.getVbyList,
      c = KJUR.crypto,
      i = c.ECDSA,
      C = c.DSA,
      w = RSAKey,
      M = pemtohex,
      F = KEYUTIL;if (typeof w != "undefined" && l instanceof w) {
    return l;
  }if (typeof i != "undefined" && l instanceof i) {
    return l;
  }if (typeof C != "undefined" && l instanceof C) {
    return l;
  }if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
    return new i({ pub: l.xy, curve: l.curve });
  }if (l.curve !== undefined && l.d !== undefined) {
    return new i({ prv: l.d, curve: l.curve });
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(l.n, l.e);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
    var P = new w();P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
    var P = new w();P.setPrivate(l.n, l.e, l.d);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
    var P = new C();P.setPublic(l.p, l.q, l.g, l.y);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
    var P = new C();P.setPrivate(l.p, l.q, l.g, l.y, l.x);return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(b64utohex(l.n), b64utohex(l.e));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
    var P = new w();P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
    var P = new w();P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));return P;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;j.setPublicKeyHex(u);return j;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;var b = ("0000000000" + b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j;
  }if (n === "pkcs5prv") {
    var J = l,
        G = ASN1HEX,
        N,
        P;N = L(J, 0);if (N.length === 9) {
      P = new w();P.readPKCS5PrvKeyHex(J);
    } else {
      if (N.length === 6) {
        P = new C();P.readPKCS5PrvKeyHex(J);
      } else {
        if (N.length > 2 && J.substr(N[1], 2) === "04") {
          P = new i();P.readPKCS5PrvKeyHex(J);
        } else {
          throw "unsupported PKCS#1/5 hexadecimal key";
        }
      }
    }return P;
  }if (n === "pkcs8prv") {
    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);return P;
  }if (n === "pkcs8pub") {
    return F._getKeyFromPublicPKCS8Hex(l);
  }if (n === "x509pub") {
    return X509.getPublicKeyFromCertHex(l);
  }if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
    return X509.getPublicKeyFromCertPEM(l);
  }if (l.indexOf("-END PUBLIC KEY-") != -1) {
    var O = pemtohex(l, "PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "RSA PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var I = M(l, "DSA PRIVATE KEY");var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "EC PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
  }if (l.indexOf("-END PRIVATE KEY-") != -1) {
    return F.getKeyFromPlainPrivatePKCS8PEM(l);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var o = F.getDecryptedKeyHex(l, k);var H = new RSAKey();H.readPKCS5PrvKeyHex(o);return H;
  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var P = d(I, 0, [1], "04");var f = d(I, 0, [2, 0], "06");var A = d(I, 0, [3, 0], "03").substr(2);var e = "";if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
      e = KJUR.crypto.OID.oidhex2name[f];
    } else {
      throw "undefined OID(hex) in KJUR.crypto.OID: " + f;
    }var j = new i({ curve: e });j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic = false;return j;
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
    return F.getKeyFromEncryptedPKCS8PEM(l, k);
  }throw new Error("not supported argument");
};KEYUTIL.generateKeypair = function (a, c) {
  if (a == "RSA") {
    var b = c;var h = new RSAKey();h.generate(b, "10001");h.isPrivate = true;h.isPublic = true;var f = new RSAKey();var e = h.n.toString(16);var i = h.e.toString(16);f.setPublic(e, i);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
  } else {
    if (a == "EC") {
      var d = c;var g = new KJUR.crypto.ECDSA({ curve: d });var j = g.generateKeyPairHex();var h = new KJUR.crypto.ECDSA({ curve: d });h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate = true;h.isPublic = false;var f = new KJUR.crypto.ECDSA({ curve: d });f.setPublicKeyHex(j.ecpubhex);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
    } else {
      throw "unknown algorithm: " + a;
    }
  }
};KEYUTIL.getPEM = function (b, D, y, m, q, j) {
  var F = KJUR,
      k = F.asn1,
      z = k.DERObjectIdentifier,
      f = k.DERInteger,
      l = k.ASN1Util.newObject,
      a = k.x509,
      C = a.SubjectPublicKeyInfo,
      e = F.crypto,
      u = e.DSA,
      r = e.ECDSA,
      n = RSAKey;function A(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.n } }, { "int": s.e }, { "int": { bigint: s.d } }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.dmp1 } }, { "int": { bigint: s.dmq1 } }, { "int": { bigint: s.coeff } }] });return G;
  }function B(G) {
    var s = l({ seq: [{ "int": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: ["a0", true, { oid: { name: G.curveName } }] }, { tag: ["a1", true, { bitstr: { hex: "00" + G.pubKeyHex } }] }] });return s;
  }function x(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.g } }, { "int": { bigint: s.y } }, { "int": { bigint: s.x } }] });return G;
  }if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
    var E = new C(b);var w = E.getEncodedHex();return hextopem(w, "PUBLIC KEY");
  }if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();return hextopem(w, "RSA PRIVATE KEY");
  }if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
    var i = new z({ name: b.curveName });var v = i.getEncodedHex();var h = B(b);var t = h.getEncodedHex();var p = "";p += hextopem(v, "EC PARAMETERS");p += hextopem(t, "EC PRIVATE KEY");return p;
  }if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();return hextopem(w, "DSA PRIVATE KEY");
  }if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
  }if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
    var E = B(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
  }if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
  }var o = function o(G, s) {
    var I = c(G, s);var H = new l({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { "int": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] });return H.getEncodedHex();
  };var c = function c(N, O) {
    var H = 100;var M = CryptoJS.lib.WordArray.random(8);var L = "DES-EDE3-CBC";var s = CryptoJS.lib.WordArray.random(8);var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H });var J = CryptoJS.enc.Hex.parse(N);var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + "";var G = {};G.ciphertext = K;G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter = H;G.encryptionSchemeAlg = L;G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);return G;
  };if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
    var g = A(b);var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { "null": true }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
    var g = new l({ seq: [{ "int": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: ["a1", true, { bitstr: { hex: "00" + b.pubKeyHex } }] }] });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
    var g = new f({ bigint: b.x });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ "int": { bigint: b.p } }, { "int": { bigint: b.q } }, { "int": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }throw new Error("unsupported object nor format");
};KEYUTIL.getKeyFromCSRPEM = function (b) {
  var a = pemtohex(b, "CERTIFICATE REQUEST");var c = KEYUTIL.getKeyFromCSRHex(a);return c;
};KEYUTIL.getKeyFromCSRHex = function (a) {
  var c = KEYUTIL.parseCSRHex(a);var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");return b;
};KEYUTIL.parseCSRHex = function (d) {
  var i = ASN1HEX;var f = i.getChildIdx;var c = i.getTLV;var b = {};var g = d;if (g.substr(0, 2) != "30") {
    throw "malformed CSR(code:001)";
  }var e = f(g, 0);if (e.length < 1) {
    throw "malformed CSR(code:002)";
  }if (g.substr(e[0], 2) != "30") {
    throw "malformed CSR(code:003)";
  }var a = f(g, e[0]);if (a.length < 3) {
    throw "malformed CSR(code:004)";
  }b.p8pubkeyhex = c(g, a[2]);return b;
};KEYUTIL.getKeyID = function (f) {
  var c = KEYUTIL;var e = ASN1HEX;if (typeof f === "string" && f.indexOf("BEGIN ") != -1) {
    f = c.getKey(f);
  }var d = pemtohex(c.getPEM(f));var b = e.getIdxbyList(d, 0, [1]);var a = e.getV(d, b).substring(2);return KJUR.crypto.Util.hashHex(a, "sha1");
};KEYUTIL.getJWKFromKey = function (d) {
  var b = {};if (d instanceof RSAKey && d.isPrivate) {
    b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));b.d = hextob64u(d.d.toString(16));b.p = hextob64u(d.p.toString(16));b.q = hextob64u(d.q.toString(16));b.dp = hextob64u(d.dmp1.toString(16));b.dq = hextob64u(d.dmq1.toString(16));b.qi = hextob64u(d.coeff.toString(16));return b;
  } else {
    if (d instanceof RSAKey && d.isPublic) {
      b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));return b;
    } else {
      if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) {
        var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
          throw "unsupported curve name for JWT: " + a;
        }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);b.d = hextob64u(d.prvKeyHex);return b;
      } else {
        if (d instanceof KJUR.crypto.ECDSA && d.isPublic) {
          var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
            throw "unsupported curve name for JWT: " + a;
          }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);return b;
        }
      }
    }
  }throw "not supported key object";
};
RSAKey.getPosArrayOfChildrenFromHex = function (a) {
  return ASN1HEX.getChildIdx(a, 0);
};RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
  var n = ASN1HEX;var i = n.getV;var k = RSAKey.getPosArrayOfChildrenFromHex(f);var e = i(f, k[0]);var j = i(f, k[1]);var b = i(f, k[2]);var c = i(f, k[3]);var h = i(f, k[4]);var g = i(f, k[5]);var m = i(f, k[6]);var l = i(f, k[7]);var d = i(f, k[8]);var k = new Array();k.push(e, j, b, c, h, g, m, l, d);return k;
};RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
  var c = pemtohex(d);var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
  var c, i, k, b, a, f, d, j;var m = ASN1HEX;var l = m.getVbyListEx;if (m.isASN1HEX(e) === false) {
    throw new Error("not ASN.1 hex string");
  }try {
    c = l(e, 0, [2, 0, 1], "02");i = l(e, 0, [2, 0, 2], "02");k = l(e, 0, [2, 0, 3], "02");b = l(e, 0, [2, 0, 4], "02");a = l(e, 0, [2, 0, 5], "02");f = l(e, 0, [2, 0, 6], "02");d = l(e, 0, [2, 0, 7], "02");j = l(e, 0, [2, 0, 8], "02");
  } catch (g) {
    throw new Error("malformed PKCS#8 plain RSA private key");
  }this.setPrivateEx(c, i, k, b, a, f, d, j);
};RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
  var e = ASN1HEX;var b = e.getV;if (e.isASN1HEX(c) === false) {
    throw new Error("keyHex is not ASN.1 hex string");
  }var a = e.getChildIdx(c, 0);if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
    throw new Error("wrong hex for PKCS#5 public key");
  }var f = b(c, a[0]);var d = b(c, a[1]);this.setPublic(f, d);
};RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
  var c = ASN1HEX;if (c.isASN1HEX(b) === false) {
    throw new Error("not ASN.1 hex string");
  }if (c.getTLVbyListEx(b, 0, [0, 0]) !== "06092a864886f70d010101") {
    throw new Error("not PKCS8 RSA public key");
  }var a = c.getTLVbyListEx(b, 0, [1, 0]);this.readPKCS5PubKeyHex(a);
};RSAKey.prototype.readCertPubKeyHex = function (b, d) {
  var a, c;a = new X509();a.readCertHex(b);c = a.getPublicKeyHex();this.readPKCS8PubKeyHex(c);
};
var _RE_HEXDECONLY = new RegExp("[^0-9a-f]", "gi");function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
  var b = function b(f) {
    return KJUR.crypto.Util.hashString(f, a);
  };var c = b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
}function _zeroPaddingOfSignature(e, d) {
  var c = "";var a = d / 4 - e.length;for (var b = 0; b < a; b++) {
    c = c + "0";
  }return c + e;
}RSAKey.prototype.sign = function (d, a) {
  var b = function b(e) {
    return KJUR.crypto.Util.hashString(e, a);
  };var c = b(d);return this.signWithMessageHash(c, a);
};RSAKey.prototype.signWithMessageHash = function (e, c) {
  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());var b = parseBigInt(f, 16);var d = this.doPrivate(b);var a = d.toString(16);return _zeroPaddingOfSignature(a, this.n.bitLength());
};function pss_mgf1_str(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));d += 1;
  }return b;
}RSAKey.prototype.signPSS = function (e, a, d) {
  var c = function c(f) {
    return KJUR.crypto.Util.hashHex(f, a);
  };var b = c(rstrtohex(e));if (d === undefined) {
    d = -1;
  }return this.signWithMessageHashPSS(b, a, d);
};RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
  var b = hextorstr(l);var g = b.length;var m = this.n.bitLength() - 1;var c = Math.ceil(m / 8);var d;var o = function o(i) {
    return KJUR.crypto.Util.hashHex(i, a);
  };if (k === -1 || k === undefined) {
    k = g;
  } else {
    if (k === -2) {
      k = c - g - 2;
    } else {
      if (k < -2) {
        throw new Error("invalid salt length");
      }
    }
  }if (c < g + k + 2) {
    throw new Error("data too long");
  }var f = "";if (k > 0) {
    f = new Array(k);new SecureRandom().nextBytes(f);f = String.fromCharCode.apply(String, f);
  }var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));var j = [];for (d = 0; d < c - k - g - 2; d += 1) {
    j[d] = 0;
  }var e = String.fromCharCode.apply(String, j) + "\x01" + f;var h = pss_mgf1_str(n, e.length, o);var q = [];for (d = 0; d < e.length; d += 1) {
    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
  }var p = 65280 >> 8 * c - m & 255;q[0] &= ~p;for (d = 0; d < g; d++) {
    q.push(n.charCodeAt(d));
  }q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
};function _rsasign_getDecryptSignatureBI(a, d, c) {
  var b = new RSAKey();b.setPublic(d, c);var e = b.doPublic(a);return e;
}function _rsasign_getHexDigestInfoFromSig(a, c, b) {
  var e = _rsasign_getDecryptSignatureBI(a, c, b);var d = e.toString(16).replace(/^1f+00/, "");return d;
}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];var b = d.length;if (f.substring(0, b) == d) {
      var c = [e, f.substring(b)];return c;
    }
  }return [];
}RSAKey.prototype.verify = function (f, j) {
  j = j.replace(_RE_HEXDECONLY, "");j = j.replace(/[ \n]+/g, "");var b = parseBigInt(j, 16);if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }var i = this.doPublic(b);var e = i.toString(16).replace(/^1f+00/, "");var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if (g.length == 0) {
    return false;
  }var d = g[0];var h = g[1];var a = function a(k) {
    return KJUR.crypto.Util.hashString(k, d);
  };var c = a(f);return h == c;
};RSAKey.prototype.verifyWithMessageHash = function (e, a) {
  if (a.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }var b = parseBigInt(a, 16);if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }var h = this.doPublic(b);var g = h.toString(16).replace(/^1f+00/, "");var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if (c.length == 0) {
    return false;
  }var d = c[0];var f = c[1];return f == e;
};RSAKey.prototype.verifyPSS = function (c, b, a, f) {
  var e = function e(g) {
    return KJUR.crypto.Util.hashHex(g, a);
  };var d = e(rstrtohex(c));if (f === undefined) {
    f = -1;
  }return this.verifyWithMessageHashPSS(d, b, a, f);
};RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
  if (s.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }var k = new BigInteger(s, 16);var r = function r(i) {
    return KJUR.crypto.Util.hashHex(i, l);
  };var j = hextorstr(f);var h = j.length;var g = this.n.bitLength() - 1;var m = Math.ceil(g / 8);var q;if (c === -1 || c === undefined) {
    c = h;
  } else {
    if (c === -2) {
      c = m - h - 2;
    } else {
      if (c < -2) {
        throw new Error("invalid salt length");
      }
    }
  }if (m < h + c + 2) {
    throw new Error("data too long");
  }var a = this.doPublic(k).toByteArray();for (q = 0; q < a.length; q += 1) {
    a[q] &= 255;
  }while (a.length < m) {
    a.unshift(0);
  }if (a[m - 1] !== 188) {
    throw new Error("encoded message does not end in 0xbc");
  }a = String.fromCharCode.apply(String, a);var d = a.substr(0, m - h - 1);var e = a.substr(d.length, h);var p = 65280 >> 8 * m - g & 255;if ((d.charCodeAt(0) & p) !== 0) {
    throw new Error("bits beyond keysize not zero");
  }var n = pss_mgf1_str(e, d.length, r);var o = [];for (q = 0; q < d.length; q += 1) {
    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
  }o[0] &= ~p;var b = m - h - c - 2;for (q = 0; q < b; q += 1) {
    if (o[q] !== 0) {
      throw new Error("leftmost octets not zero");
    }
  }if (o[b] !== 1) {
    throw new Error("0x01 marker not found");
  }return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
};RSAKey.SALT_LEN_HLEN = -1;RSAKey.SALT_LEN_MAX = -2;RSAKey.SALT_LEN_RECOVER = -2;
function X509(q) {
  var j = ASN1HEX,
      n = j.getChildIdx,
      g = j.getV,
      b = j.getTLV,
      c = j.getVbyList,
      k = j.getVbyListEx,
      a = j.getTLVbyList,
      l = j.getTLVbyListEx,
      h = j.getIdxbyList,
      e = j.getIdxbyListEx,
      i = j.getVidx,
      p = j.oidname,
      m = j.hextooidstr,
      d = X509,
      r = pemtohex,
      f;try {
    f = KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;
  } catch (o) {}this.HEX2STAG = { "0c": "utf8", "13": "prn", "16": "ia5", "1a": "vis", "1e": "bmp" };this.hex = null;this.version = 0;this.foffset = 0;this.aExtInfo = null;this.getVersion = function () {
    if (this.hex === null || this.version !== 0) {
      return this.version;
    }if (a(this.hex, 0, [0, 0]) !== "a003020102") {
      this.version = 1;this.foffset = -1;return 1;
    }this.version = 3;return 3;
  };this.getSerialNumberHex = function () {
    return k(this.hex, 0, [0, 0], "02");
  };this.getSignatureAlgorithmField = function () {
    var s = l(this.hex, 0, [0, 1]);return this.getAlgorithmIdentifierName(s);
  };this.getAlgorithmIdentifierName = function (s) {
    for (var t in f) {
      if (s === f[t]) {
        return t;
      }
    }return p(k(s, 0, [0], "06"));
  };this.getIssuer = function () {
    return this.getX500Name(this.getIssuerHex());
  };this.getIssuerHex = function () {
    return a(this.hex, 0, [0, 3 + this.foffset], "30");
  };this.getIssuerString = function () {
    return d.hex2dn(this.getIssuerHex());
  };this.getSubject = function () {
    return this.getX500Name(this.getSubjectHex());
  };this.getSubjectHex = function () {
    return a(this.hex, 0, [0, 5 + this.foffset], "30");
  };this.getSubjectString = function () {
    return d.hex2dn(this.getSubjectHex());
  };this.getNotBefore = function () {
    var t = c(this.hex, 0, [0, 4 + this.foffset, 0]);t = t.replace(/(..)/g, "%$1");t = decodeURIComponent(t);return t;
  };this.getNotAfter = function () {
    var t = c(this.hex, 0, [0, 4 + this.foffset, 1]);t = t.replace(/(..)/g, "%$1");t = decodeURIComponent(t);return t;
  };this.getPublicKeyHex = function () {
    return j.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getPublicKeyIdx = function () {
    return h(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getPublicKeyContentIdx = function () {
    var s = this.getPublicKeyIdx();return h(this.hex, s, [1, 0], "30");
  };this.getPublicKey = function () {
    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
  };this.getSignatureAlgorithmName = function () {
    var s = a(this.hex, 0, [1], "30");return this.getAlgorithmIdentifierName(s);
  };this.getSignatureValueHex = function () {
    return c(this.hex, 0, [2], "03", true);
  };this.verifySignature = function (u) {
    var v = this.getSignatureAlgorithmField();var s = this.getSignatureValueHex();var t = a(this.hex, 0, [0], "30");var w = new KJUR.crypto.Signature({ alg: v });w.init(u);w.updateHex(t);return w.verify(s);
  };this.parseExt = function (B) {
    var u, s, w;if (B === undefined) {
      w = this.hex;if (this.version !== 3) {
        return -1;
      }u = h(w, 0, [0, 7, 0], "30");s = n(w, u);
    } else {
      w = pemtohex(B);var x = h(w, 0, [0, 3, 0, 0], "06");if (g(w, x) != "2a864886f70d01090e") {
        this.aExtInfo = new Array();return;
      }u = h(w, 0, [0, 3, 0, 1, 0], "30");s = n(w, u);this.hex = w;
    }this.aExtInfo = new Array();for (var v = 0; v < s.length; v++) {
      var z = {};z.critical = false;var y = n(w, s[v]);var t = 0;if (y.length === 3) {
        z.critical = true;t = 1;
      }z.oid = j.hextooidstr(c(w, s[v], [0], "06"));var A = h(w, s[v], [1 + t]);z.vidx = i(w, A);this.aExtInfo.push(z);
    }
  };this.getExtInfo = function (u) {
    var s = this.aExtInfo;var v = u;if (!u.match(/^[0-9.]+$/)) {
      v = KJUR.asn1.x509.OID.name2oid(u);
    }if (v === "") {
      return undefined;
    }for (var t = 0; t < s.length; t++) {
      if (s[t].oid === v) {
        return s[t];
      }
    }return undefined;
  };this.getExtBasicConstraints = function (t, x) {
    if (t === undefined && x === undefined) {
      var v = this.getExtInfo("basicConstraints");if (v === undefined) {
        return undefined;
      }t = b(this.hex, v.vidx);x = v.critical;
    }var s = { extname: "basicConstraints" };if (x) {
      s.critical = true;
    }if (t === "3000") {
      return s;
    }if (t === "30030101ff") {
      s.cA = true;return s;
    }if (t.substr(0, 12) === "30060101ff02") {
      var w = g(t, 10);var u = parseInt(w, 16);s.cA = true;s.pathLen = u;return s;
    }throw new Error("hExtV parse error: " + t);
  };this.getExtKeyUsage = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("keyUsage");if (u === undefined) {
        return undefined;
      }t = b(this.hex, u.vidx);v = u.critical;
    }var s = { extname: "keyUsage" };if (v) {
      s.critical = true;
    }s.names = this.getExtKeyUsageString(t).split(",");return s;
  };this.getExtKeyUsageBin = function (u) {
    if (u === undefined) {
      var v = this.getExtInfo("keyUsage");if (v === undefined) {
        return "";
      }u = b(this.hex, v.vidx);
    }if (u.length != 8 && u.length != 10) {
      throw new Error("malformed key usage value: " + u);
    }var t = "000000000000000" + parseInt(u.substr(6), 16).toString(2);if (u.length == 8) {
      t = t.slice(-8);
    }if (u.length == 10) {
      t = t.slice(-16);
    }t = t.replace(/0+$/, "");if (t == "") {
      t = "0";
    }return t;
  };this.getExtKeyUsageString = function (u) {
    var v = this.getExtKeyUsageBin(u);var s = new Array();for (var t = 0; t < v.length; t++) {
      if (v.substr(t, 1) == "1") {
        s.push(X509.KEYUSAGE_NAME[t]);
      }
    }return s.join(",");
  };this.getExtSubjectKeyIdentifier = function (u, w) {
    if (u === undefined && w === undefined) {
      var v = this.getExtInfo("subjectKeyIdentifier");if (v === undefined) {
        return undefined;
      }u = b(this.hex, v.vidx);w = v.critical;
    }var s = { extname: "subjectKeyIdentifier" };if (w) {
      s.critical = true;
    }var t = g(u, 0);s.kid = { hex: t };return s;
  };this.getExtAuthorityKeyIdentifier = function (y, w) {
    if (y === undefined && w === undefined) {
      var s = this.getExtInfo("authorityKeyIdentifier");if (s === undefined) {
        return undefined;
      }y = b(this.hex, s.vidx);w = s.critical;
    }var z = { extname: "authorityKeyIdentifier" };if (w) {
      z.critical = true;
    }var x = n(y, 0);for (var t = 0; t < x.length; t++) {
      var A = y.substr(x[t], 2);if (A === "80") {
        z.kid = { hex: g(y, x[t]) };
      }if (A === "a1") {
        var v = b(y, x[t]);var u = this.getGeneralNames(v);z.issuer = u[0]["dn"];
      }if (A === "82") {
        z.sn = { hex: g(y, x[t]) };
      }
    }return z;
  };this.getExtExtKeyUsage = function (v, x) {
    if (v === undefined && x === undefined) {
      var w = this.getExtInfo("extKeyUsage");if (w === undefined) {
        return undefined;
      }v = b(this.hex, w.vidx);x = w.critical;
    }var s = { extname: "extKeyUsage", array: [] };if (x) {
      s.critical = true;
    }var t = n(v, 0);for (var u = 0; u < t.length; u++) {
      s.array.push(p(g(v, t[u])));
    }return s;
  };this.getExtExtKeyUsageName = function () {
    var w = this.getExtInfo("extKeyUsage");if (w === undefined) {
      return w;
    }var s = new Array();var v = b(this.hex, w.vidx);if (v === "") {
      return s;
    }var t = n(v, 0);for (var u = 0; u < t.length; u++) {
      s.push(p(g(v, t[u])));
    }return s;
  };this.getExtSubjectAltName = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("subjectAltName");if (u === undefined) {
        return undefined;
      }t = b(this.hex, u.vidx);v = u.critical;
    }var s = { extname: "subjectAltName", array: [] };if (v) {
      s.critical = true;
    }s.array = this.getGeneralNames(t);return s;
  };this.getExtIssuerAltName = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("issuerAltName");if (u === undefined) {
        return undefined;
      }t = b(this.hex, u.vidx);v = u.critical;
    }var s = { extname: "issuerAltName", array: [] };if (v) {
      s.critical = true;
    }s.array = this.getGeneralNames(t);return s;
  };this.getGeneralNames = function (w) {
    var u = n(w, 0);var s = [];for (var v = 0; v < u.length; v++) {
      var t = this.getGeneralName(b(w, u[v]));if (t !== undefined) {
        s.push(t);
      }
    }return s;
  };this.getGeneralName = function (t) {
    var s = t.substr(0, 2);var v = g(t, 0);var u = hextorstr(v);if (s == "81") {
      return { rfc822: u };
    }if (s == "82") {
      return { dns: u };
    }if (s == "86") {
      return { uri: u };
    }if (s == "87") {
      return { ip: hextoip(v) };
    }if (s == "a4") {
      return { dn: this.getX500Name(v) };
    }return undefined;
  };this.getExtSubjectAltName2 = function () {
    var w, z, y;var x = this.getExtInfo("subjectAltName");if (x === undefined) {
      return x;
    }var s = new Array();var v = b(this.hex, x.vidx);var t = n(v, 0);for (var u = 0; u < t.length; u++) {
      y = v.substr(t[u], 2);w = g(v, t[u]);if (y === "81") {
        z = hextoutf8(w);s.push(["MAIL", z]);
      }if (y === "82") {
        z = hextoutf8(w);s.push(["DNS", z]);
      }if (y === "84") {
        z = X509.hex2dn(w, 0);s.push(["DN", z]);
      }if (y === "86") {
        z = hextoutf8(w);s.push(["URI", z]);
      }if (y === "87") {
        z = hextoip(w);s.push(["IP", z]);
      }
    }return s;
  };this.getExtCRLDistributionPoints = function (w, y) {
    if (w === undefined && y === undefined) {
      var x = this.getExtInfo("cRLDistributionPoints");if (x === undefined) {
        return undefined;
      }w = b(this.hex, x.vidx);y = x.critical;
    }var t = { extname: "cRLDistributionPoints", array: [] };if (y) {
      t.critical = true;
    }var u = n(w, 0);for (var v = 0; v < u.length; v++) {
      var s = b(w, u[v]);t.array.push(this.getDistributionPoint(s));
    }return t;
  };this.getDistributionPoint = function (x) {
    var u = {};var v = n(x, 0);for (var w = 0; w < v.length; w++) {
      var t = x.substr(v[w], 2);var s = b(x, v[w]);if (t == "a0") {
        u.dpname = this.getDistributionPointName(s);
      }
    }return u;
  };this.getDistributionPointName = function (x) {
    var u = {};var v = n(x, 0);for (var w = 0; w < v.length; w++) {
      var t = x.substr(v[w], 2);var s = b(x, v[w]);if (t == "a0") {
        u.full = this.getGeneralNames(s);
      }
    }return u;
  };this.getExtCRLDistributionPointsURI = function () {
    var x = this.getExtInfo("cRLDistributionPoints");if (x === undefined) {
      return x;
    }var s = new Array();var t = n(this.hex, x.vidx);for (var v = 0; v < t.length; v++) {
      try {
        var y = c(this.hex, t[v], [0, 0, 0], "86");var w = hextoutf8(y);s.push(w);
      } catch (u) {}
    }return s;
  };this.getExtAIAInfo = function () {
    var w = this.getExtInfo("authorityInfoAccess");if (w === undefined) {
      return w;
    }var s = { ocsp: [], caissuer: [] };var t = n(this.hex, w.vidx);for (var u = 0; u < t.length; u++) {
      var x = c(this.hex, t[u], [0], "06");var v = c(this.hex, t[u], [1], "86");if (x === "2b06010505073001") {
        s.ocsp.push(hextoutf8(v));
      }if (x === "2b06010505073002") {
        s.caissuer.push(hextoutf8(v));
      }
    }return s;
  };this.getExtAuthorityInfoAccess = function (z, x) {
    if (z === undefined && x === undefined) {
      var s = this.getExtInfo("authorityInfoAccess");if (s === undefined) {
        return undefined;
      }z = b(this.hex, s.vidx);x = s.critical;
    }var A = { extname: "authorityInfoAccess", array: [] };if (x) {
      A.critical = true;
    }var y = n(z, 0);for (var t = 0; t < y.length; t++) {
      var w = k(z, y[t], [0], "06");var u = c(z, y[t], [1], "86");var v = hextoutf8(u);if (w == "2b06010505073001") {
        A.array.push({ ocsp: v });
      } else {
        if (w == "2b06010505073002") {
          A.array.push({ caissuer: v });
        } else {
          throw new Error("unknown method: " + w);
        }
      }
    }return A;
  };this.getExtCertificatePolicies = function (w, z) {
    if (w === undefined && z === undefined) {
      var y = this.getExtInfo("certificatePolicies");if (y === undefined) {
        return undefined;
      }w = b(this.hex, y.vidx);z = y.critical;
    }var s = { extname: "certificatePolicies", array: [] };if (z) {
      s.critical = true;
    }var t = n(w, 0);for (var u = 0; u < t.length; u++) {
      var x = b(w, t[u]);var v = this.getPolicyInformation(x);s.array.push(v);
    }return s;
  };this.getPolicyInformation = function (w) {
    var s = {};var y = c(w, 0, [0], "06");s.policyoid = p(y);var z = e(w, 0, [1], "30");if (z != -1) {
      s.array = [];var t = n(w, z);for (var u = 0; u < t.length; u++) {
        var x = b(w, t[u]);var v = this.getPolicyQualifierInfo(x);s.array.push(v);
      }
    }return s;
  };this.getPolicyQualifierInfo = function (t) {
    var s = {};var u = c(t, 0, [0], "06");if (u === "2b06010505070201") {
      var w = k(t, 0, [1], "16");s.cps = hextorstr(w);
    } else {
      if (u === "2b06010505070202") {
        var v = a(t, 0, [1], "30");s.unotice = this.getUserNotice(v);
      }
    }return s;
  };this.getUserNotice = function (w) {
    var t = {};var u = n(w, 0);for (var v = 0; v < u.length; v++) {
      var s = b(w, u[v]);if (s.substr(0, 2) != "30") {
        t.exptext = this.getDisplayText(s);
      }
    }return t;
  };this.getDisplayText = function (t) {
    var u = { "0c": "utf8", "16": "ia5", "1a": "vis", "1e": "bmp" };var s = {};s.type = u[t.substr(0, 2)];s.str = hextorstr(g(t, 0));return s;
  };this.getExtCRLNumber = function (t, u) {
    var s = { extname: "cRLNumber" };if (u) {
      s.critical = true;
    }if (t.substr(0, 2) == "02") {
      s.num = { hex: g(t, 0) };return s;
    }throw new Error("hExtV parse error: " + t);
  };this.getExtCRLReason = function (t, u) {
    var s = { extname: "cRLReason" };if (u) {
      s.critical = true;
    }if (t.substr(0, 2) == "0a") {
      s.code = parseInt(g(t, 0), 16);return s;
    }throw new Error("hExtV parse error: " + t);
  };this.getExtOcspNonce = function (t, v) {
    var s = { extname: "ocspNonce" };if (v) {
      s.critical = true;
    }var u = g(t, 0);s.hex = u;return s;
  };this.getExtOcspNoCheck = function (t, u) {
    var s = { extname: "ocspNoCheck" };if (u) {
      s.critical = true;
    }return s;
  };this.getExtAdobeTimeStamp = function (v, y) {
    if (v === undefined && y === undefined) {
      var x = this.getExtInfo("adobeTimeStamp");if (x === undefined) {
        return undefined;
      }v = b(this.hex, x.vidx);y = x.critical;
    }var s = { extname: "adobeTimeStamp" };if (y) {
      s.critical = true;
    }var u = n(v, 0);if (u.length > 1) {
      var z = b(v, u[1]);var t = this.getGeneralName(z);if (t.uri != undefined) {
        s.uri = t.uri;
      }
    }if (u.length > 2) {
      var w = b(v, u[2]);if (w == "0101ff") {
        s.reqauth = true;
      }if (w == "010100") {
        s.reqauth = false;
      }
    }return s;
  };this.getX500NameRule = function (s) {
    var z = true;var D = true;var C = false;var t = "";var w = "";var F = null;var A = [];for (var v = 0; v < s.length; v++) {
      var x = s[v];for (var u = 0; u < x.length; u++) {
        A.push(x[u]);
      }
    }for (var v = 0; v < A.length; v++) {
      var E = A[v];var G = E.ds;var B = E.value;var y = E.type;t += ":" + G;if (G != "prn" && G != "utf8" && G != "ia5") {
        return "mixed";
      }if (G == "ia5") {
        if (y != "CN") {
          return "mixed";
        } else {
          if (!KJUR.lang.String.isMail(B)) {
            return "mixed";
          } else {
            continue;
          }
        }
      }if (y == "C") {
        if (G == "prn") {
          continue;
        } else {
          return "mixed";
        }
      }w += ":" + G;if (F == null) {
        F = G;
      } else {
        if (F !== G) {
          return "mixed";
        }
      }
    }if (F == null) {
      return "prn";
    } else {
      return F;
    }
  };this.getX500Name = function (v) {
    var t = this.getX500NameArray(v);var u = this.dnarraytostr(t);return { array: t, str: u };
  };this.getX500NameArray = function (v) {
    var s = [];var t = n(v, 0);for (var u = 0; u < t.length; u++) {
      s.push(this.getRDN(b(v, t[u])));
    }return s;
  };this.getRDN = function (v) {
    var s = [];var t = n(v, 0);for (var u = 0; u < t.length; u++) {
      s.push(this.getAttrTypeAndValue(b(v, t[u])));
    }return s;
  };this.getAttrTypeAndValue = function (u) {
    var s = { type: null, value: null, ds: null };var t = n(u, 0);var x = c(u, t[0], [], "06");var w = c(u, t[1], []);var v = KJUR.asn1.ASN1Util.oidHexToInt(x);s.type = KJUR.asn1.x509.OID.oid2atype(v);s.value = hextorstr(w);s.ds = this.HEX2STAG[u.substr(t[1], 2)];return s;
  };this.readCertPEM = function (s) {
    this.readCertHex(r(s));
  };this.readCertHex = function (s) {
    this.hex = s;this.getVersion();try {
      h(this.hex, 0, [0, 7], "a3");this.parseExt();
    } catch (t) {}
  };this.getParam = function () {
    var s = {};s.version = this.getVersion();s.serial = { hex: this.getSerialNumberHex() };s.sigalg = this.getSignatureAlgorithmField();s.issuer = this.getIssuer();s.notbefore = this.getNotBefore();s.notafter = this.getNotAfter();s.subject = this.getSubject();s.sbjpubkey = hextopem(this.getPublicKeyHex(), "PUBLIC KEY");if (this.aExtInfo.length > 0) {
      s.ext = this.getExtParamArray();
    }s.sighex = this.getSignatureValueHex();return s;
  };this.getExtParamArray = function (t) {
    if (t == undefined) {
      var v = e(this.hex, 0, [0, "[3]"]);if (v != -1) {
        t = l(this.hex, 0, [0, "[3]", 0], "30");
      }
    }var s = [];var u = n(t, 0);for (var w = 0; w < u.length; w++) {
      var y = b(t, u[w]);var x = this.getExtParam(y);if (x != null) {
        s.push(x);
      }
    }return s;
  };this.getExtParam = function (t) {
    var A = {};var v = n(t, 0);var w = v.length;if (w != 2 && w != 3) {
      throw new Error("wrong number elements in Extension: " + w + " " + t);
    }var u = m(c(t, 0, [0], "06"));var y = false;if (w == 3 && a(t, 0, [1]) == "0101ff") {
      y = true;
    }var z = a(t, 0, [w - 1, 0]);var x = undefined;if (u == "2.5.29.14") {
      x = this.getExtSubjectKeyIdentifier(z, y);
    } else {
      if (u == "2.5.29.15") {
        x = this.getExtKeyUsage(z, y);
      } else {
        if (u == "2.5.29.17") {
          x = this.getExtSubjectAltName(z, y);
        } else {
          if (u == "2.5.29.18") {
            x = this.getExtIssuerAltName(z, y);
          } else {
            if (u == "2.5.29.19") {
              x = this.getExtBasicConstraints(z, y);
            } else {
              if (u == "2.5.29.31") {
                x = this.getExtCRLDistributionPoints(z, y);
              } else {
                if (u == "2.5.29.32") {
                  x = this.getExtCertificatePolicies(z, y);
                } else {
                  if (u == "2.5.29.35") {
                    x = this.getExtAuthorityKeyIdentifier(z, y);
                  } else {
                    if (u == "2.5.29.37") {
                      x = this.getExtExtKeyUsage(z, y);
                    } else {
                      if (u == "1.3.6.1.5.5.7.1.1") {
                        x = this.getExtAuthorityInfoAccess(z, y);
                      } else {
                        if (u == "2.5.29.20") {
                          x = this.getExtCRLNumber(z, y);
                        } else {
                          if (u == "2.5.29.21") {
                            x = this.getExtCRLReason(z, y);
                          } else {
                            if (u == "1.3.6.1.5.5.7.48.1.2") {
                              x = this.getExtOcspNonce(z, y);
                            } else {
                              if (u == "1.3.6.1.5.5.7.48.1.5") {
                                x = this.getExtOcspNoCheck(z, y);
                              } else {
                                if (u == "1.2.840.113583.1.1.9.1") {
                                  x = this.getExtAdobeTimeStamp(z, y);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }if (x != undefined) {
      return x;
    }var s = { extname: u, extn: z };if (y) {
      s.critical = true;
    }return s;
  };this.findExt = function (t, u) {
    for (var s = 0; s < t.length; s++) {
      if (t[s].extname == u) {
        return t[s];
      }
    }return null;
  };this.updateExtCDPFullURI = function (w, s) {
    var v = this.findExt(w, "cRLDistributionPoints");if (v == null) {
      return;
    }if (v.array == undefined) {
      return;
    }var y = v.array;for (var u = 0; u < y.length; u++) {
      if (y[u].dpname == undefined) {
        continue;
      }if (y[u].dpname.full == undefined) {
        continue;
      }var z = y[u].dpname.full;for (var t = 0; t < z.length; t++) {
        var x = z[u];if (x.uri == undefined) {
          continue;
        }x.uri = s;
      }
    }
  };this.updateExtAIAOCSP = function (w, t) {
    var v = this.findExt(w, "authorityInfoAccess");if (v == null) {
      return;
    }if (v.array == undefined) {
      return;
    }var s = v.array;for (var u = 0; u < s.length; u++) {
      if (s[u].ocsp != undefined) {
        s[u].ocsp = t;
      }
    }
  };this.updateExtAIACAIssuer = function (w, t) {
    var v = this.findExt(w, "authorityInfoAccess");if (v == null) {
      return;
    }if (v.array == undefined) {
      return;
    }var s = v.array;for (var u = 0; u < s.length; u++) {
      if (s[u].caissuer != undefined) {
        s[u].caissuer = t;
      }
    }
  };this.dnarraytostr = function (u) {
    function s(v) {
      return v.map(function (w) {
        return t(w);
      }).join("+");
    }function t(v) {
      return v.type + "=" + v.value;
    }return "/" + u.map(function (v) {
      return s(v);
    }).join("/");
  };this.getInfo = function () {
    var u = function u(M) {
      var L = JSON.stringify(M.array).replace(/[\[\]\{\}\"]/g, "");return L;
    };var A = function A(R) {
      var P = "";var L = R.array;for (var O = 0; O < L.length; O++) {
        var Q = L[O];P += "    policy oid: " + Q.policyoid + "\n";if (Q.array === undefined) {
          continue;
        }for (var N = 0; N < Q.array.length; N++) {
          var M = Q.array[N];if (M.cps !== undefined) {
            P += "    cps: " + M.cps + "\n";
          }
        }
      }return P;
    };var D = function D(P) {
      var O = "";var L = P.array;for (var N = 0; N < L.length; N++) {
        var Q = L[N];try {
          if (Q.dpname.full[0].uri !== undefined) {
            O += "    " + Q.dpname.full[0].uri + "\n";
          }
        } catch (M) {}try {
          if (Q.dname.full[0].dn.hex !== undefined) {
            O += "    " + X509.hex2dn(Q.dpname.full[0].dn.hex) + "\n";
          }
        } catch (M) {}
      }return O;
    };var B = function B(P) {
      var O = "";var L = P.array;for (var M = 0; M < L.length; M++) {
        var N = L[M];if (N.caissuer !== undefined) {
          O += "    caissuer: " + N.caissuer + "\n";
        }if (N.ocsp !== undefined) {
          O += "    ocsp: " + N.ocsp + "\n";
        }
      }return O;
    };var v = X509;var F, E, K;F = "Basic Fields\n";F += "  serial number: " + this.getSerialNumberHex() + "\n";F += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";F += "  issuer: " + this.getIssuerString() + "\n";F += "  notBefore: " + this.getNotBefore() + "\n";F += "  notAfter: " + this.getNotAfter() + "\n";F += "  subject: " + this.getSubjectString() + "\n";F += "  subject public key info: \n";E = this.getPublicKey();F += "    key algorithm: " + E.type + "\n";if (E.type === "RSA") {
      F += "    n=" + hextoposhex(E.n.toString(16)).substr(0, 16) + "...\n";F += "    e=" + hextoposhex(E.e.toString(16)) + "\n";
    }K = this.aExtInfo;if (K !== undefined && K !== null) {
      F += "X509v3 Extensions:\n";for (var H = 0; H < K.length; H++) {
        var J = K[H];var t = KJUR.asn1.x509.OID.oid2name(J.oid);if (t === "") {
          t = J.oid;
        }var G = "";if (J.critical === true) {
          G = "CRITICAL";
        }F += "  " + t + " " + G + ":\n";if (t === "basicConstraints") {
          var w = this.getExtBasicConstraints();if (w.cA === undefined) {
            F += "    {}\n";
          } else {
            F += "    cA=true";if (w.pathLen !== undefined) {
              F += ", pathLen=" + w.pathLen;
            }F += "\n";
          }
        } else {
          if (t === "keyUsage") {
            F += "    " + this.getExtKeyUsageString() + "\n";
          } else {
            if (t === "subjectKeyIdentifier") {
              F += "    " + this.getExtSubjectKeyIdentifier().kid.hex + "\n";
            } else {
              if (t === "authorityKeyIdentifier") {
                var x = this.getExtAuthorityKeyIdentifier();if (x.kid !== undefined) {
                  F += "    kid=" + x.kid.hex + "\n";
                }
              } else {
                if (t === "extKeyUsage") {
                  var I = this.getExtExtKeyUsage().array;F += "    " + I.join(", ") + "\n";
                } else {
                  if (t === "subjectAltName") {
                    var y = u(this.getExtSubjectAltName());F += "    " + y + "\n";
                  } else {
                    if (t === "cRLDistributionPoints") {
                      var C = this.getExtCRLDistributionPoints();F += D(C);
                    } else {
                      if (t === "authorityInfoAccess") {
                        var z = this.getExtAuthorityInfoAccess();F += B(z);
                      } else {
                        if (t === "certificatePolicies") {
                          F += A(this.getExtCertificatePolicies());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }F += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";F += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";return F;
  };if (typeof q == "string") {
    if (q.indexOf("-----BEGIN") != -1) {
      this.readCertPEM(q);
    } else {
      if (KJUR.lang.String.isHex(q)) {
        this.readCertHex(q);
      }
    }
  }
}X509.hex2dn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }if (f.substr(b, 2) !== "30") {
    throw new Error("malformed DN");
  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2rdn(f, d[e]));
  }c = c.map(function (a) {
    return a.replace("/", "\\/");
  });return "/" + c.join("/");
};X509.hex2rdn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }if (f.substr(b, 2) !== "31") {
    throw new Error("malformed RDN");
  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2attrTypeValue(f, d[e]));
  }c = c.map(function (a) {
    return a.replace("+", "\\+");
  });return c.join("+");
};X509.hex2attrTypeValue = function (d, i) {
  var j = ASN1HEX;var h = j.getV;if (i === undefined) {
    i = 0;
  }if (d.substr(i, 2) !== "30") {
    throw new Error("malformed attribute type and value");
  }var g = j.getChildIdx(d, i);if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
    "malformed attribute type and value";
  }var b = h(d, g[0]);var f = KJUR.asn1.ASN1Util.oidHexToInt(b);var e = KJUR.asn1.x509.OID.oid2atype(f);var a = h(d, g[1]);var c = hextorstr(a);return e + "=" + c;
};X509.getPublicKeyFromCertHex = function (b) {
  var a = new X509();a.readCertHex(b);return a.getPublicKey();
};X509.getPublicKeyFromCertPEM = function (b) {
  var a = new X509();a.readCertPEM(b);return a.getPublicKey();
};X509.getPublicKeyInfoPropOfCertPEM = function (c) {
  var e = ASN1HEX;var g = e.getVbyList;var b = {};var a, f, d;b.algparam = null;a = new X509();a.readCertPEM(c);f = a.getPublicKeyHex();b.keyhex = g(f, 0, [1], "03").substr(2);b.algoid = g(f, 0, [0, 0], "06");if (b.algoid === "2a8648ce3d0201") {
    b.algparam = g(f, 0, [0, 1], "06");
  }return b;
};X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
  KJUR.jws = {};
}KJUR.jws.JWS = function () {
  var b = KJUR,
      a = b.jws.JWS,
      c = a.isSafeJSONString;this.parseJWS = function (g, j) {
    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
      return;
    }var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (i == null) {
      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
    }var k = i[1];var e = i[2];var l = i[3];var n = k + "." + e;this.parsedJWS = {};this.parsedJWS.headB64U = k;this.parsedJWS.payloadB64U = e;this.parsedJWS.sigvalB64U = l;this.parsedJWS.si = n;if (!j) {
      var h = b64utohex(l);var f = parseBigInt(h, 16);this.parsedJWS.sigvalH = h;this.parsedJWS.sigvalBI = f;
    }var d = b64utoutf8(k);var m = b64utoutf8(e);this.parsedJWS.headS = d;this.parsedJWS.payloadS = m;if (!c(d, this.parsedJWS, "headP")) {
      throw "malformed JSON string for JWS Head: " + d;
    }
  };
};KJUR.jws.JWS.sign = function (j, w, z, A, a) {
  var x = KJUR,
      n = x.jws,
      r = n.JWS,
      h = r.readSafeJSONString,
      q = r.isSafeJSONString,
      d = x.crypto,
      l = d.ECDSA,
      p = d.Mac,
      c = d.Signature,
      u = JSON;var t, k, o;if (typeof w != "string" && (typeof w === "undefined" ? "undefined" : _typeof(w)) != "object") {
    throw "spHeader must be JSON string or object: " + w;
  }if ((typeof w === "undefined" ? "undefined" : _typeof(w)) == "object") {
    k = w;t = u.stringify(k);
  }if (typeof w == "string") {
    t = w;if (!q(t)) {
      throw "JWS Head is not safe JSON string: " + t;
    }k = h(t);
  }o = z;if ((typeof z === "undefined" ? "undefined" : _typeof(z)) == "object") {
    o = u.stringify(z);
  }if ((j == "" || j == null) && k.alg !== undefined) {
    j = k.alg;
  }if (j != "" && j != null && k.alg === undefined) {
    k.alg = j;t = u.stringify(k);
  }if (j !== k.alg) {
    throw "alg and sHeader.alg doesn't match: " + j + "!=" + k.alg;
  }var s = null;if (r.jwsalg2sigalg[j] === undefined) {
    throw "unsupported alg name: " + j;
  } else {
    s = r.jwsalg2sigalg[j];
  }var e = utf8tob64u(t);var m = utf8tob64u(o);var b = e + "." + m;var y = "";if (s.substr(0, 4) == "Hmac") {
    if (A === undefined) {
      throw "mac key shall be specified for HS* alg";
    }var i = new p({ alg: s, prov: "cryptojs", pass: A });i.updateString(b);y = i.doFinal();
  } else {
    if (s.indexOf("withECDSA") != -1) {
      var f = new c({ alg: s });f.init(A, a);f.updateString(b);var g = f.sign();y = KJUR.crypto.ECDSA.asn1SigToConcatSig(g);
    } else {
      if (s != "none") {
        var f = new c({ alg: s });f.init(A, a);f.updateString(b);y = f.sign();
      }
    }
  }var v = hextob64u(y);return b + "." + v;
};KJUR.jws.JWS.verify = function (w, B, n) {
  var x = KJUR,
      q = x.jws,
      t = q.JWS,
      i = t.readSafeJSONString,
      e = x.crypto,
      p = e.ECDSA,
      s = e.Mac,
      d = e.Signature,
      m;if ((typeof RSAKey === "undefined" ? "undefined" : _typeof(RSAKey)) !== undefined) {
    m = RSAKey;
  }var y = w.split(".");if (y.length !== 3) {
    return false;
  }var f = y[0];var r = y[1];var c = f + "." + r;var A = b64utohex(y[2]);var l = i(b64utoutf8(y[0]));var k = null;var z = null;if (l.alg === undefined) {
    throw "algorithm not specified in header";
  } else {
    k = l.alg;z = k.substr(0, 2);
  }if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
    var b = ":" + n.join(":") + ":";if (b.indexOf(":" + k + ":") == -1) {
      throw "algorithm '" + k + "' not accepted in the list";
    }
  }if (k != "none" && B === null) {
    throw "key shall be specified to verify.";
  }if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
    B = KEYUTIL.getKey(B);
  }if (z == "RS" || z == "PS") {
    if (!(B instanceof m)) {
      throw "key shall be a RSAKey obj for RS* and PS* algs";
    }
  }if (z == "ES") {
    if (!(B instanceof p)) {
      throw "key shall be a ECDSA obj for ES* algs";
    }
  }if (k == "none") {}var u = null;if (t.jwsalg2sigalg[l.alg] === undefined) {
    throw "unsupported alg name: " + k;
  } else {
    u = t.jwsalg2sigalg[k];
  }if (u == "none") {
    throw "not supported";
  } else {
    if (u.substr(0, 4) == "Hmac") {
      var o = null;if (B === undefined) {
        throw "hexadecimal key shall be specified for HMAC";
      }var j = new s({ alg: u, pass: B });j.updateString(c);o = j.doFinal();return A == o;
    } else {
      if (u.indexOf("withECDSA") != -1) {
        var h = null;try {
          h = p.concatSigToASN1Sig(A);
        } catch (v) {
          return false;
        }var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(h);
      } else {
        var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(A);
      }
    }
  }
};KJUR.jws.JWS.parse = function (g) {
  var c = g.split(".");var b = {};var f, e, d;if (c.length != 2 && c.length != 3) {
    throw "malformed sJWS: wrong number of '.' splitted elements";
  }f = c[0];e = c[1];if (c.length == 3) {
    d = c[2];
  }b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP = JSON.stringify(b.headerObj, null, "  ");if (b.payloadObj == null) {
    b.payloadPP = b64utoutf8(e);
  } else {
    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
  }if (d !== undefined) {
    b.sigHex = b64utohex(d);
  }return b;
};KJUR.jws.JWS.verifyJWT = function (e, l, r) {
  var d = KJUR,
      j = d.jws,
      o = j.JWS,
      n = o.readSafeJSONString,
      p = o.inArray,
      f = o.includedArray;var k = e.split(".");var c = k[0];var i = k[1];var q = c + "." + i;var m = b64utohex(k[2]);var h = n(b64utoutf8(c));var g = n(b64utoutf8(i));if (h.alg === undefined) {
    return false;
  }if (r.alg === undefined) {
    throw "acceptField.alg shall be specified";
  }if (!p(h.alg, r.alg)) {
    return false;
  }if (g.iss !== undefined && _typeof(r.iss) === "object") {
    if (!p(g.iss, r.iss)) {
      return false;
    }
  }if (g.sub !== undefined && _typeof(r.sub) === "object") {
    if (!p(g.sub, r.sub)) {
      return false;
    }
  }if (g.aud !== undefined && _typeof(r.aud) === "object") {
    if (typeof g.aud == "string") {
      if (!p(g.aud, r.aud)) {
        return false;
      }
    } else {
      if (_typeof(g.aud) == "object") {
        if (!f(g.aud, r.aud)) {
          return false;
        }
      }
    }
  }var b = j.IntDate.getNow();if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
    b = r.verifyAt;
  }if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
    r.gracePeriod = 0;
  }if (g.exp !== undefined && typeof g.exp == "number") {
    if (g.exp + r.gracePeriod < b) {
      return false;
    }
  }if (g.nbf !== undefined && typeof g.nbf == "number") {
    if (b < g.nbf - r.gracePeriod) {
      return false;
    }
  }if (g.iat !== undefined && typeof g.iat == "number") {
    if (b < g.iat - r.gracePeriod) {
      return false;
    }
  }if (g.jti !== undefined && r.jti !== undefined) {
    if (g.jti !== r.jti) {
      return false;
    }
  }if (!o.verify(e, l, r.alg)) {
    return false;
  }return true;
};KJUR.jws.JWS.includedArray = function (b, a) {
  var c = KJUR.jws.JWS.inArray;if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var d = 0; d < b.length; d++) {
    if (!c(b[d], a)) {
      return false;
    }
  }return true;
};KJUR.jws.JWS.inArray = function (d, b) {
  if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var c = 0; c < b.length; c++) {
    if (b[c] == d) {
      return true;
    }
  }return false;
};KJUR.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" };KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
  var e = null;try {
    e = jsonParse(c);if ((typeof e === "undefined" ? "undefined" : _typeof(e)) != "object") {
      return 0;
    }if (e.constructor === Array) {
      return 0;
    }if (b) {
      b[d] = e;
    }return 1;
  } catch (a) {
    return 0;
  }
};KJUR.jws.JWS.readSafeJSONString = function (b) {
  var c = null;try {
    c = jsonParse(b);if ((typeof c === "undefined" ? "undefined" : _typeof(c)) != "object") {
      return null;
    }if (c.constructor === Array) {
      return null;
    }return c;
  } catch (a) {
    return null;
  }
};KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (a == null) {
    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
  }return a[1];
};KJUR.jws.JWS.getJWKthumbprint = function (d) {
  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
    throw "unsupported algorithm for JWK Thumprint";
  }var a = "{";if (d.kty === "RSA") {
    if (typeof d.n != "string" || typeof d.e != "string") {
      throw "wrong n and e value for RSA key";
    }a += '"e":"' + d.e + '",';a += '"kty":"' + d.kty + '",';a += '"n":"' + d.n + '"}';
  } else {
    if (d.kty === "EC") {
      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
        throw "wrong crv, x and y value for EC key";
      }a += '"crv":"' + d.crv + '",';a += '"kty":"' + d.kty + '",';a += '"x":"' + d.x + '",';a += '"y":"' + d.y + '"}';
    } else {
      if (d.kty === "oct") {
        if (typeof d.k != "string") {
          throw "wrong k value for oct(symmetric) key";
        }a += '"kty":"' + d.kty + '",';a += '"k":"' + d.k + '"}';
      }
    }
  }var b = rstrtohex(a);var c = KJUR.crypto.Util.hashHex(b, "sha256");var e = hextob64u(c);return e;
};KJUR.jws.IntDate = {};KJUR.jws.IntDate.get = function (c) {
  var b = KJUR.jws.IntDate,
      d = b.getNow,
      a = b.getZulu;if (c == "now") {
    return d();
  } else {
    if (c == "now + 1hour") {
      return d() + 60 * 60;
    } else {
      if (c == "now + 1day") {
        return d() + 60 * 60 * 24;
      } else {
        if (c == "now + 1month") {
          return d() + 60 * 60 * 24 * 30;
        } else {
          if (c == "now + 1year") {
            return d() + 60 * 60 * 24 * 365;
          } else {
            if (c.match(/Z$/)) {
              return a(c);
            } else {
              if (c.match(/^[0-9]+$/)) {
                return parseInt(c);
              }
            }
          }
        }
      }
    }
  }throw "unsupported format: " + c;
};KJUR.jws.IntDate.getZulu = function (a) {
  return zulutosec(a);
};KJUR.jws.IntDate.getNow = function () {
  var a = ~~(new Date() / 1000);return a;
};KJUR.jws.IntDate.intDate2UTCString = function (a) {
  var b = new Date(a * 1000);return b.toUTCString();
};KJUR.jws.IntDate.intDate2Zulu = function (e) {
  var i = new Date(e * 1000),
      h = ("0000" + i.getUTCFullYear()).slice(-4),
      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
      b = ("00" + i.getUTCDate()).slice(-2),
      a = ("00" + i.getUTCHours()).slice(-2),
      c = ("00" + i.getUTCMinutes()).slice(-2),
      f = ("00" + i.getUTCSeconds()).slice(-2);return h + g + b + a + c + f + "Z";
};
exports.SecureRandom = SecureRandom;
exports.rng_seed_time = rng_seed_time;
exports.BigInteger = BigInteger;
exports.RSAKey = RSAKey;
var EDSA = KJUR.crypto.EDSA;
exports.EDSA = EDSA;
var DSA = KJUR.crypto.DSA;
exports.DSA = DSA;
var Signature = KJUR.crypto.Signature;
exports.Signature = Signature;
var MessageDigest = KJUR.crypto.MessageDigest;
exports.MessageDigest = MessageDigest;
var Mac = KJUR.crypto.Mac;
exports.Mac = Mac;
var Cipher = KJUR.crypto.Cipher;
exports.Cipher = Cipher;
exports.KEYUTIL = KEYUTIL;
exports.ASN1HEX = ASN1HEX;
exports.X509 = X509;
exports.CryptoJS = CryptoJS;

// ext/base64.js

exports.b64tohex = b64tohex;
exports.b64toBA = b64toBA;

// base64x.js

exports.stoBA = stoBA;
exports.BAtos = BAtos;
exports.BAtohex = BAtohex;
exports.stohex = stohex;
exports.stob64 = stob64;
exports.stob64u = stob64u;
exports.b64utos = b64utos;
exports.b64tob64u = b64tob64u;
exports.b64utob64 = b64utob64;
exports.hex2b64 = hex2b64;
exports.hextob64u = hextob64u;
exports.b64utohex = b64utohex;
exports.utf8tob64u = utf8tob64u;
exports.b64utoutf8 = b64utoutf8;
exports.utf8tob64 = utf8tob64;
exports.b64toutf8 = b64toutf8;
exports.utf8tohex = utf8tohex;
exports.hextoutf8 = hextoutf8;
exports.hextorstr = hextorstr;
exports.rstrtohex = rstrtohex;
exports.hextob64 = hextob64;
exports.hextob64nl = hextob64nl;
exports.b64nltohex = b64nltohex;
exports.hextopem = hextopem;
exports.pemtohex = pemtohex;
exports.hextoArrayBuffer = hextoArrayBuffer;
exports.ArrayBuffertohex = ArrayBuffertohex;
exports.zulutomsec = zulutomsec;
exports.zulutosec = zulutosec;
exports.zulutodate = zulutodate;
exports.datetozulu = datetozulu;
exports.uricmptohex = uricmptohex;
exports.hextouricmp = hextouricmp;
exports.ipv6tohex = ipv6tohex;
exports.hextoipv6 = hextoipv6;
exports.hextoip = hextoip;
exports.iptohex = iptohex;
exports.encodeURIComponentAll = encodeURIComponentAll;
exports.newline_toUnix = newline_toUnix;
exports.newline_toDos = newline_toDos;
exports.hextoposhex = hextoposhex;
exports.intarystrtohex = intarystrtohex;
exports.strdiffidx = strdiffidx;

// name spaces

exports.KJUR = KJUR;

var _crypto = KJUR.crypto;
exports.crypto = _crypto;
var _KJUR = KJUR;
var asn1 = _KJUR.asn1;
exports.asn1 = asn1;
var _KJUR2 = KJUR;
var jws = _KJUR2.jws;
exports.jws = jws;
var _KJUR3 = KJUR;
var lang = _KJUR3.lang;
exports.lang = lang;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./lib/oidc-client.min.js":
/*!********************************!*\
  !*** ./lib/oidc-client.min.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function t(e, r) {
  if ("object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module))) module.exports = r();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (r),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var i, n; }
}(undefined, function () {
  return function (t) {
    var e = {};function r(n) {
      if (e[n]) return e[n].exports;var i = e[n] = { i: n, l: !1, exports: {} };return t[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
    }return r.m = t, r.c = e, r.d = function (t, e, n) {
      r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
    }, r.r = function (t) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 });
    }, r.t = function (t, e) {
      if (1 & e && (t = r(t)), 8 & e) return t;if (4 & e && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t && t.__esModule) return t;var n = Object.create(null);if (r.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var i in t) {
        r.d(n, i, function (e) {
          return t[e];
        }.bind(null, i));
      }return n;
    }, r.n = function (t) {
      var e = t && t.__esModule ? function e() {
        return t.default;
      } : function e() {
        return t;
      };return r.d(e, "a", e), e;
    }, r.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, r.p = "", r(r.s = 10);
  }([function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }();var i = { debug: function t() {}, info: function t() {}, warn: function t() {}, error: function t() {} },
        o = void 0,
        s = void 0;(e.Log = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.reset = function t() {
        s = 3, o = i;
      }, t.debug = function t() {
        if (s >= 4) {
          for (var e = arguments.length, r = Array(e), n = 0; n < e; n++) {
            r[n] = arguments[n];
          }o.debug.apply(o, Array.from(r));
        }
      }, t.info = function t() {
        if (s >= 3) {
          for (var e = arguments.length, r = Array(e), n = 0; n < e; n++) {
            r[n] = arguments[n];
          }o.info.apply(o, Array.from(r));
        }
      }, t.warn = function t() {
        if (s >= 2) {
          for (var e = arguments.length, r = Array(e), n = 0; n < e; n++) {
            r[n] = arguments[n];
          }o.warn.apply(o, Array.from(r));
        }
      }, t.error = function t() {
        if (s >= 1) {
          for (var e = arguments.length, r = Array(e), n = 0; n < e; n++) {
            r[n] = arguments[n];
          }o.error.apply(o, Array.from(r));
        }
      }, n(t, null, [{ key: "NONE", get: function t() {
          return 0;
        } }, { key: "ERROR", get: function t() {
          return 1;
        } }, { key: "WARN", get: function t() {
          return 2;
        } }, { key: "INFO", get: function t() {
          return 3;
        } }, { key: "DEBUG", get: function t() {
          return 4;
        } }, { key: "level", get: function t() {
          return s;
        }, set: function t(e) {
          if (!(0 <= e && e <= 4)) throw new Error("Invalid log level");s = e;
        } }, { key: "logger", get: function t() {
          return o;
        }, set: function t(e) {
          if (!e.debug && e.info && (e.debug = e.info), !(e.debug && e.info && e.warn && e.error)) throw new Error("Invalid logger");o = e;
        } }]), t;
    }()).reset();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }();var i = { setInterval: function (t) {
        function e(e, r) {
          return t.apply(this, arguments);
        }return e.toString = function () {
          return t.toString();
        }, e;
      }(function (t, e) {
        return setInterval(t, e);
      }), clearInterval: function (t) {
        function e(e) {
          return t.apply(this, arguments);
        }return e.toString = function () {
          return t.toString();
        }, e;
      }(function (t) {
        return clearInterval(t);
      }) },
        o = !1,
        s = null;e.Global = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t._testing = function t() {
        o = !0;
      }, t.setXMLHttpRequest = function t(e) {
        s = e;
      }, n(t, null, [{ key: "location", get: function t() {
          if (!o) return location;
        } }, { key: "localStorage", get: function t() {
          if (!o && "undefined" != typeof window) return localStorage;
        } }, { key: "sessionStorage", get: function t() {
          if (!o && "undefined" != typeof window) return sessionStorage;
        } }, { key: "XMLHttpRequest", get: function t() {
          if (!o && "undefined" != typeof window) return s || XMLHttpRequest;
        } }, { key: "timer", get: function t() {
          if (!o) return i;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.MetadataService = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(4);function s(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }var a = ".well-known/openid-configuration";e.MetadataService = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.JsonService;if (s(this, t), !e) throw i.Log.error("MetadataService: No settings passed to MetadataService"), new Error("settings");this._settings = e, this._jsonService = new r(["application/jwk-set+json"]);
      }return t.prototype.resetSigningKeys = function t() {
        this._settings = this._settings || {}, this._settings.signingKeys = void 0;
      }, t.prototype.getMetadata = function t() {
        var e = this;return this._settings.metadata ? (i.Log.debug("MetadataService.getMetadata: Returning metadata from settings"), Promise.resolve(this._settings.metadata)) : this.metadataUrl ? (i.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl), this._jsonService.getJson(this.metadataUrl).then(function (t) {
          i.Log.debug("MetadataService.getMetadata: json received");var r = e._settings.metadataSeed || {};return e._settings.metadata = Object.assign({}, r, t), e._settings.metadata;
        })) : (i.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings"), Promise.reject(new Error("No authority or metadataUrl configured on settings")));
      }, t.prototype.getIssuer = function t() {
        return this._getMetadataProperty("issuer");
      }, t.prototype.getAuthorizationEndpoint = function t() {
        return this._getMetadataProperty("authorization_endpoint");
      }, t.prototype.getUserInfoEndpoint = function t() {
        return this._getMetadataProperty("userinfo_endpoint");
      }, t.prototype.getTokenEndpoint = function t() {
        var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];return this._getMetadataProperty("token_endpoint", e);
      }, t.prototype.getCheckSessionIframe = function t() {
        return this._getMetadataProperty("check_session_iframe", !0);
      }, t.prototype.getEndSessionEndpoint = function t() {
        return this._getMetadataProperty("end_session_endpoint", !0);
      }, t.prototype.getRevocationEndpoint = function t() {
        return this._getMetadataProperty("revocation_endpoint", !0);
      }, t.prototype.getKeysEndpoint = function t() {
        return this._getMetadataProperty("jwks_uri", !0);
      }, t.prototype._getMetadataProperty = function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];return i.Log.debug("MetadataService.getMetadataProperty for: " + e), this.getMetadata().then(function (t) {
          if (i.Log.debug("MetadataService.getMetadataProperty: metadata recieved"), void 0 === t[e]) {
            if (!0 === r) return void i.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + e);throw i.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + e), new Error("Metadata does not contain property " + e);
          }return t[e];
        });
      }, t.prototype.getSigningKeys = function t() {
        var e = this;return this._settings.signingKeys ? (i.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings"), Promise.resolve(this._settings.signingKeys)) : this._getMetadataProperty("jwks_uri").then(function (t) {
          return i.Log.debug("MetadataService.getSigningKeys: jwks_uri received", t), e._jsonService.getJson(t).then(function (t) {
            if (i.Log.debug("MetadataService.getSigningKeys: key set received", t), !t.keys) throw i.Log.error("MetadataService.getSigningKeys: Missing keys on keyset"), new Error("Missing keys on keyset");return e._settings.signingKeys = t.keys, e._settings.signingKeys;
          });
        });
      }, n(t, [{ key: "metadataUrl", get: function t() {
          return this._metadataUrl || (this._settings.metadataUrl ? this._metadataUrl = this._settings.metadataUrl : (this._metadataUrl = this._settings.authority, this._metadataUrl && this._metadataUrl.indexOf(a) < 0 && ("/" !== this._metadataUrl[this._metadataUrl.length - 1] && (this._metadataUrl += "/"), this._metadataUrl += a))), this._metadataUrl;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.UrlUtility = void 0;var n = r(0),
        i = r(1);e.UrlUtility = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.addQueryParam = function t(e, r, n) {
        return e.indexOf("?") < 0 && (e += "?"), "?" !== e[e.length - 1] && (e += "&"), e += encodeURIComponent(r), e += "=", e += encodeURIComponent(n);
      }, t.parseUrlFragment = function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#",
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.Global;"string" != typeof e && (e = o.location.href);var s = e.lastIndexOf(r);s >= 0 && (e = e.substr(s + 1)), "?" === r && (s = e.indexOf("#")) >= 0 && (e = e.substr(0, s));for (var a, u = {}, c = /([^&=]+)=([^&]*)/g, h = 0; a = c.exec(e);) {
          if (u[decodeURIComponent(a[1])] = decodeURIComponent(a[2].replace(/\+/g, " ")), h++ > 50) return n.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", e), { error: "Response exceeded expected number of parameters" };
        }for (var l in u) {
          return u;
        }return {};
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.JsonService = void 0;var n = r(0),
        i = r(1);function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.JsonService = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.Global.XMLHttpRequest,
            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;o(this, t), e && Array.isArray(e) ? this._contentTypes = e.slice() : this._contentTypes = [], this._contentTypes.push("application/json"), n && this._contentTypes.push("application/jwt"), this._XMLHttpRequest = r, this._jwtHandler = n;
      }return t.prototype.getJson = function t(e, r) {
        var i = this;if (!e) throw n.Log.error("JsonService.getJson: No url passed"), new Error("url");return n.Log.debug("JsonService.getJson, url: ", e), new Promise(function (t, o) {
          var s = new i._XMLHttpRequest();s.open("GET", e);var a = i._contentTypes,
              u = i._jwtHandler;s.onload = function () {
            if (n.Log.debug("JsonService.getJson: HTTP response received, status", s.status), 200 === s.status) {
              var r = s.getResponseHeader("Content-Type");if (r) {
                var i = a.find(function (t) {
                  if (r.startsWith(t)) return !0;
                });if ("application/jwt" == i) return void u(s).then(t, o);if (i) try {
                  return void t(JSON.parse(s.responseText));
                } catch (t) {
                  return n.Log.error("JsonService.getJson: Error parsing JSON response", t.message), void o(t);
                }
              }o(Error("Invalid response Content-Type: " + r + ", from URL: " + e));
            } else o(Error(s.statusText + " (" + s.status + ")"));
          }, s.onerror = function () {
            n.Log.error("JsonService.getJson: network error"), o(Error("Network Error"));
          }, r && (n.Log.debug("JsonService.getJson: token passed, setting Authorization header"), s.setRequestHeader("Authorization", "Bearer " + r)), s.send();
        });
      }, t.prototype.postForm = function t(e, r, i, o) {
        var s = this;if (!e) throw n.Log.error("JsonService.postForm: No url passed"), new Error("url");return n.Log.debug("JsonService.postForm, url: ", e), new Promise(function (t, a) {
          var u = new s._XMLHttpRequest();u.open("POST", e);var c = s._contentTypes;u.onload = function () {
            if (n.Log.debug("JsonService.postForm: HTTP response received, status", u.status), 200 !== u.status) {
              if (400 === u.status) if (i = u.getResponseHeader("Content-Type")) if (c.find(function (t) {
                if (i.startsWith(t)) return !0;
              })) try {
                var r = JSON.parse(u.responseText);if (r && r.error) return n.Log.error("JsonService.postForm: Error from server: ", r.error), void a(new Error(r.error));
              } catch (t) {
                return n.Log.error("JsonService.postForm: Error parsing JSON response", t.message), void a(t);
              }a(Error(u.statusText + " (" + u.status + ")"));
            } else {
              var i;if ((i = u.getResponseHeader("Content-Type")) && c.find(function (t) {
                if (i.startsWith(t)) return !0;
              })) try {
                return void t(JSON.parse(u.responseText));
              } catch (t) {
                return n.Log.error("JsonService.postForm: Error parsing JSON response", t.message), void a(t);
              }a(Error("Invalid response Content-Type: " + i + ", from URL: " + e));
            }
          }, u.onerror = function () {
            n.Log.error("JsonService.postForm: network error"), a(Error("Network Error"));
          };var h = "";for (var l in r) {
            var f = r[l];f && (h.length > 0 && (h += "&"), h += encodeURIComponent(l), h += "=", h += encodeURIComponent(f));
          }if (u.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), void 0 !== i && u.setRequestHeader("Authorization", "Basic " + btoa(i)), void 0 !== o) for (var g in o) {
            var d = o[g];u.setRequestHeader(g, d);
          }u.send(h);
        });
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.JoseUtil = void 0;var n = r(26),
        i = function o(t) {
      return t && t.__esModule ? t : { default: t };
    }(r(33));e.JoseUtil = (0, i.default)({ jws: n.jws, KeyUtil: n.KeyUtil, X509: n.X509, crypto: n.crypto, hextob64u: n.hextob64u, b64tohex: n.b64tohex, AllowedSigningAlgs: n.AllowedSigningAlgs });
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.OidcClientSettings = void 0;var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        i = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        o = r(0),
        s = r(23),
        a = r(7),
        u = r(24),
        c = r(2);function h(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }var l = ".well-known/openid-configuration",
        f = "id_token",
        g = "openid",
        d = "client_secret_post",
        p = "implicit";e.OidcClientSettings = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = e.authority,
            i = e.metadataUrl,
            o = e.metadata,
            l = e.signingKeys,
            v = e.metadataSeed,
            y = e.client_id,
            m = e.client_secret,
            _ = e.response_type,
            S = void 0 === _ ? f : _,
            b = e.scope,
            w = void 0 === b ? g : b,
            F = e.redirect_uri,
            E = e.post_logout_redirect_uri,
            x = e.client_authentication,
            k = void 0 === x ? d : x,
            A = e.grant_type,
            P = void 0 === A ? p : A,
            C = e.prompt,
            T = e.display,
            R = e.max_age,
            I = e.ui_locales,
            D = e.acr_values,
            L = e.resource,
            N = e.response_mode,
            U = e.filterProtocolClaims,
            B = void 0 === U || U,
            O = e.loadUserInfo,
            j = void 0 === O || O,
            M = e.staleStateAge,
            H = void 0 === M ? 900 : M,
            V = e.clockSkew,
            K = void 0 === V ? 300 : V,
            q = e.clockService,
            J = void 0 === q ? new s.ClockService() : q,
            W = e.userInfoJwtIssuer,
            z = void 0 === W ? "OP" : W,
            Y = e.mergeClaims,
            G = void 0 !== Y && Y,
            X = e.stateStore,
            $ = void 0 === X ? new a.WebStorageStateStore() : X,
            Q = e.ResponseValidatorCtor,
            Z = void 0 === Q ? u.ResponseValidator : Q,
            tt = e.MetadataServiceCtor,
            et = void 0 === tt ? c.MetadataService : tt,
            rt = e.extraQueryParams,
            nt = void 0 === rt ? {} : rt,
            it = e.extraTokenParams,
            ot = void 0 === it ? {} : it;h(this, t), this._authority = r, this._metadataUrl = i, this._metadata = o, this._metadataSeed = v, this._signingKeys = l, this._client_id = y, this._client_secret = m, this._response_type = S, this._scope = w, this._redirect_uri = F, this._post_logout_redirect_uri = E, this._client_authentication = k, this._grant_type = P, this._grant_type = P, this._prompt = C, this._display = T, this._max_age = R, this._ui_locales = I, this._acr_values = D, this._resource = L, this._response_mode = N, this._filterProtocolClaims = !!B, this._loadUserInfo = !!j, this._staleStateAge = H, this._clockSkew = K, this._clockService = J, this._userInfoJwtIssuer = z, this._mergeClaims = !!G, this._stateStore = $, this._validator = new Z(this), this._metadataService = new et(this), this._extraQueryParams = "object" === (void 0 === nt ? "undefined" : n(nt)) ? nt : {}, this._extraTokenParams = "object" === (void 0 === ot ? "undefined" : n(ot)) ? ot : {};
      }return t.prototype.getEpochTime = function t() {
        return this._clockService.getEpochTime();
      }, i(t, [{ key: "client_id", get: function t() {
          return this._client_id;
        }, set: function t(e) {
          if (this._client_id) throw o.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned."), new Error("client_id has already been assigned.");this._client_id = e;
        } }, { key: "client_secret", get: function t() {
          return this._client_secret;
        } }, { key: "response_type", get: function t() {
          return this._response_type;
        } }, { key: "scope", get: function t() {
          return this._scope;
        } }, { key: "redirect_uri", get: function t() {
          return this._redirect_uri;
        } }, { key: "post_logout_redirect_uri", get: function t() {
          return this._post_logout_redirect_uri;
        } }, { key: "client_authentication", get: function t() {
          return this._client_authentication;
        } }, { key: "grant_type", get: function t() {
          return this._grant_type;
        } }, { key: "prompt", get: function t() {
          return this._prompt;
        } }, { key: "display", get: function t() {
          return this._display;
        } }, { key: "max_age", get: function t() {
          return this._max_age;
        } }, { key: "ui_locales", get: function t() {
          return this._ui_locales;
        } }, { key: "acr_values", get: function t() {
          return this._acr_values;
        } }, { key: "resource", get: function t() {
          return this._resource;
        } }, { key: "response_mode", get: function t() {
          return this._response_mode;
        } }, { key: "authority", get: function t() {
          return this._authority;
        }, set: function t(e) {
          if (this._authority) throw o.Log.error("OidcClientSettings.set_authority: authority has already been assigned."), new Error("authority has already been assigned.");this._authority = e;
        } }, { key: "metadataUrl", get: function t() {
          return this._metadataUrl || (this._metadataUrl = this.authority, this._metadataUrl && this._metadataUrl.indexOf(l) < 0 && ("/" !== this._metadataUrl[this._metadataUrl.length - 1] && (this._metadataUrl += "/"), this._metadataUrl += l)), this._metadataUrl;
        } }, { key: "metadata", get: function t() {
          return this._metadata;
        }, set: function t(e) {
          this._metadata = e;
        } }, { key: "metadataSeed", get: function t() {
          return this._metadataSeed;
        }, set: function t(e) {
          this._metadataSeed = e;
        } }, { key: "signingKeys", get: function t() {
          return this._signingKeys;
        }, set: function t(e) {
          this._signingKeys = e;
        } }, { key: "filterProtocolClaims", get: function t() {
          return this._filterProtocolClaims;
        } }, { key: "loadUserInfo", get: function t() {
          return this._loadUserInfo;
        } }, { key: "staleStateAge", get: function t() {
          return this._staleStateAge;
        } }, { key: "clockSkew", get: function t() {
          return this._clockSkew;
        } }, { key: "userInfoJwtIssuer", get: function t() {
          return this._userInfoJwtIssuer;
        } }, { key: "mergeClaims", get: function t() {
          return this._mergeClaims;
        } }, { key: "stateStore", get: function t() {
          return this._stateStore;
        } }, { key: "validator", get: function t() {
          return this._validator;
        } }, { key: "metadataService", get: function t() {
          return this._metadataService;
        } }, { key: "extraQueryParams", get: function t() {
          return this._extraQueryParams;
        }, set: function t(e) {
          "object" === (void 0 === e ? "undefined" : n(e)) ? this._extraQueryParams = e : this._extraQueryParams = {};
        } }, { key: "extraTokenParams", get: function t() {
          return this._extraTokenParams;
        }, set: function t(e) {
          "object" === (void 0 === e ? "undefined" : n(e)) ? this._extraTokenParams = e : this._extraTokenParams = {};
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.WebStorageStateStore = void 0;var n = r(0),
        i = r(1);function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.WebStorageStateStore = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = e.prefix,
            n = void 0 === r ? "oidc." : r,
            s = e.store,
            a = void 0 === s ? i.Global.localStorage : s;o(this, t), this._store = a, this._prefix = n;
      }return t.prototype.set = function t(e, r) {
        return n.Log.debug("WebStorageStateStore.set", e), e = this._prefix + e, this._store.setItem(e, r), Promise.resolve();
      }, t.prototype.get = function t(e) {
        n.Log.debug("WebStorageStateStore.get", e), e = this._prefix + e;var r = this._store.getItem(e);return Promise.resolve(r);
      }, t.prototype.remove = function t(e) {
        n.Log.debug("WebStorageStateStore.remove", e), e = this._prefix + e;var r = this._store.getItem(e);return this._store.removeItem(e), Promise.resolve(r);
      }, t.prototype.getAllKeys = function t() {
        n.Log.debug("WebStorageStateStore.getAllKeys");for (var e = [], r = 0; r < this._store.length; r++) {
          var i = this._store.key(r);0 === i.indexOf(this._prefix) && e.push(i.substr(this._prefix.length));
        }return Promise.resolve(e);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SigninRequest = void 0;var n = r(0),
        i = r(3),
        o = r(14);e.SigninRequest = function () {
      function t(e) {
        var r = e.url,
            s = e.client_id,
            a = e.redirect_uri,
            u = e.response_type,
            c = e.scope,
            h = e.authority,
            l = e.grant_type,
            f = e.data,
            g = e.prompt,
            d = e.display,
            p = e.max_age,
            v = e.ui_locales,
            y = e.id_token_hint,
            m = e.login_hint,
            _ = e.acr_values,
            S = e.resource,
            b = e.response_mode,
            w = e.request,
            F = e.request_uri,
            E = e.extraQueryParams,
            x = e.request_type,
            k = e.client_secret,
            A = e.extraTokenParams,
            P = e.skipUserInfo;if (function C(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), !r) throw n.Log.error("SigninRequest.ctor: No url passed"), new Error("url");if (!s) throw n.Log.error("SigninRequest.ctor: No client_id passed"), new Error("client_id");if (!a) throw n.Log.error("SigninRequest.ctor: No redirect_uri passed"), new Error("redirect_uri");if (!u && "client_credentials" !== l) throw n.Log.error("SigninRequest.ctor: No response_type passed"), new Error("response_type");if (!c) throw n.Log.error("SigninRequest.ctor: No scope passed"), new Error("scope");if (!h) throw n.Log.error("SigninRequest.ctor: No authority passed"), new Error("authority");var T = t.isOidc(u),
            R = t.isCode(u);b || (b = t.isCode(u) ? "query" : null), this.state = new o.SigninState({ nonce: T, data: f, client_id: s, authority: h, redirect_uri: a, code_verifier: R, request_type: x, response_mode: b, client_secret: k, scope: c, extraTokenParams: A, skipUserInfo: P }), r = i.UrlUtility.addQueryParam(r, "client_id", s), r = i.UrlUtility.addQueryParam(r, "redirect_uri", a), r = i.UrlUtility.addQueryParam(r, "grant_type", l), u && (r = i.UrlUtility.addQueryParam(r, "response_type", u)), r = i.UrlUtility.addQueryParam(r, "scope", c), r = i.UrlUtility.addQueryParam(r, "state", this.state.id), T && (r = i.UrlUtility.addQueryParam(r, "nonce", this.state.nonce)), R && (r = i.UrlUtility.addQueryParam(r, "code_challenge", this.state.code_challenge), r = i.UrlUtility.addQueryParam(r, "code_challenge_method", "S256"));var I = { prompt: g, display: d, max_age: p, ui_locales: v, id_token_hint: y, login_hint: m, acr_values: _, resource: S, request: w, request_uri: F, response_mode: b };for (var D in I) {
          I[D] && (r = i.UrlUtility.addQueryParam(r, D, I[D]));
        }for (var L in E) {
          r = i.UrlUtility.addQueryParam(r, L, E[L]);
        }this.url = r;
      }return t.isOidc = function t(e) {
        return !!e && !!e.split(/\s+/g).filter(function (t) {
          return "id_token" === t;
        })[0];
      }, t.isOAuth = function t(e) {
        return !!e && !!e.split(/\s+/g).filter(function (t) {
          return "token" === t;
        })[0];
      }, t.isCode = function t(e) {
        return !!e && !!e.split(/\s+/g).filter(function (t) {
          return "code" === t;
        })[0];
      }, t.isClientCredentials = function t(e) {
        return !!e && !!e.split(/\s+/g).filter(function (t) {
          return "client_credentials" === t;
        })[0];
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.State = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = function s(t) {
      return t && t.__esModule ? t : { default: t };
    }(r(15));function a(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.State = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = e.id,
            n = e.data,
            i = e.created,
            s = e.request_type;a(this, t), this._id = r || (0, o.default)(), this._data = n, this._created = "number" == typeof i && i > 0 ? i : parseInt(Date.now() / 1e3), this._request_type = s;
      }return t.prototype.toStorageString = function t() {
        return i.Log.debug("State.toStorageString"), JSON.stringify({ id: this.id, data: this.data, created: this.created, request_type: this.request_type });
      }, t.fromStorageString = function e(r) {
        return i.Log.debug("State.fromStorageString"), new t(JSON.parse(r));
      }, t.clearStaleState = function e(r, n) {
        var o = Date.now() / 1e3 - n;return r.getAllKeys().then(function (e) {
          i.Log.debug("State.clearStaleState: got keys", e);for (var n = [], s = function s(a) {
            var c = e[a];u = r.get(c).then(function (e) {
              var n = !1;if (e) try {
                var s = t.fromStorageString(e);i.Log.debug("State.clearStaleState: got item from key: ", c, s.created), s.created <= o && (n = !0);
              } catch (t) {
                i.Log.error("State.clearStaleState: Error parsing state for key", c, t.message), n = !0;
              } else i.Log.debug("State.clearStaleState: no item in storage for key: ", c), n = !0;if (n) return i.Log.debug("State.clearStaleState: removed item for key: ", c), r.remove(c);
            }), n.push(u);
          }, a = 0; a < e.length; a++) {
            var u;s(a);
          }return i.Log.debug("State.clearStaleState: waiting on promise count:", n.length), Promise.all(n);
        });
      }, n(t, [{ key: "id", get: function t() {
          return this._id;
        } }, { key: "data", get: function t() {
          return this._data;
        } }, { key: "created", get: function t() {
          return this._created;
        } }, { key: "request_type", get: function t() {
          return this._request_type;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var n = r(0),
        i = r(11),
        o = r(6),
        s = r(7),
        a = r(37),
        u = r(38),
        c = r(17),
        h = r(2),
        l = r(48),
        f = r(49),
        g = r(20),
        d = r(21),
        p = r(19),
        v = r(1),
        y = r(16),
        m = r(4),
        _ = r(50),
        S = r(51);e.default = { Version: S.Version, Log: n.Log, OidcClient: i.OidcClient, OidcClientSettings: o.OidcClientSettings, WebStorageStateStore: s.WebStorageStateStore, InMemoryWebStorage: a.InMemoryWebStorage, UserManager: u.UserManager, AccessTokenEvents: c.AccessTokenEvents, MetadataService: h.MetadataService, CordovaPopupNavigator: l.CordovaPopupNavigator, CordovaIFrameNavigator: f.CordovaIFrameNavigator, CheckSessionIFrame: g.CheckSessionIFrame, TokenRevocationClient: d.TokenRevocationClient, SessionMonitor: p.SessionMonitor, Global: v.Global, User: y.User, JsonService: m.JsonService, AuthService: _.AuthService, IdentityAuthService: _.IdentityAuthService }, t.exports = e.default;
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.OidcClient = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(6),
        s = r(13),
        a = r(8),
        u = r(34),
        c = r(35),
        h = r(36),
        l = r(14),
        f = r(9);function g(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.OidcClient = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};g(this, t), e instanceof o.OidcClientSettings ? this._settings = e : this._settings = new o.OidcClientSettings(e);
      }return t.prototype.createSigninRequest = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = r.response_type,
            o = r.scope,
            s = r.redirect_uri,
            u = r.grant_type,
            c = r.data,
            h = r.state,
            l = r.prompt,
            f = r.display,
            g = r.max_age,
            d = r.ui_locales,
            p = r.id_token_hint,
            v = r.login_hint,
            y = r.acr_values,
            m = r.resource,
            _ = r.request,
            S = r.request_uri,
            b = r.response_mode,
            w = r.extraQueryParams,
            F = r.extraTokenParams,
            E = r.request_type,
            x = r.skipUserInfo,
            k = arguments[1];i.Log.debug("OidcClient.createSigninRequest");var A = this._settings.client_id;u = u || this._settings.grant_type;var P = a.SigninRequest.isClientCredentials(u);n = P ? void 0 : n || this._settings.response_type, o = o || this._settings.scope, s = P ? s || this._settings.redirect_uri : void 0, l = P ? void 0 : l || this._settings.prompt, f = f || this._settings.display, g = g || this._settings.max_age, d = d || this._settings.ui_locales, y = y || this._settings.acr_values, m = m || this._settings.resource, b = b || this._settings.response_mode, w = w || this._settings.extraQueryParams, F = F || this._settings.extraTokenParams;var C = this._settings.authority;return a.SigninRequest.isCode(n) && "code" !== n ? Promise.reject(new Error("OpenID Connect hybrid flow is not supported")) : P ? this._metadataService.getTokenEndpoint().then(function (t) {
          i.Log.debug("OidcClient.createSigninRequest: Received token endpoint", t);var r = new a.SigninRequest({ url: t, client_id: A, redirect_uri: s, response_type: n, scope: o, data: c || h, authority: C, grant_type: u, prompt: l, display: f, max_age: g, ui_locales: d, id_token_hint: p, login_hint: v, acr_values: y, resource: m, request: _, request_uri: S, extraQueryParams: w, extraTokenParams: F, request_type: E, response_mode: b, client_secret: e._settings.client_secret, skipUserInfo: x }),
              P = r.state;return (k = k || e._stateStore).set(P.id, P.toStorageString()).then(function () {
            return r;
          });
        }) : this._metadataService.getAuthorizationEndpoint().then(function (t) {
          i.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", t);var r = new a.SigninRequest({ url: t, client_id: A, redirect_uri: s, response_type: n, scope: o, data: c || h, authority: C, grant_type: u, prompt: l, display: f, max_age: g, ui_locales: d, id_token_hint: p, login_hint: v, acr_values: y, resource: m, request: _, request_uri: S, extraQueryParams: w, extraTokenParams: F, request_type: E, response_mode: b, client_secret: e._settings.client_secret, skipUserInfo: x }),
              P = r.state;return (k = k || e._stateStore).set(P.id, P.toStorageString()).then(function () {
            return r;
          });
        });
      }, t.prototype.readSigninResponseState = function t(e, r) {
        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];i.Log.debug("OidcClient.readSigninResponseState");var o = "query" === this._settings.response_mode || !this._settings.response_mode && a.SigninRequest.isCode(this._settings.response_type),
            s = o ? "?" : "#",
            c = new u.SigninResponse(e, s);if (!c.state) return i.Log.error("OidcClient.readSigninResponseState: No state in response"), Promise.reject(new Error("No state in response"));r = r || this._stateStore;var h = n ? r.remove.bind(r) : r.get.bind(r);return h(c.state).then(function (t) {
          if (!t) throw i.Log.error("OidcClient.readSigninResponseState: No matching state found in storage"), new Error("No matching state found in storage");return { state: l.SigninState.fromStorageString(t), response: c };
        });
      }, t.prototype.processSigninResponse = function t(e, r, n) {
        var o = this;return i.Log.debug("OidcClient.processSigninResponse"), this.readSigninResponseState(e, r, !0).then(function (t) {
          var e = t.state,
              r = t.response;return i.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response"), o._validator.validateSigninResponse(e, r, n);
        });
      }, t.prototype.createSignoutRequest = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = r.id_token_hint,
            o = r.data,
            s = r.state,
            a = r.post_logout_redirect_uri,
            u = r.extraQueryParams,
            h = r.request_type,
            l = arguments[1];return i.Log.debug("OidcClient.createSignoutRequest"), a = a || this._settings.post_logout_redirect_uri, u = u || this._settings.extraQueryParams, this._metadataService.getEndSessionEndpoint().then(function (t) {
          if (!t) throw i.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned"), new Error("no end session endpoint");i.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", t);var r = new c.SignoutRequest({ url: t, id_token_hint: n, post_logout_redirect_uri: a, data: o || s, extraQueryParams: u, request_type: h }),
              f = r.state;return f && (i.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist"), (l = l || e._stateStore).set(f.id, f.toStorageString())), r;
        });
      }, t.prototype.readSignoutResponseState = function t(e, r) {
        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];i.Log.debug("OidcClient.readSignoutResponseState");var o = new h.SignoutResponse(e);if (!o.state) return i.Log.debug("OidcClient.readSignoutResponseState: No state in response"), o.error ? (i.Log.warn("OidcClient.readSignoutResponseState: Response was error: ", o.error), Promise.reject(new s.ErrorResponse(o))) : Promise.resolve({ state: void 0, response: o });var a = o.state;r = r || this._stateStore;var u = n ? r.remove.bind(r) : r.get.bind(r);return u(a).then(function (t) {
          if (!t) throw i.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage"), new Error("No matching state found in storage");return { state: f.State.fromStorageString(t), response: o };
        });
      }, t.prototype.processSignoutResponse = function t(e, r) {
        var n = this;return i.Log.debug("OidcClient.processSignoutResponse"), this.readSignoutResponseState(e, r, !0).then(function (t) {
          var e = t.state,
              r = t.response;return e ? (i.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response"), n._validator.validateSignoutResponse(e, r)) : (i.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response"), r);
        });
      }, t.prototype.clearStaleState = function t(e) {
        return i.Log.debug("OidcClient.clearStaleState"), e = e || this._stateStore, f.State.clearStaleState(e, this.settings.staleStateAge);
      }, n(t, [{ key: "_stateStore", get: function t() {
          return this.settings.stateStore;
        } }, { key: "_validator", get: function t() {
          return this.settings.validator;
        } }, { key: "_metadataService", get: function t() {
          return this.settings.metadataService;
        } }, { key: "settings", get: function t() {
          return this._settings;
        } }, { key: "metadataService", get: function t() {
          return this._metadataService;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.TokenClient = void 0;var n = r(4),
        i = r(2),
        o = r(0);function s(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.TokenClient = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.JsonService,
            a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService;if (s(this, t), !e) throw o.Log.error("TokenClient.ctor: No settings passed"), new Error("settings");this._settings = e, this._jsonService = new r(), this._metadataService = new a(this._settings);
      }return t.prototype.exchangeCode = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(r = Object.assign({}, r)).grant_type = r.grant_type || "authorization_code", r.client_id = r.client_id || this._settings.client_id, r.client_secret = r.client_secret || this._settings.client_secret, r.redirect_uri = r.redirect_uri || this._settings.redirect_uri;var n = void 0,
            i = r._client_authentication || this._settings._client_authentication;return delete r._client_authentication, r.code ? r.redirect_uri ? r.code_verifier ? r.client_id ? r.client_secret || "client_secret_basic" != i ? ("client_secret_basic" == i && (n = r.client_id + ":" + r.client_secret, delete r.client_id, delete r.client_secret), this._metadataService.getTokenEndpoint(!1).then(function (t) {
          return o.Log.debug("TokenClient.exchangeCode: Received token endpoint"), e._jsonService.postForm(t, r, n).then(function (t) {
            return o.Log.debug("TokenClient.exchangeCode: response received"), t;
          });
        })) : (o.Log.error("TokenClient.exchangeCode: No client_secret passed"), Promise.reject(new Error("A client_secret is required"))) : (o.Log.error("TokenClient.exchangeCode: No client_id passed"), Promise.reject(new Error("A client_id is required"))) : (o.Log.error("TokenClient.exchangeCode: No code_verifier passed"), Promise.reject(new Error("A code_verifier is required"))) : (o.Log.error("TokenClient.exchangeCode: No redirect_uri passed"), Promise.reject(new Error("A redirect_uri is required"))) : (o.Log.error("TokenClient.exchangeCode: No code passed"), Promise.reject(new Error("A code is required")));
      }, t.prototype.exchangeRefreshToken = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(r = Object.assign({}, r)).grant_type = r.grant_type || "refresh_token", r.client_id = r.client_id || this._settings.client_id, r.client_secret = r.client_secret || this._settings.client_secret;var n = void 0,
            i = r._client_authentication || this._settings._client_authentication;return delete r._client_authentication, r.refresh_token ? r.client_id ? ("client_secret_basic" == i && (n = r.client_id + ":" + r.client_secret, delete r.client_id, delete r.client_secret), this._metadataService.getTokenEndpoint(!1).then(function (t) {
          return o.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint"), e._jsonService.postForm(t, r, n).then(function (t) {
            return o.Log.debug("TokenClient.exchangeRefreshToken: response received"), t;
          });
        })) : (o.Log.error("TokenClient.exchangeRefreshToken: No client_id passed"), Promise.reject(new Error("A client_id is required"))) : (o.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed"), Promise.reject(new Error("A refresh_token is required")));
      }, t.prototype.exchangeClientCredentialsToken = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = arguments[1];if ((r = Object.assign({}, r)).grant_type = r.grant_type || "client_credentials", r.client_id = r.client_id || this._settings.client_id, r.client_secret = r.client_secret || this._settings.client_secret, r.scope = r.scope || this._settings.scope, !r.client_id) return o.Log.error("TokenClient.exchangeClientCredentialsToken: No client_id passed"), Promise.reject(new Error("A client_id is required"));var i = r.client_id + ":" + r.client_secret;return this._metadataService.getTokenEndpoint(!1).then(function (t) {
          return o.Log.debug("TokenClient.exchangeCredentialsToken: Received token endpoint"), e._jsonService.postForm(t, r, i, n).then(function (t) {
            return o.Log.debug("TokenClient.exchangeCredentialsToken: response received"), t;
          });
        });
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.ErrorResponse = void 0;var n = r(0);function i(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }function o(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
    }e.ErrorResponse = function (t) {
      function e() {
        var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            s = r.error,
            a = r.error_description,
            u = r.error_uri,
            c = r.state,
            h = r.session_state;if (i(this, e), !s) throw n.Log.error("No error passed to ErrorResponse"), new Error("error");var l = o(this, t.call(this, a || s));return l.name = "ErrorResponse", l.error = s, l.error_description = a, l.error_uri = u, l.state = c, l.session_state = h, l;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), e;
    }(Error);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SigninState = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(9),
        s = r(5),
        a = function u(t) {
      return t && t.__esModule ? t : { default: t };
    }(r(15));function c(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }function h(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
    }e.SigninState = function (t) {
      function e() {
        var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = r.nonce,
            i = r.authority,
            o = r.client_id,
            u = r.redirect_uri,
            l = r.code_verifier,
            f = r.response_mode,
            g = r.client_secret,
            d = r.scope,
            p = r.extraTokenParams,
            v = r.skipUserInfo;c(this, e);var y = h(this, t.call(this, arguments[0]));if (!0 === n ? y._nonce = (0, a.default)() : n && (y._nonce = n), !0 === l ? y._code_verifier = (0, a.default)() + (0, a.default)() + (0, a.default)() : l && (y._code_verifier = l), y.code_verifier) {
          var m = s.JoseUtil.hashString(y.code_verifier, "SHA256");y._code_challenge = s.JoseUtil.hexToBase64Url(m);
        }return y._redirect_uri = u, y._authority = i, y._client_id = o, y._response_mode = f, y._client_secret = g, y._scope = d, y._extraTokenParams = p, y._skipUserInfo = v, y;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), e.prototype.toStorageString = function t() {
        return i.Log.debug("SigninState.toStorageString"), JSON.stringify({ id: this.id, data: this.data, created: this.created, request_type: this.request_type, nonce: this.nonce, code_verifier: this.code_verifier, redirect_uri: this.redirect_uri, authority: this.authority, client_id: this.client_id, response_mode: this.response_mode, client_secret: this.client_secret, scope: this.scope, extraTokenParams: this.extraTokenParams, skipUserInfo: this.skipUserInfo });
      }, e.fromStorageString = function t(r) {
        return i.Log.debug("SigninState.fromStorageString"), new e(JSON.parse(r));
      }, n(e, [{ key: "nonce", get: function t() {
          return this._nonce;
        } }, { key: "authority", get: function t() {
          return this._authority;
        } }, { key: "client_id", get: function t() {
          return this._client_id;
        } }, { key: "redirect_uri", get: function t() {
          return this._redirect_uri;
        } }, { key: "code_verifier", get: function t() {
          return this._code_verifier;
        } }, { key: "code_challenge", get: function t() {
          return this._code_challenge;
        } }, { key: "response_mode", get: function t() {
          return this._response_mode;
        } }, { key: "client_secret", get: function t() {
          return this._client_secret;
        } }, { key: "scope", get: function t() {
          return this._scope;
        } }, { key: "extraTokenParams", get: function t() {
          return this._extraTokenParams;
        } }, { key: "skipUserInfo", get: function t() {
          return this._skipUserInfo;
        } }]), e;
    }(o.State);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = function n() {
      return ("undefined" != i && null !== i && void 0 !== i.getRandomValues ? o : s)().replace(/-/g, "");
    };var i = "undefined" != typeof window ? window.crypto || window.msCrypto : null;function o() {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (t) {
        return (t ^ i.getRandomValues(new Uint8Array(1))[0] & 15 >> t / 4).toString(16);
      });
    }function s() {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (t) {
        return (t ^ 16 * Math.random() >> t / 4).toString(16);
      });
    }t.exports = e.default;
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.User = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0);e.User = function () {
      function t(e) {
        var r = e.id_token,
            n = e.session_state,
            i = e.access_token,
            o = e.refresh_token,
            s = e.token_type,
            a = e.scope,
            u = e.profile,
            c = e.expires_at,
            h = e.state;!function l(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this.id_token = r, this.session_state = n, this.access_token = i, this.refresh_token = o, this.token_type = s, this.scope = a, this.profile = u, this.expires_at = c, this.state = h;
      }return t.prototype.toStorageString = function t() {
        return i.Log.debug("User.toStorageString"), JSON.stringify({ id_token: this.id_token, session_state: this.session_state, access_token: this.access_token, refresh_token: this.refresh_token, token_type: this.token_type, scope: this.scope, profile: this.profile, expires_at: this.expires_at });
      }, t.fromStorageString = function e(r) {
        return i.Log.debug("User.fromStorageString"), new t(JSON.parse(r));
      }, n(t, [{ key: "expires_in", get: function t() {
          if (this.expires_at) {
            var e = parseInt(Date.now() / 1e3);return this.expires_at - e;
          }
        }, set: function t(e) {
          var r = parseInt(e);if ("number" == typeof r && r > 0) {
            var n = parseInt(Date.now() / 1e3);this.expires_at = n + r;
          }
        } }, { key: "expired", get: function t() {
          var e = this.expires_in;if (void 0 !== e) return e <= 0;
        } }, { key: "scopes", get: function t() {
          return (this.scope || "").split(" ");
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.AccessTokenEvents = void 0;var n = r(0),
        i = r(46);function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.AccessTokenEvents = function () {
      function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = e.accessTokenExpiringNotificationTime,
            n = void 0 === r ? 60 : r,
            s = e.accessTokenExpiringTimer,
            a = void 0 === s ? new i.Timer("Access token expiring") : s,
            u = e.accessTokenExpiredTimer,
            c = void 0 === u ? new i.Timer("Access token expired") : u;o(this, t), this._accessTokenExpiringNotificationTime = n, this._accessTokenExpiring = a, this._accessTokenExpired = c;
      }return t.prototype.load = function t(e) {
        if (e.access_token && void 0 !== e.expires_in) {
          var r = e.expires_in;if (n.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", r), r > 0) {
            var i = r - this._accessTokenExpiringNotificationTime;i <= 0 && (i = 1), n.Log.debug("AccessTokenEvents.load: registering expiring timer in:", i), this._accessTokenExpiring.init(i);
          } else n.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration."), this._accessTokenExpiring.cancel();var o = r + 1;n.Log.debug("AccessTokenEvents.load: registering expired timer in:", o), this._accessTokenExpired.init(o);
        } else this._accessTokenExpiring.cancel(), this._accessTokenExpired.cancel();
      }, t.prototype.unload = function t() {
        n.Log.debug("AccessTokenEvents.unload: canceling existing access token timers"), this._accessTokenExpiring.cancel(), this._accessTokenExpired.cancel();
      }, t.prototype.addAccessTokenExpiring = function t(e) {
        this._accessTokenExpiring.addHandler(e);
      }, t.prototype.removeAccessTokenExpiring = function t(e) {
        this._accessTokenExpiring.removeHandler(e);
      }, t.prototype.addAccessTokenExpired = function t(e) {
        this._accessTokenExpired.addHandler(e);
      }, t.prototype.removeAccessTokenExpired = function t(e) {
        this._accessTokenExpired.removeHandler(e);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.Event = void 0;var n = r(0);e.Event = function () {
      function t(e) {
        !function r(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._name = e, this._callbacks = [];
      }return t.prototype.addHandler = function t(e) {
        this._callbacks.push(e);
      }, t.prototype.removeHandler = function t(e) {
        var r = this._callbacks.findIndex(function (t) {
          return t === e;
        });r >= 0 && this._callbacks.splice(r, 1);
      }, t.prototype.raise = function t() {
        n.Log.debug("Event: Raising event: " + this._name);for (var e = 0; e < this._callbacks.length; e++) {
          var r;(r = this._callbacks)[e].apply(r, arguments);
        }
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SessionMonitor = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(20),
        s = r(1);function a(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.SessionMonitor = function () {
      function t(e) {
        var r = this,
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.CheckSessionIFrame,
            u = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.Global.timer;if (a(this, t), !e) throw i.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor"), new Error("userManager");this._userManager = e, this._CheckSessionIFrameCtor = n, this._timer = u, this._userManager.events.addUserLoaded(this._start.bind(this)), this._userManager.events.addUserUnloaded(this._stop.bind(this)), Promise.resolve(this._userManager.getUser().then(function (t) {
          t ? r._start(t) : r._settings.monitorAnonymousSession && r._userManager.querySessionStatus().then(function (t) {
            var e = { session_state: t.session_state };t.sub && t.sid && (e.profile = { sub: t.sub, sid: t.sid }), r._start(e);
          }).catch(function (t) {
            i.Log.error("SessionMonitor ctor: error from querySessionStatus:", t.message);
          });
        }).catch(function (t) {
          i.Log.error("SessionMonitor ctor: error from getUser:", t.message);
        }));
      }return t.prototype._start = function t(e) {
        var r = this,
            n = e.session_state;n && (e.profile ? (this._sub = e.profile.sub, this._sid = e.profile.sid, i.Log.debug("SessionMonitor._start: session_state:", n, ", sub:", this._sub)) : (this._sub = void 0, this._sid = void 0, i.Log.debug("SessionMonitor._start: session_state:", n, ", anonymous user")), this._checkSessionIFrame ? this._checkSessionIFrame.start(n) : this._metadataService.getCheckSessionIframe().then(function (t) {
          if (t) {
            i.Log.debug("SessionMonitor._start: Initializing check session iframe");var e = r._client_id,
                o = r._checkSessionInterval,
                s = r._stopCheckSessionOnError;r._checkSessionIFrame = new r._CheckSessionIFrameCtor(r._callback.bind(r), e, t, o, s), r._checkSessionIFrame.load().then(function () {
              r._checkSessionIFrame.start(n);
            });
          } else i.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
        }).catch(function (t) {
          i.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", t.message);
        }));
      }, t.prototype._stop = function t() {
        var e = this;if (this._sub = void 0, this._sid = void 0, this._checkSessionIFrame && (i.Log.debug("SessionMonitor._stop"), this._checkSessionIFrame.stop()), this._settings.monitorAnonymousSession) var r = this._timer.setInterval(function () {
          e._timer.clearInterval(r), e._userManager.querySessionStatus().then(function (t) {
            var r = { session_state: t.session_state };t.sub && t.sid && (r.profile = { sub: t.sub, sid: t.sid }), e._start(r);
          }).catch(function (t) {
            i.Log.error("SessionMonitor: error from querySessionStatus:", t.message);
          });
        }, 1e3);
      }, t.prototype._callback = function t() {
        var e = this;this._userManager.querySessionStatus().then(function (t) {
          var r = !0;t ? t.sub === e._sub ? (r = !1, e._checkSessionIFrame.start(t.session_state), t.sid === e._sid ? i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", t.session_state) : (i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", t.session_state), e._userManager.events._raiseUserSessionChanged())) : i.Log.debug("SessionMonitor._callback: Different subject signed into OP:", t.sub) : i.Log.debug("SessionMonitor._callback: Subject no longer signed into OP"), r && (e._sub ? (i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event"), e._userManager.events._raiseUserSignedOut()) : (i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event"), e._userManager.events._raiseUserSignedIn()));
        }).catch(function (t) {
          e._sub && (i.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", t.message), e._userManager.events._raiseUserSignedOut());
        });
      }, n(t, [{ key: "_settings", get: function t() {
          return this._userManager.settings;
        } }, { key: "_metadataService", get: function t() {
          return this._userManager.metadataService;
        } }, { key: "_client_id", get: function t() {
          return this._settings.client_id;
        } }, { key: "_checkSessionInterval", get: function t() {
          return this._settings.checkSessionInterval;
        } }, { key: "_stopCheckSessionOnError", get: function t() {
          return this._settings.stopCheckSessionOnError;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.CheckSessionIFrame = void 0;var n = r(0);function i(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.CheckSessionIFrame = function () {
      function t(e, r, n, o) {
        var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];i(this, t), this._callback = e, this._client_id = r, this._url = n, this._interval = o || 2e3, this._stopOnError = s;var a = n.indexOf("/", n.indexOf("//") + 2);this._frame_origin = n.substr(0, a), this._frame = window.document.createElement("iframe"), this._frame.style.visibility = "hidden", this._frame.style.position = "absolute", this._frame.style.display = "none", this._frame.width = 0, this._frame.height = 0, this._frame.src = n;
      }return t.prototype.load = function t() {
        var e = this;return new Promise(function (t) {
          e._frame.onload = function () {
            t();
          }, window.document.body.appendChild(e._frame), e._boundMessageEvent = e._message.bind(e), window.addEventListener("message", e._boundMessageEvent, !1);
        });
      }, t.prototype._message = function t(e) {
        e.origin === this._frame_origin && e.source === this._frame.contentWindow && ("error" === e.data ? (n.Log.error("CheckSessionIFrame: error message from check session op iframe"), this._stopOnError && this.stop()) : "changed" === e.data ? (n.Log.debug("CheckSessionIFrame: changed message from check session op iframe"), this.stop(), this._callback()) : n.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe"));
      }, t.prototype.start = function t(e) {
        var r = this;if (this._session_state !== e) {
          n.Log.debug("CheckSessionIFrame.start"), this.stop(), this._session_state = e;var i = function t() {
            r._frame.contentWindow.postMessage(r._client_id + " " + r._session_state, r._frame_origin);
          };i(), this._timer = window.setInterval(i, this._interval);
        }
      }, t.prototype.stop = function t() {
        this._session_state = null, this._timer && (n.Log.debug("CheckSessionIFrame.stop"), window.clearInterval(this._timer), this._timer = null);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.TokenRevocationClient = void 0;var n = r(0),
        i = r(2),
        o = r(1);function s(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }var a = "access_token",
        u = "refresh_token";e.TokenRevocationClient = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.Global.XMLHttpRequest,
            a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService;if (s(this, t), !e) throw n.Log.error("TokenRevocationClient.ctor: No settings provided"), new Error("No settings provided.");this._settings = e, this._XMLHttpRequestCtor = r, this._metadataService = new a(this._settings);
      }return t.prototype.revoke = function t(e, r) {
        var i = this,
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "access_token";if (!e) throw n.Log.error("TokenRevocationClient.revoke: No token provided"), new Error("No token provided.");if (o !== a && o != u) throw n.Log.error("TokenRevocationClient.revoke: Invalid token type"), new Error("Invalid token type.");return this._metadataService.getRevocationEndpoint().then(function (t) {
          if (t) {
            n.Log.debug("TokenRevocationClient.revoke: Revoking " + o);var s = i._settings.client_id,
                a = i._settings.client_secret;return i._revoke(t, s, a, e, o);
          }if (r) throw n.Log.error("TokenRevocationClient.revoke: Revocation not supported"), new Error("Revocation not supported");
        });
      }, t.prototype._revoke = function t(e, r, i, o, s) {
        var a = this;return new Promise(function (t, u) {
          var c = new a._XMLHttpRequestCtor();c.open("POST", e), c.onload = function () {
            n.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", c.status), 200 === c.status ? t() : u(Error(c.statusText + " (" + c.status + ")"));
          }, c.onerror = function () {
            n.Log.debug("TokenRevocationClient.revoke: Network Error."), u("Network Error");
          };var h = "client_id=" + encodeURIComponent(r);i && (h += "&client_secret=" + encodeURIComponent(i)), h += "&token_type_hint=" + encodeURIComponent(s), h += "&token=" + encodeURIComponent(o), c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), c.send(h);
        });
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.CordovaPopupWindow = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0);e.CordovaPopupWindow = function () {
      function t(e) {
        var r = this;!function n(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._promise = new Promise(function (t, e) {
          r._resolve = t, r._reject = e;
        }), this.features = e.popupWindowFeatures || "location=no,toolbar=no,zoom=no", this.target = e.popupWindowTarget || "_blank", this.redirect_uri = e.startUrl, i.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
      }return t.prototype._isInAppBrowserInstalled = function t(e) {
        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (t) {
          return e.hasOwnProperty(t);
        });
      }, t.prototype.navigate = function t(e) {
        if (e && e.url) {
          if (!window.cordova) return this._error("cordova is undefined");var r = window.cordova.require("cordova/plugin_list").metadata;if (!1 === this._isInAppBrowserInstalled(r)) return this._error("InAppBrowser plugin not found");this._popup = cordova.InAppBrowser.open(e.url, this.target, this.features), this._popup ? (i.Log.debug("CordovaPopupWindow.navigate: popup successfully created"), this._exitCallbackEvent = this._exitCallback.bind(this), this._loadStartCallbackEvent = this._loadStartCallback.bind(this), this._popup.addEventListener("exit", this._exitCallbackEvent, !1), this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, !1)) : this._error("Error opening popup window");
        } else this._error("No url provided");return this.promise;
      }, t.prototype._loadStartCallback = function t(e) {
        0 === e.url.indexOf(this.redirect_uri) && this._success({ url: e.url });
      }, t.prototype._exitCallback = function t(e) {
        this._error(e);
      }, t.prototype._success = function t(e) {
        this._cleanup(), i.Log.debug("CordovaPopupWindow: Successful response from cordova popup window"), this._resolve(e);
      }, t.prototype._error = function t(e) {
        this._cleanup(), i.Log.error(e), this._reject(new Error(e));
      }, t.prototype.close = function t() {
        this._cleanup();
      }, t.prototype._cleanup = function t() {
        this._popup && (i.Log.debug("CordovaPopupWindow: cleaning up popup"), this._popup.removeEventListener("exit", this._exitCallbackEvent, !1), this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, !1), this._popup.close()), this._popup = null;
      }, n(t, [{ key: "promise", get: function t() {
          return this._promise;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });e.ClockService = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.getEpochTime = function t() {
        return Promise.resolve(Date.now() / 1e3 | 0);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.ResponseValidator = void 0;var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    },
        i = r(0),
        o = r(2),
        s = r(25),
        a = r(12),
        u = r(13),
        c = r(5);function h(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }var l = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];e.ResponseValidator = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.MetadataService,
            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.UserInfoService,
            u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : c.JoseUtil,
            l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : a.TokenClient;if (h(this, t), !e) throw i.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator"), new Error("settings");this._settings = e, this._metadataService = new r(this._settings), this._userInfoService = new n(this._settings), this._joseUtil = u, this._tokenClient = new l(this._settings);
      }return t.prototype.validateSigninResponse = function t(e, r, n) {
        var o = this;return i.Log.debug("ResponseValidator.validateSigninResponse"), this._processSigninParams(e, r).then(function (t) {
          return i.Log.debug("ResponseValidator.validateSigninResponse: state processed"), o._validateTokens(e, t, n).then(function (t) {
            return i.Log.debug("ResponseValidator.validateSigninResponse: tokens validated"), o._processClaims(e, t).then(function (t) {
              return i.Log.debug("ResponseValidator.validateSigninResponse: claims processed"), t;
            });
          });
        });
      }, t.prototype.validateSignoutResponse = function t(e, r) {
        return e.id !== r.state ? (i.Log.error("ResponseValidator.validateSignoutResponse: State does not match"), Promise.reject(new Error("State does not match"))) : (i.Log.debug("ResponseValidator.validateSignoutResponse: state validated"), r.state = e.data, r.error ? (i.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", r.error), Promise.reject(new u.ErrorResponse(r))) : Promise.resolve(r));
      }, t.prototype._processSigninParams = function t(e, r) {
        if (e.id !== r.state) return i.Log.error("ResponseValidator._processSigninParams: State does not match"), Promise.reject(new Error("State does not match"));if (!e.client_id) return i.Log.error("ResponseValidator._processSigninParams: No client_id on state"), Promise.reject(new Error("No client_id on state"));if (!e.authority) return i.Log.error("ResponseValidator._processSigninParams: No authority on state"), Promise.reject(new Error("No authority on state"));if (this._settings.authority) {
          if (this._settings.authority && this._settings.authority !== e.authority) return i.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state"), Promise.reject(new Error("authority mismatch on settings vs. signin state"));
        } else this._settings.authority = e.authority;if (this._settings.client_id) {
          if (this._settings.client_id && this._settings.client_id !== e.client_id) return i.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state"), Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
        } else this._settings.client_id = e.client_id;if (i.Log.debug("ResponseValidator._processSigninParams: state validated"), r.state = e.data, r.error) return i.Log.warn("ResponseValidator._processSigninParams: Response was error", r.error), Promise.reject(new u.ErrorResponse(r));if ("client_credentials" !== this._settings.grant_type && e.nonce && !r.id_token) return i.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response"), Promise.reject(new Error("No id_token in response"));if (!e.nonce && r.id_token) return i.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response"), Promise.reject(new Error("Unexpected id_token in response"));if ("client_credentials" === this._settings.grant_type) r.grant_type = this._settings.grant_type;else if (e.code_verifier && !r.code) return i.Log.error("ResponseValidator._processSigninParams: Expecting code in response"), Promise.reject(new Error("No code in response"));return !e.code_verifier && r.code ? (i.Log.error("ResponseValidator._processSigninParams: Not expecting code in response"), Promise.reject(new Error("Unexpected code in response"))) : (r.scope || (r.scope = e.scope), Promise.resolve(r));
      }, t.prototype._processClaims = function t(e, r) {
        var n = this;if (r.isOpenIdConnect) {
          if (i.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims"), r.profile = this._filterProtocolClaims(r.profile), !0 !== e.skipUserInfo && this._settings.loadUserInfo && r.access_token) return i.Log.debug("ResponseValidator._processClaims: loading user info"), this._userInfoService.getClaims(r.access_token).then(function (t) {
            return i.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint"), t.sub !== r.profile.sub ? (i.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token"), Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"))) : (r.profile = n._mergeClaims(r.profile, t), i.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", r.profile), r);
          });i.Log.debug("ResponseValidator._processClaims: not loading user info");
        } else i.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");return Promise.resolve(r);
      }, t.prototype._mergeClaims = function t(e, r) {
        var i = Object.assign({}, e);for (var o in r) {
          var s = r[o];Array.isArray(s) || (s = [s]);for (var a = 0; a < s.length; a++) {
            var u = s[a];i[o] ? Array.isArray(i[o]) ? i[o].indexOf(u) < 0 && i[o].push(u) : i[o] !== u && ("object" === (void 0 === u ? "undefined" : n(u)) && this._settings.mergeClaims ? i[o] = this._mergeClaims(i[o], u) : i[o] = [i[o], u]) : i[o] = u;
          }
        }return i;
      }, t.prototype._filterProtocolClaims = function t(e) {
        i.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", e);var r = Object.assign({}, e);return this._settings._filterProtocolClaims ? (l.forEach(function (t) {
          delete r[t];
        }), i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", r)) : i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered"), r;
      }, t.prototype._validateTokens = function t(e, r, n) {
        return r.code ? (i.Log.debug("ResponseValidator._validateTokens: Validating code"), this._processCode(e, r)) : "client_credentials" === r.grant_type ? (i.Log.debug("ResponseValidator._validateTokens: Validating client credentials"), this._processClientCredentials(e, r, n)) : r.id_token ? r.access_token ? (i.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token"), this._validateIdTokenAndAccessToken(e, r)) : (i.Log.debug("ResponseValidator._validateTokens: Validating id_token"), this._validateIdToken(e, r)) : (i.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate"), Promise.resolve(r));
      }, t.prototype._processCode = function t(e, r) {
        var o = this,
            s = { client_id: e.client_id, client_secret: e.client_secret, code: r.code, redirect_uri: e.redirect_uri, code_verifier: e.code_verifier };return e.extraTokenParams && "object" === n(e.extraTokenParams) && Object.assign(s, e.extraTokenParams), this._tokenClient.exchangeCode(s).then(function (t) {
          for (var n in t) {
            r[n] = t[n];
          }return r.id_token ? (i.Log.debug("ResponseValidator._processCode: token response successful, processing id_token"), o._validateIdTokenAttributes(e, r)) : (i.Log.debug("ResponseValidator._processCode: token response successful, returning response"), r);
        });
      }, t.prototype._processClientCredentials = function t(e, r, o) {
        var s = this,
            a = { client_id: e.client_id, client_secret: e.client_secret };return e.extraTokenParams && "object" === n(e.extraTokenParams) && Object.assign(a, e.extraTokenParams), this._tokenClient.exchangeClientCredentialsToken(a, o).then(function (t) {
          for (var n in t) {
            r[n] = t[n];
          }return r.id_token ? (i.Log.debug("ResponseValidator._processClientCredentials: token response successful, processing id_token"), s._validateIdTokenAttributes(e, r)) : (i.Log.debug("ResponseValidator._processClientCredentials: token response successful, returning response"), r);
        });
      }, t.prototype._validateIdTokenAttributes = function t(e, r) {
        var n = this;return this._metadataService.getIssuer().then(function (t) {
          var o = e.client_id,
              s = n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ", s), n._settings.getEpochTime().then(function (a) {
            return n._joseUtil.validateJwtAttributes(r.id_token, t, o, s, a).then(function (t) {
              return e.nonce && e.nonce !== t.nonce ? (i.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token"), Promise.reject(new Error("Invalid nonce in id_token"))) : t.sub ? (r.profile = t, r) : (i.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token"), Promise.reject(new Error("No sub present in id_token")));
            });
          });
        });
      }, t.prototype._validateIdTokenAndAccessToken = function t(e, r) {
        var n = this;return this._validateIdToken(e, r).then(function (t) {
          return n._validateAccessToken(t);
        });
      }, t.prototype._getSigningKeyForJwt = function t(e) {
        var r = this;return this._metadataService.getSigningKeys().then(function (t) {
          var n = e.header.kid;if (!t) return i.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata"), Promise.reject(new Error("No signing keys from metadata"));i.Log.debug("ResponseValidator._validateIdToken: Received signing keys");var o = void 0;if (n) o = t.filter(function (t) {
            return t.kid === n;
          })[0];else {
            if ((t = r._filterByAlg(t, e.header.alg)).length > 1) return i.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata"), Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));o = t[0];
          }return Promise.resolve(o);
        });
      }, t.prototype._getSigningKeyForJwtWithSingleRetry = function t(e) {
        var r = this;return this._getSigningKeyForJwt(e).then(function (t) {
          return t ? Promise.resolve(t) : (r._metadataService.resetSigningKeys(), r._getSigningKeyForJwt(e));
        });
      }, t.prototype._validateIdToken = function t(e, r) {
        var n = this;if (!e.nonce) return i.Log.error("ResponseValidator._validateIdToken: No nonce on state"), Promise.reject(new Error("No nonce on state"));var o = this._joseUtil.parseJwt(r.id_token);return o && o.header && o.payload ? e.nonce !== o.payload.nonce ? (i.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token"), Promise.reject(new Error("Invalid nonce in id_token"))) : this._metadataService.getIssuer().then(function (t) {
          return i.Log.debug("ResponseValidator._validateIdToken: Received issuer"), n._getSigningKeyForJwtWithSingleRetry(o).then(function (s) {
            if (!s) return i.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys"), Promise.reject(new Error("No key matching kid or alg found in signing keys"));var a = e.client_id,
                u = n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", u), n._joseUtil.validateJwt(r.id_token, s, t, a, u).then(function () {
              return i.Log.debug("ResponseValidator._validateIdToken: JWT validation successful"), o.payload.sub ? (r.profile = o.payload, r) : (i.Log.error("ResponseValidator._validateIdToken: No sub present in id_token"), Promise.reject(new Error("No sub present in id_token")));
            });
          });
        }) : (i.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", o), Promise.reject(new Error("Failed to parse id_token")));
      }, t.prototype._filterByAlg = function t(e, r) {
        var n = null;if (r.startsWith("RS")) n = "RSA";else if (r.startsWith("PS")) n = "PS";else {
          if (!r.startsWith("ES")) return i.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", r), [];n = "EC";
        }return i.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", n), e = e.filter(function (t) {
          return t.kty === n;
        }), i.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", n, e.length), e;
      }, t.prototype._validateAccessToken = function t(e) {
        if (!e.profile) return i.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token"), Promise.reject(new Error("No profile loaded from id_token"));if (!e.profile.at_hash) return i.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token"), Promise.reject(new Error("No at_hash in id_token"));if (!e.id_token) return i.Log.error("ResponseValidator._validateAccessToken: No id_token"), Promise.reject(new Error("No id_token"));var r = this._joseUtil.parseJwt(e.id_token);if (!r || !r.header) return i.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", r), Promise.reject(new Error("Failed to parse id_token"));var n = r.header.alg;if (!n || 5 !== n.length) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n), Promise.reject(new Error("Unsupported alg: " + n));var o = n.substr(2, 3);if (!o) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n, o), Promise.reject(new Error("Unsupported alg: " + n));if (256 !== (o = parseInt(o)) && 384 !== o && 512 !== o) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n, o), Promise.reject(new Error("Unsupported alg: " + n));var s = "sha" + o,
            a = this._joseUtil.hashString(e.access_token, s);if (!a) return i.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", s), Promise.reject(new Error("Failed to validate at_hash"));var u = a.substr(0, a.length / 2),
            c = this._joseUtil.hexToBase64Url(u);return c !== e.profile.at_hash ? (i.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", c, e.profile.at_hash), Promise.reject(new Error("Failed to validate at_hash"))) : (i.Log.debug("ResponseValidator._validateAccessToken: success"), Promise.resolve(e));
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.UserInfoService = void 0;var n = r(4),
        i = r(2),
        o = r(0),
        s = r(5);function a(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.UserInfoService = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.JsonService,
            u = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService,
            c = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : s.JoseUtil;if (a(this, t), !e) throw o.Log.error("UserInfoService.ctor: No settings passed"), new Error("settings");this._settings = e, this._jsonService = new r(void 0, void 0, this._getClaimsFromJwt.bind(this)), this._metadataService = new u(this._settings), this._joseUtil = c;
      }return t.prototype.getClaims = function t(e) {
        var r = this;return e ? this._metadataService.getUserInfoEndpoint().then(function (t) {
          return o.Log.debug("UserInfoService.getClaims: received userinfo url", t), r._jsonService.getJson(t, e).then(function (t) {
            return o.Log.debug("UserInfoService.getClaims: claims received", t), t;
          });
        }) : (o.Log.error("UserInfoService.getClaims: No token passed"), Promise.reject(new Error("A token is required")));
      }, t.prototype._getClaimsFromJwt = function t(e) {
        var r = this;try {
          var n = this._joseUtil.parseJwt(e.responseText);if (!n || !n.header || !n.payload) return o.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT", n), Promise.reject(new Error("Failed to parse id_token"));var i = n.header.kid,
              s = void 0;switch (this._settings.userInfoJwtIssuer) {case "OP":
              s = this._metadataService.getIssuer();break;case "ANY":
              s = Promise.resolve(n.payload.iss);break;default:
              s = Promise.resolve(this._settings.userInfoJwtIssuer);}return s.then(function (t) {
            return o.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:" + t), r._metadataService.getSigningKeys().then(function (s) {
              if (!s) return o.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata"), Promise.reject(new Error("No signing keys from metadata"));o.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");var a = void 0;if (i) a = s.filter(function (t) {
                return t.kid === i;
              })[0];else {
                if ((s = r._filterByAlg(s, n.header.alg)).length > 1) return o.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata"), Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));a = s[0];
              }if (!a) return o.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys"), Promise.reject(new Error("No key matching kid or alg found in signing keys"));var u = r._settings.client_id,
                  c = r._settings.clockSkew;return o.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ", c), r._joseUtil.validateJwt(e.responseText, a, t, u, c, void 0, !0).then(function () {
                return o.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful"), n.payload;
              });
            });
          });
        } catch (t) {
          return o.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response", t.message), void reject(t);
        }
      }, t.prototype._filterByAlg = function t(e, r) {
        var n = null;if (r.startsWith("RS")) n = "RSA";else if (r.startsWith("PS")) n = "PS";else {
          if (!r.startsWith("ES")) return o.Log.debug("UserInfoService._filterByAlg: alg not supported: ", r), [];n = "EC";
        }return o.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ", n), e = e.filter(function (t) {
          return t.kty === n;
        }), o.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ", n, e.length), e;
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.AllowedSigningAlgs = e.b64tohex = e.hextob64u = e.crypto = e.X509 = e.KeyUtil = e.jws = void 0;var n = r(27);e.jws = n.jws, e.KeyUtil = n.KEYUTIL, e.X509 = n.X509, e.crypto = n.crypto, e.hextob64u = n.hextob64u, e.b64tohex = n.b64tohex, e.AllowedSigningAlgs = ["RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512"];
  }, function (t, e, r) {
    "use strict";
    (function (t) {
      Object.defineProperty(e, "__esModule", { value: !0 });var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
        return typeof t === "undefined" ? "undefined" : _typeof(t);
      } : function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
      },
          n = { userAgent: !1 },
          i = {};
      /*!
      Copyright (c) 2011, Yahoo! Inc. All rights reserved.
      Code licensed under the BSD License:
      http://developer.yahoo.com/yui/license.html
      version: 2.9.0
      */
      if (void 0 === o) var o = {};o.lang = { extend: function t(e, r, i) {
          if (!r || !e) throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var o = function t() {};if (o.prototype = r.prototype, e.prototype = new o(), e.prototype.constructor = e, e.superclass = r.prototype, r.prototype.constructor == Object.prototype.constructor && (r.prototype.constructor = r), i) {
            var s;for (s in i) {
              e.prototype[s] = i[s];
            }var a = function t() {},
                u = ["toString", "valueOf"];try {
              /MSIE/.test(n.userAgent) && (a = function t(e, r) {
                for (s = 0; s < u.length; s += 1) {
                  var n = u[s],
                      i = r[n];"function" == typeof i && i != Object.prototype[n] && (e[n] = i);
                }
              });
            } catch (t) {}a(e.prototype, i);
          }
        } };
      /*! CryptoJS v3.1.2 core-fix.js
       * code.google.com/p/crypto-js
       * (c) 2009-2013 by Jeff Mott. All rights reserved.
       * code.google.com/p/crypto-js/wiki/License
       * THIS IS FIX of 'core.js' to fix Hmac issue.
       * https://code.google.com/p/crypto-js/issues/detail?id=84
       * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
       */
      var s,
          a,
          u,
          c,
          h,
          l,
          f,
          g,
          d,
          p,
          v,
          y = y || (s = Math, u = (a = {}).lib = {}, c = u.Base = function () {
        function t() {}return { extend: function e(r) {
            t.prototype = this;var n = new t();return r && n.mixIn(r), n.hasOwnProperty("init") || (n.init = function () {
              n.$super.init.apply(this, arguments);
            }), n.init.prototype = n, n.$super = this, n;
          }, create: function t() {
            var e = this.extend();return e.init.apply(e, arguments), e;
          }, init: function t() {}, mixIn: function t(e) {
            for (var r in e) {
              e.hasOwnProperty(r) && (this[r] = e[r]);
            }e.hasOwnProperty("toString") && (this.toString = e.toString);
          }, clone: function t() {
            return this.init.prototype.extend(this);
          } };
      }(), h = u.WordArray = c.extend({ init: function t(e, r) {
          e = this.words = e || [], this.sigBytes = null != r ? r : 4 * e.length;
        }, toString: function t(e) {
          return (e || f).stringify(this);
        }, concat: function t(e) {
          var r = this.words,
              n = e.words,
              i = this.sigBytes,
              o = e.sigBytes;if (this.clamp(), i % 4) for (var s = 0; s < o; s++) {
            var a = n[s >>> 2] >>> 24 - s % 4 * 8 & 255;r[i + s >>> 2] |= a << 24 - (i + s) % 4 * 8;
          } else for (s = 0; s < o; s += 4) {
            r[i + s >>> 2] = n[s >>> 2];
          }return this.sigBytes += o, this;
        }, clamp: function t() {
          var e = this.words,
              r = this.sigBytes;e[r >>> 2] &= 4294967295 << 32 - r % 4 * 8, e.length = s.ceil(r / 4);
        }, clone: function t() {
          var e = c.clone.call(this);return e.words = this.words.slice(0), e;
        }, random: function t(e) {
          for (var r = [], n = 0; n < e; n += 4) {
            r.push(4294967296 * s.random() | 0);
          }return new h.init(r, e);
        } }), l = a.enc = {}, f = l.Hex = { stringify: function t(e) {
          for (var r = e.words, n = e.sigBytes, i = [], o = 0; o < n; o++) {
            var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;i.push((s >>> 4).toString(16)), i.push((15 & s).toString(16));
          }return i.join("");
        }, parse: function t(e) {
          for (var r = e.length, n = [], i = 0; i < r; i += 2) {
            n[i >>> 3] |= parseInt(e.substr(i, 2), 16) << 24 - i % 8 * 4;
          }return new h.init(n, r / 2);
        } }, g = l.Latin1 = { stringify: function t(e) {
          for (var r = e.words, n = e.sigBytes, i = [], o = 0; o < n; o++) {
            var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;i.push(String.fromCharCode(s));
          }return i.join("");
        }, parse: function t(e) {
          for (var r = e.length, n = [], i = 0; i < r; i++) {
            n[i >>> 2] |= (255 & e.charCodeAt(i)) << 24 - i % 4 * 8;
          }return new h.init(n, r);
        } }, d = l.Utf8 = { stringify: function t(e) {
          try {
            return decodeURIComponent(escape(g.stringify(e)));
          } catch (t) {
            throw new Error("Malformed UTF-8 data");
          }
        }, parse: function t(e) {
          return g.parse(unescape(encodeURIComponent(e)));
        } }, p = u.BufferedBlockAlgorithm = c.extend({ reset: function t() {
          this._data = new h.init(), this._nDataBytes = 0;
        }, _append: function t(e) {
          "string" == typeof e && (e = d.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes;
        }, _process: function t(e) {
          var r = this._data,
              n = r.words,
              i = r.sigBytes,
              o = this.blockSize,
              a = i / (4 * o),
              u = (a = e ? s.ceil(a) : s.max((0 | a) - this._minBufferSize, 0)) * o,
              c = s.min(4 * u, i);if (u) {
            for (var l = 0; l < u; l += o) {
              this._doProcessBlock(n, l);
            }var f = n.splice(0, u);r.sigBytes -= c;
          }return new h.init(f, c);
        }, clone: function t() {
          var e = c.clone.call(this);return e._data = this._data.clone(), e;
        }, _minBufferSize: 0 }), u.Hasher = p.extend({ cfg: c.extend(), init: function t(e) {
          this.cfg = this.cfg.extend(e), this.reset();
        }, reset: function t() {
          p.reset.call(this), this._doReset();
        }, update: function t(e) {
          return this._append(e), this._process(), this;
        }, finalize: function t(e) {
          return e && this._append(e), this._doFinalize();
        }, blockSize: 16, _createHelper: function t(e) {
          return function (t, r) {
            return new e.init(r).finalize(t);
          };
        }, _createHmacHelper: function t(e) {
          return function (t, r) {
            return new v.HMAC.init(e, r).finalize(t);
          };
        } }), v = a.algo = {}, a);!function (t) {
        var e,
            r = (e = y).lib,
            n = r.Base,
            i = r.WordArray;(e = e.x64 = {}).Word = n.extend({ init: function t(e, r) {
            this.high = e, this.low = r;
          } }), e.WordArray = n.extend({ init: function t(e, r) {
            e = this.words = e || [], this.sigBytes = null != r ? r : 8 * e.length;
          }, toX32: function t() {
            for (var e = this.words, r = e.length, n = [], o = 0; o < r; o++) {
              var s = e[o];n.push(s.high), n.push(s.low);
            }return i.create(n, this.sigBytes);
          }, clone: function t() {
            for (var e = n.clone.call(this), r = e.words = this.words.slice(0), i = r.length, o = 0; o < i; o++) {
              r[o] = r[o].clone();
            }return e;
          } });
      }(), function () {
        var t = y,
            e = t.lib.WordArray;t.enc.Base64 = { stringify: function t(e) {
            var r = e.words,
                n = e.sigBytes,
                i = this._map;e.clamp(), e = [];for (var o = 0; o < n; o += 3) {
              for (var s = (r[o >>> 2] >>> 24 - o % 4 * 8 & 255) << 16 | (r[o + 1 >>> 2] >>> 24 - (o + 1) % 4 * 8 & 255) << 8 | r[o + 2 >>> 2] >>> 24 - (o + 2) % 4 * 8 & 255, a = 0; 4 > a && o + .75 * a < n; a++) {
                e.push(i.charAt(s >>> 6 * (3 - a) & 63));
              }
            }if (r = i.charAt(64)) for (; e.length % 4;) {
              e.push(r);
            }return e.join("");
          }, parse: function t(r) {
            var n = r.length,
                i = this._map;(o = i.charAt(64)) && -1 != (o = r.indexOf(o)) && (n = o);for (var o = [], s = 0, a = 0; a < n; a++) {
              if (a % 4) {
                var u = i.indexOf(r.charAt(a - 1)) << a % 4 * 2,
                    c = i.indexOf(r.charAt(a)) >>> 6 - a % 4 * 2;o[s >>> 2] |= (u | c) << 24 - s % 4 * 8, s++;
              }
            }return e.create(o, s);
          }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
      }(), function (t) {
        for (var e = y, r = (i = e.lib).WordArray, n = i.Hasher, i = e.algo, o = [], s = [], a = function t(e) {
          return 4294967296 * (e - (0 | e)) | 0;
        }, u = 2, c = 0; 64 > c;) {
          var h;t: {
            h = u;for (var l = t.sqrt(h), f = 2; f <= l; f++) {
              if (!(h % f)) {
                h = !1;break t;
              }
            }h = !0;
          }h && (8 > c && (o[c] = a(t.pow(u, .5))), s[c] = a(t.pow(u, 1 / 3)), c++), u++;
        }var g = [];i = i.SHA256 = n.extend({ _doReset: function t() {
            this._hash = new r.init(o.slice(0));
          }, _doProcessBlock: function t(e, r) {
            for (var n = this._hash.words, i = n[0], o = n[1], a = n[2], u = n[3], c = n[4], h = n[5], l = n[6], f = n[7], d = 0; 64 > d; d++) {
              if (16 > d) g[d] = 0 | e[r + d];else {
                var p = g[d - 15],
                    v = g[d - 2];g[d] = ((p << 25 | p >>> 7) ^ (p << 14 | p >>> 18) ^ p >>> 3) + g[d - 7] + ((v << 15 | v >>> 17) ^ (v << 13 | v >>> 19) ^ v >>> 10) + g[d - 16];
              }p = f + ((c << 26 | c >>> 6) ^ (c << 21 | c >>> 11) ^ (c << 7 | c >>> 25)) + (c & h ^ ~c & l) + s[d] + g[d], v = ((i << 30 | i >>> 2) ^ (i << 19 | i >>> 13) ^ (i << 10 | i >>> 22)) + (i & o ^ i & a ^ o & a), f = l, l = h, h = c, c = u + p | 0, u = a, a = o, o = i, i = p + v | 0;
            }n[0] = n[0] + i | 0, n[1] = n[1] + o | 0, n[2] = n[2] + a | 0, n[3] = n[3] + u | 0, n[4] = n[4] + c | 0, n[5] = n[5] + h | 0, n[6] = n[6] + l | 0, n[7] = n[7] + f | 0;
          }, _doFinalize: function e() {
            var r = this._data,
                n = r.words,
                i = 8 * this._nDataBytes,
                o = 8 * r.sigBytes;return n[o >>> 5] |= 128 << 24 - o % 32, n[14 + (o + 64 >>> 9 << 4)] = t.floor(i / 4294967296), n[15 + (o + 64 >>> 9 << 4)] = i, r.sigBytes = 4 * n.length, this._process(), this._hash;
          }, clone: function t() {
            var e = n.clone.call(this);return e._hash = this._hash.clone(), e;
          } });e.SHA256 = n._createHelper(i), e.HmacSHA256 = n._createHmacHelper(i);
      }(Math), function () {
        function t() {
          return n.create.apply(n, arguments);
        }for (var e = y, r = e.lib.Hasher, n = (o = e.x64).Word, i = o.WordArray, o = e.algo, s = [t(1116352408, 3609767458), t(1899447441, 602891725), t(3049323471, 3964484399), t(3921009573, 2173295548), t(961987163, 4081628472), t(1508970993, 3053834265), t(2453635748, 2937671579), t(2870763221, 3664609560), t(3624381080, 2734883394), t(310598401, 1164996542), t(607225278, 1323610764), t(1426881987, 3590304994), t(1925078388, 4068182383), t(2162078206, 991336113), t(2614888103, 633803317), t(3248222580, 3479774868), t(3835390401, 2666613458), t(4022224774, 944711139), t(264347078, 2341262773), t(604807628, 2007800933), t(770255983, 1495990901), t(1249150122, 1856431235), t(1555081692, 3175218132), t(1996064986, 2198950837), t(2554220882, 3999719339), t(2821834349, 766784016), t(2952996808, 2566594879), t(3210313671, 3203337956), t(3336571891, 1034457026), t(3584528711, 2466948901), t(113926993, 3758326383), t(338241895, 168717936), t(666307205, 1188179964), t(773529912, 1546045734), t(1294757372, 1522805485), t(1396182291, 2643833823), t(1695183700, 2343527390), t(1986661051, 1014477480), t(2177026350, 1206759142), t(2456956037, 344077627), t(2730485921, 1290863460), t(2820302411, 3158454273), t(3259730800, 3505952657), t(3345764771, 106217008), t(3516065817, 3606008344), t(3600352804, 1432725776), t(4094571909, 1467031594), t(275423344, 851169720), t(430227734, 3100823752), t(506948616, 1363258195), t(659060556, 3750685593), t(883997877, 3785050280), t(958139571, 3318307427), t(1322822218, 3812723403), t(1537002063, 2003034995), t(1747873779, 3602036899), t(1955562222, 1575990012), t(2024104815, 1125592928), t(2227730452, 2716904306), t(2361852424, 442776044), t(2428436474, 593698344), t(2756734187, 3733110249), t(3204031479, 2999351573), t(3329325298, 3815920427), t(3391569614, 3928383900), t(3515267271, 566280711), t(3940187606, 3454069534), t(4118630271, 4000239992), t(116418474, 1914138554), t(174292421, 2731055270), t(289380356, 3203993006), t(460393269, 320620315), t(685471733, 587496836), t(852142971, 1086792851), t(1017036298, 365543100), t(1126000580, 2618297676), t(1288033470, 3409855158), t(1501505948, 4234509866), t(1607167915, 987167468), t(1816402316, 1246189591)], a = [], u = 0; 80 > u; u++) {
          a[u] = t();
        }o = o.SHA512 = r.extend({ _doReset: function t() {
            this._hash = new i.init([new n.init(1779033703, 4089235720), new n.init(3144134277, 2227873595), new n.init(1013904242, 4271175723), new n.init(2773480762, 1595750129), new n.init(1359893119, 2917565137), new n.init(2600822924, 725511199), new n.init(528734635, 4215389547), new n.init(1541459225, 327033209)]);
          }, _doProcessBlock: function t(e, r) {
            for (var n = (f = this._hash.words)[0], i = f[1], o = f[2], u = f[3], c = f[4], h = f[5], l = f[6], f = f[7], g = n.high, d = n.low, p = i.high, v = i.low, y = o.high, m = o.low, _ = u.high, S = u.low, b = c.high, w = c.low, F = h.high, E = h.low, x = l.high, k = l.low, A = f.high, P = f.low, C = g, T = d, R = p, I = v, D = y, L = m, N = _, U = S, B = b, O = w, j = F, M = E, H = x, V = k, K = A, q = P, J = 0; 80 > J; J++) {
              var W = a[J];if (16 > J) var z = W.high = 0 | e[r + 2 * J],
                  Y = W.low = 0 | e[r + 2 * J + 1];else {
                z = ((Y = (z = a[J - 15]).high) >>> 1 | (G = z.low) << 31) ^ (Y >>> 8 | G << 24) ^ Y >>> 7;var G = (G >>> 1 | Y << 31) ^ (G >>> 8 | Y << 24) ^ (G >>> 7 | Y << 25),
                    X = ((Y = (X = a[J - 2]).high) >>> 19 | ($ = X.low) << 13) ^ (Y << 3 | $ >>> 29) ^ Y >>> 6,
                    $ = ($ >>> 19 | Y << 13) ^ ($ << 3 | Y >>> 29) ^ ($ >>> 6 | Y << 26),
                    Q = (Y = a[J - 7]).high,
                    Z = (tt = a[J - 16]).high,
                    tt = tt.low;z = (z = (z = z + Q + ((Y = G + Y.low) >>> 0 < G >>> 0 ? 1 : 0)) + X + ((Y = Y + $) >>> 0 < $ >>> 0 ? 1 : 0)) + Z + ((Y = Y + tt) >>> 0 < tt >>> 0 ? 1 : 0);W.high = z, W.low = Y;
              }Q = B & j ^ ~B & H, tt = O & M ^ ~O & V, W = C & R ^ C & D ^ R & D;var et = T & I ^ T & L ^ I & L,
                  rt = (G = (C >>> 28 | T << 4) ^ (C << 30 | T >>> 2) ^ (C << 25 | T >>> 7), X = (T >>> 28 | C << 4) ^ (T << 30 | C >>> 2) ^ (T << 25 | C >>> 7), ($ = s[J]).high),
                  nt = $.low;Z = K + ((B >>> 14 | O << 18) ^ (B >>> 18 | O << 14) ^ (B << 23 | O >>> 9)) + (($ = q + ((O >>> 14 | B << 18) ^ (O >>> 18 | B << 14) ^ (O << 23 | B >>> 9))) >>> 0 < q >>> 0 ? 1 : 0), K = H, q = V, H = j, V = M, j = B, M = O, B = N + (Z = (Z = (Z = Z + Q + (($ = $ + tt) >>> 0 < tt >>> 0 ? 1 : 0)) + rt + (($ = $ + nt) >>> 0 < nt >>> 0 ? 1 : 0)) + z + (($ = $ + Y) >>> 0 < Y >>> 0 ? 1 : 0)) + ((O = U + $ | 0) >>> 0 < U >>> 0 ? 1 : 0) | 0, N = D, U = L, D = R, L = I, R = C, I = T, C = Z + (W = G + W + ((Y = X + et) >>> 0 < X >>> 0 ? 1 : 0)) + ((T = $ + Y | 0) >>> 0 < $ >>> 0 ? 1 : 0) | 0;
            }d = n.low = d + T, n.high = g + C + (d >>> 0 < T >>> 0 ? 1 : 0), v = i.low = v + I, i.high = p + R + (v >>> 0 < I >>> 0 ? 1 : 0), m = o.low = m + L, o.high = y + D + (m >>> 0 < L >>> 0 ? 1 : 0), S = u.low = S + U, u.high = _ + N + (S >>> 0 < U >>> 0 ? 1 : 0), w = c.low = w + O, c.high = b + B + (w >>> 0 < O >>> 0 ? 1 : 0), E = h.low = E + M, h.high = F + j + (E >>> 0 < M >>> 0 ? 1 : 0), k = l.low = k + V, l.high = x + H + (k >>> 0 < V >>> 0 ? 1 : 0), P = f.low = P + q, f.high = A + K + (P >>> 0 < q >>> 0 ? 1 : 0);
          }, _doFinalize: function t() {
            var e = this._data,
                r = e.words,
                n = 8 * this._nDataBytes,
                i = 8 * e.sigBytes;return r[i >>> 5] |= 128 << 24 - i % 32, r[30 + (i + 128 >>> 10 << 5)] = Math.floor(n / 4294967296), r[31 + (i + 128 >>> 10 << 5)] = n, e.sigBytes = 4 * r.length, this._process(), this._hash.toX32();
          }, clone: function t() {
            var e = r.clone.call(this);return e._hash = this._hash.clone(), e;
          }, blockSize: 32 }), e.SHA512 = r._createHelper(o), e.HmacSHA512 = r._createHmacHelper(o);
      }(), function () {
        var t = y,
            e = (i = t.x64).Word,
            r = i.WordArray,
            n = (i = t.algo).SHA512,
            i = i.SHA384 = n.extend({ _doReset: function t() {
            this._hash = new r.init([new e.init(3418070365, 3238371032), new e.init(1654270250, 914150663), new e.init(2438529370, 812702999), new e.init(355462360, 4144912697), new e.init(1731405415, 4290775857), new e.init(2394180231, 1750603025), new e.init(3675008525, 1694076839), new e.init(1203062813, 3204075428)]);
          }, _doFinalize: function t() {
            var e = n._doFinalize.call(this);return e.sigBytes -= 16, e;
          } });t.SHA384 = n._createHelper(i), t.HmacSHA384 = n._createHmacHelper(i);
      }();
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */
      var m,
          _ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function S(t) {
        var e,
            r,
            n = "";for (e = 0; e + 3 <= t.length; e += 3) {
          r = parseInt(t.substring(e, e + 3), 16), n += _.charAt(r >> 6) + _.charAt(63 & r);
        }for (e + 1 == t.length ? (r = parseInt(t.substring(e, e + 1), 16), n += _.charAt(r << 2)) : e + 2 == t.length && (r = parseInt(t.substring(e, e + 2), 16), n += _.charAt(r >> 2) + _.charAt((3 & r) << 4)), "="; (3 & n.length) > 0;) {
          n += "=";
        }return n;
      }function b(t) {
        var e,
            r,
            n,
            i = "",
            o = 0;for (e = 0; e < t.length && "=" != t.charAt(e); ++e) {
          (n = _.indexOf(t.charAt(e))) < 0 || (0 == o ? (i += R(n >> 2), r = 3 & n, o = 1) : 1 == o ? (i += R(r << 2 | n >> 4), r = 15 & n, o = 2) : 2 == o ? (i += R(r), i += R(n >> 2), r = 3 & n, o = 3) : (i += R(r << 2 | n >> 4), i += R(15 & n), o = 0));
        }return 1 == o && (i += R(r << 2)), i;
      }function w(t) {
        var e,
            r = b(t),
            n = new Array();for (e = 0; 2 * e < r.length; ++e) {
          n[e] = parseInt(r.substring(2 * e, 2 * e + 2), 16);
        }return n;
      }function F(t, e, r) {
        null != t && ("number" == typeof t ? this.fromNumber(t, e, r) : null == e && "string" != typeof t ? this.fromString(t, 256) : this.fromString(t, e));
      }function E() {
        return new F(null);
      }"Microsoft Internet Explorer" == n.appName ? (F.prototype.am = function x(t, e, r, n, i, o) {
        for (var s = 32767 & e, a = e >> 15; --o >= 0;) {
          var u = 32767 & this[t],
              c = this[t++] >> 15,
              h = a * u + c * s;i = ((u = s * u + ((32767 & h) << 15) + r[n] + (1073741823 & i)) >>> 30) + (h >>> 15) + a * c + (i >>> 30), r[n++] = 1073741823 & u;
        }return i;
      }, m = 30) : "Netscape" != n.appName ? (F.prototype.am = function k(t, e, r, n, i, o) {
        for (; --o >= 0;) {
          var s = e * this[t++] + r[n] + i;i = Math.floor(s / 67108864), r[n++] = 67108863 & s;
        }return i;
      }, m = 26) : (F.prototype.am = function A(t, e, r, n, i, o) {
        for (var s = 16383 & e, a = e >> 14; --o >= 0;) {
          var u = 16383 & this[t],
              c = this[t++] >> 14,
              h = a * u + c * s;i = ((u = s * u + ((16383 & h) << 14) + r[n] + i) >> 28) + (h >> 14) + a * c, r[n++] = 268435455 & u;
        }return i;
      }, m = 28), F.prototype.DB = m, F.prototype.DM = (1 << m) - 1, F.prototype.DV = 1 << m;F.prototype.FV = Math.pow(2, 52), F.prototype.F1 = 52 - m, F.prototype.F2 = 2 * m - 52;var P,
          C,
          T = new Array();for (P = "0".charCodeAt(0), C = 0; C <= 9; ++C) {
        T[P++] = C;
      }for (P = "a".charCodeAt(0), C = 10; C < 36; ++C) {
        T[P++] = C;
      }for (P = "A".charCodeAt(0), C = 10; C < 36; ++C) {
        T[P++] = C;
      }function R(t) {
        return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t);
      }function I(t, e) {
        var r = T[t.charCodeAt(e)];return null == r ? -1 : r;
      }function D(t) {
        var e = E();return e.fromInt(t), e;
      }function L(t) {
        var e,
            r = 1;return 0 != (e = t >>> 16) && (t = e, r += 16), 0 != (e = t >> 8) && (t = e, r += 8), 0 != (e = t >> 4) && (t = e, r += 4), 0 != (e = t >> 2) && (t = e, r += 2), 0 != (e = t >> 1) && (t = e, r += 1), r;
      }function N(t) {
        this.m = t;
      }function U(t) {
        this.m = t, this.mp = t.invDigit(), this.mpl = 32767 & this.mp, this.mph = this.mp >> 15, this.um = (1 << t.DB - 15) - 1, this.mt2 = 2 * t.t;
      }function B(t, e) {
        return t & e;
      }function O(t, e) {
        return t | e;
      }function j(t, e) {
        return t ^ e;
      }function M(t, e) {
        return t & ~e;
      }function H(t) {
        if (0 == t) return -1;var e = 0;return 0 == (65535 & t) && (t >>= 16, e += 16), 0 == (255 & t) && (t >>= 8, e += 8), 0 == (15 & t) && (t >>= 4, e += 4), 0 == (3 & t) && (t >>= 2, e += 2), 0 == (1 & t) && ++e, e;
      }function V(t) {
        for (var e = 0; 0 != t;) {
          t &= t - 1, ++e;
        }return e;
      }function K() {}function q(t) {
        return t;
      }function J(t) {
        this.r2 = E(), this.q3 = E(), F.ONE.dlShiftTo(2 * t.t, this.r2), this.mu = this.r2.divide(t), this.m = t;
      }N.prototype.convert = function W(t) {
        return t.s < 0 || t.compareTo(this.m) >= 0 ? t.mod(this.m) : t;
      }, N.prototype.revert = function z(t) {
        return t;
      }, N.prototype.reduce = function Y(t) {
        t.divRemTo(this.m, null, t);
      }, N.prototype.mulTo = function G(t, e, r) {
        t.multiplyTo(e, r), this.reduce(r);
      }, N.prototype.sqrTo = function X(t, e) {
        t.squareTo(e), this.reduce(e);
      }, U.prototype.convert = function $(t) {
        var e = E();return t.abs().dlShiftTo(this.m.t, e), e.divRemTo(this.m, null, e), t.s < 0 && e.compareTo(F.ZERO) > 0 && this.m.subTo(e, e), e;
      }, U.prototype.revert = function Q(t) {
        var e = E();return t.copyTo(e), this.reduce(e), e;
      }, U.prototype.reduce = function Z(t) {
        for (; t.t <= this.mt2;) {
          t[t.t++] = 0;
        }for (var e = 0; e < this.m.t; ++e) {
          var r = 32767 & t[e],
              n = r * this.mpl + ((r * this.mph + (t[e] >> 15) * this.mpl & this.um) << 15) & t.DM;for (t[r = e + this.m.t] += this.m.am(0, n, t, e, 0, this.m.t); t[r] >= t.DV;) {
            t[r] -= t.DV, t[++r]++;
          }
        }t.clamp(), t.drShiftTo(this.m.t, t), t.compareTo(this.m) >= 0 && t.subTo(this.m, t);
      }, U.prototype.mulTo = function tt(t, e, r) {
        t.multiplyTo(e, r), this.reduce(r);
      }, U.prototype.sqrTo = function et(t, e) {
        t.squareTo(e), this.reduce(e);
      }, F.prototype.copyTo = function rt(t) {
        for (var e = this.t - 1; e >= 0; --e) {
          t[e] = this[e];
        }t.t = this.t, t.s = this.s;
      }, F.prototype.fromInt = function nt(t) {
        this.t = 1, this.s = t < 0 ? -1 : 0, t > 0 ? this[0] = t : t < -1 ? this[0] = t + this.DV : this.t = 0;
      }, F.prototype.fromString = function it(t, e) {
        var r;if (16 == e) r = 4;else if (8 == e) r = 3;else if (256 == e) r = 8;else if (2 == e) r = 1;else if (32 == e) r = 5;else {
          if (4 != e) return void this.fromRadix(t, e);r = 2;
        }this.t = 0, this.s = 0;for (var n = t.length, i = !1, o = 0; --n >= 0;) {
          var s = 8 == r ? 255 & t[n] : I(t, n);s < 0 ? "-" == t.charAt(n) && (i = !0) : (i = !1, 0 == o ? this[this.t++] = s : o + r > this.DB ? (this[this.t - 1] |= (s & (1 << this.DB - o) - 1) << o, this[this.t++] = s >> this.DB - o) : this[this.t - 1] |= s << o, (o += r) >= this.DB && (o -= this.DB));
        }8 == r && 0 != (128 & t[0]) && (this.s = -1, o > 0 && (this[this.t - 1] |= (1 << this.DB - o) - 1 << o)), this.clamp(), i && F.ZERO.subTo(this, this);
      }, F.prototype.clamp = function ot() {
        for (var t = this.s & this.DM; this.t > 0 && this[this.t - 1] == t;) {
          --this.t;
        }
      }, F.prototype.dlShiftTo = function st(t, e) {
        var r;for (r = this.t - 1; r >= 0; --r) {
          e[r + t] = this[r];
        }for (r = t - 1; r >= 0; --r) {
          e[r] = 0;
        }e.t = this.t + t, e.s = this.s;
      }, F.prototype.drShiftTo = function at(t, e) {
        for (var r = t; r < this.t; ++r) {
          e[r - t] = this[r];
        }e.t = Math.max(this.t - t, 0), e.s = this.s;
      }, F.prototype.lShiftTo = function ut(t, e) {
        var r,
            n = t % this.DB,
            i = this.DB - n,
            o = (1 << i) - 1,
            s = Math.floor(t / this.DB),
            a = this.s << n & this.DM;for (r = this.t - 1; r >= 0; --r) {
          e[r + s + 1] = this[r] >> i | a, a = (this[r] & o) << n;
        }for (r = s - 1; r >= 0; --r) {
          e[r] = 0;
        }e[s] = a, e.t = this.t + s + 1, e.s = this.s, e.clamp();
      }, F.prototype.rShiftTo = function ct(t, e) {
        e.s = this.s;var r = Math.floor(t / this.DB);if (r >= this.t) e.t = 0;else {
          var n = t % this.DB,
              i = this.DB - n,
              o = (1 << n) - 1;e[0] = this[r] >> n;for (var s = r + 1; s < this.t; ++s) {
            e[s - r - 1] |= (this[s] & o) << i, e[s - r] = this[s] >> n;
          }n > 0 && (e[this.t - r - 1] |= (this.s & o) << i), e.t = this.t - r, e.clamp();
        }
      }, F.prototype.subTo = function ht(t, e) {
        for (var r = 0, n = 0, i = Math.min(t.t, this.t); r < i;) {
          n += this[r] - t[r], e[r++] = n & this.DM, n >>= this.DB;
        }if (t.t < this.t) {
          for (n -= t.s; r < this.t;) {
            n += this[r], e[r++] = n & this.DM, n >>= this.DB;
          }n += this.s;
        } else {
          for (n += this.s; r < t.t;) {
            n -= t[r], e[r++] = n & this.DM, n >>= this.DB;
          }n -= t.s;
        }e.s = n < 0 ? -1 : 0, n < -1 ? e[r++] = this.DV + n : n > 0 && (e[r++] = n), e.t = r, e.clamp();
      }, F.prototype.multiplyTo = function lt(t, e) {
        var r = this.abs(),
            n = t.abs(),
            i = r.t;for (e.t = i + n.t; --i >= 0;) {
          e[i] = 0;
        }for (i = 0; i < n.t; ++i) {
          e[i + r.t] = r.am(0, n[i], e, i, 0, r.t);
        }e.s = 0, e.clamp(), this.s != t.s && F.ZERO.subTo(e, e);
      }, F.prototype.squareTo = function ft(t) {
        for (var e = this.abs(), r = t.t = 2 * e.t; --r >= 0;) {
          t[r] = 0;
        }for (r = 0; r < e.t - 1; ++r) {
          var n = e.am(r, e[r], t, 2 * r, 0, 1);(t[r + e.t] += e.am(r + 1, 2 * e[r], t, 2 * r + 1, n, e.t - r - 1)) >= e.DV && (t[r + e.t] -= e.DV, t[r + e.t + 1] = 1);
        }t.t > 0 && (t[t.t - 1] += e.am(r, e[r], t, 2 * r, 0, 1)), t.s = 0, t.clamp();
      }, F.prototype.divRemTo = function gt(t, e, r) {
        var n = t.abs();if (!(n.t <= 0)) {
          var i = this.abs();if (i.t < n.t) return null != e && e.fromInt(0), void (null != r && this.copyTo(r));null == r && (r = E());var o = E(),
              s = this.s,
              a = t.s,
              u = this.DB - L(n[n.t - 1]);u > 0 ? (n.lShiftTo(u, o), i.lShiftTo(u, r)) : (n.copyTo(o), i.copyTo(r));var c = o.t,
              h = o[c - 1];if (0 != h) {
            var l = h * (1 << this.F1) + (c > 1 ? o[c - 2] >> this.F2 : 0),
                f = this.FV / l,
                g = (1 << this.F1) / l,
                d = 1 << this.F2,
                p = r.t,
                v = p - c,
                y = null == e ? E() : e;for (o.dlShiftTo(v, y), r.compareTo(y) >= 0 && (r[r.t++] = 1, r.subTo(y, r)), F.ONE.dlShiftTo(c, y), y.subTo(o, o); o.t < c;) {
              o[o.t++] = 0;
            }for (; --v >= 0;) {
              var m = r[--p] == h ? this.DM : Math.floor(r[p] * f + (r[p - 1] + d) * g);if ((r[p] += o.am(0, m, r, v, 0, c)) < m) for (o.dlShiftTo(v, y), r.subTo(y, r); r[p] < --m;) {
                r.subTo(y, r);
              }
            }null != e && (r.drShiftTo(c, e), s != a && F.ZERO.subTo(e, e)), r.t = c, r.clamp(), u > 0 && r.rShiftTo(u, r), s < 0 && F.ZERO.subTo(r, r);
          }
        }
      }, F.prototype.invDigit = function dt() {
        if (this.t < 1) return 0;var t = this[0];if (0 == (1 & t)) return 0;var e = 3 & t;return (e = (e = (e = (e = e * (2 - (15 & t) * e) & 15) * (2 - (255 & t) * e) & 255) * (2 - ((65535 & t) * e & 65535)) & 65535) * (2 - t * e % this.DV) % this.DV) > 0 ? this.DV - e : -e;
      }, F.prototype.isEven = function pt() {
        return 0 == (this.t > 0 ? 1 & this[0] : this.s);
      }, F.prototype.exp = function vt(t, e) {
        if (t > 4294967295 || t < 1) return F.ONE;var r = E(),
            n = E(),
            i = e.convert(this),
            o = L(t) - 1;for (i.copyTo(r); --o >= 0;) {
          if (e.sqrTo(r, n), (t & 1 << o) > 0) e.mulTo(n, i, r);else {
            var s = r;r = n, n = s;
          }
        }return e.revert(r);
      }, F.prototype.toString = function yt(t) {
        if (this.s < 0) return "-" + this.negate().toString(t);var e;if (16 == t) e = 4;else if (8 == t) e = 3;else if (2 == t) e = 1;else if (32 == t) e = 5;else {
          if (4 != t) return this.toRadix(t);e = 2;
        }var r,
            n = (1 << e) - 1,
            i = !1,
            o = "",
            s = this.t,
            a = this.DB - s * this.DB % e;if (s-- > 0) for (a < this.DB && (r = this[s] >> a) > 0 && (i = !0, o = R(r)); s >= 0;) {
          a < e ? (r = (this[s] & (1 << a) - 1) << e - a, r |= this[--s] >> (a += this.DB - e)) : (r = this[s] >> (a -= e) & n, a <= 0 && (a += this.DB, --s)), r > 0 && (i = !0), i && (o += R(r));
        }return i ? o : "0";
      }, F.prototype.negate = function mt() {
        var t = E();return F.ZERO.subTo(this, t), t;
      }, F.prototype.abs = function _t() {
        return this.s < 0 ? this.negate() : this;
      }, F.prototype.compareTo = function St(t) {
        var e = this.s - t.s;if (0 != e) return e;var r = this.t;if (0 != (e = r - t.t)) return this.s < 0 ? -e : e;for (; --r >= 0;) {
          if (0 != (e = this[r] - t[r])) return e;
        }return 0;
      }, F.prototype.bitLength = function bt() {
        return this.t <= 0 ? 0 : this.DB * (this.t - 1) + L(this[this.t - 1] ^ this.s & this.DM);
      }, F.prototype.mod = function wt(t) {
        var e = E();return this.abs().divRemTo(t, null, e), this.s < 0 && e.compareTo(F.ZERO) > 0 && t.subTo(e, e), e;
      }, F.prototype.modPowInt = function Ft(t, e) {
        var r;return r = t < 256 || e.isEven() ? new N(e) : new U(e), this.exp(t, r);
      }, F.ZERO = D(0), F.ONE = D(1), K.prototype.convert = q, K.prototype.revert = q, K.prototype.mulTo = function Et(t, e, r) {
        t.multiplyTo(e, r);
      }, K.prototype.sqrTo = function xt(t, e) {
        t.squareTo(e);
      }, J.prototype.convert = function kt(t) {
        if (t.s < 0 || t.t > 2 * this.m.t) return t.mod(this.m);if (t.compareTo(this.m) < 0) return t;var e = E();return t.copyTo(e), this.reduce(e), e;
      }, J.prototype.revert = function At(t) {
        return t;
      }, J.prototype.reduce = function Pt(t) {
        for (t.drShiftTo(this.m.t - 1, this.r2), t.t > this.m.t + 1 && (t.t = this.m.t + 1, t.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); t.compareTo(this.r2) < 0;) {
          t.dAddOffset(1, this.m.t + 1);
        }for (t.subTo(this.r2, t); t.compareTo(this.m) >= 0;) {
          t.subTo(this.m, t);
        }
      }, J.prototype.mulTo = function Ct(t, e, r) {
        t.multiplyTo(e, r), this.reduce(r);
      }, J.prototype.sqrTo = function Tt(t, e) {
        t.squareTo(e), this.reduce(e);
      };var Rt = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997],
          It = (1 << 26) / Rt[Rt.length - 1];
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */
      function Dt() {
        this.i = 0, this.j = 0, this.S = new Array();
      }F.prototype.chunkSize = function Lt(t) {
        return Math.floor(Math.LN2 * this.DB / Math.log(t));
      }, F.prototype.toRadix = function Nt(t) {
        if (null == t && (t = 10), 0 == this.signum() || t < 2 || t > 36) return "0";var e = this.chunkSize(t),
            r = Math.pow(t, e),
            n = D(r),
            i = E(),
            o = E(),
            s = "";for (this.divRemTo(n, i, o); i.signum() > 0;) {
          s = (r + o.intValue()).toString(t).substr(1) + s, i.divRemTo(n, i, o);
        }return o.intValue().toString(t) + s;
      }, F.prototype.fromRadix = function Ut(t, e) {
        this.fromInt(0), null == e && (e = 10);for (var r = this.chunkSize(e), n = Math.pow(e, r), i = !1, o = 0, s = 0, a = 0; a < t.length; ++a) {
          var u = I(t, a);u < 0 ? "-" == t.charAt(a) && 0 == this.signum() && (i = !0) : (s = e * s + u, ++o >= r && (this.dMultiply(n), this.dAddOffset(s, 0), o = 0, s = 0));
        }o > 0 && (this.dMultiply(Math.pow(e, o)), this.dAddOffset(s, 0)), i && F.ZERO.subTo(this, this);
      }, F.prototype.fromNumber = function Bt(t, e, r) {
        if ("number" == typeof e) {
          if (t < 2) this.fromInt(1);else for (this.fromNumber(t, r), this.testBit(t - 1) || this.bitwiseTo(F.ONE.shiftLeft(t - 1), O, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(e);) {
            this.dAddOffset(2, 0), this.bitLength() > t && this.subTo(F.ONE.shiftLeft(t - 1), this);
          }
        } else {
          var n = new Array(),
              i = 7 & t;n.length = 1 + (t >> 3), e.nextBytes(n), i > 0 ? n[0] &= (1 << i) - 1 : n[0] = 0, this.fromString(n, 256);
        }
      }, F.prototype.bitwiseTo = function Ot(t, e, r) {
        var n,
            i,
            o = Math.min(t.t, this.t);for (n = 0; n < o; ++n) {
          r[n] = e(this[n], t[n]);
        }if (t.t < this.t) {
          for (i = t.s & this.DM, n = o; n < this.t; ++n) {
            r[n] = e(this[n], i);
          }r.t = this.t;
        } else {
          for (i = this.s & this.DM, n = o; n < t.t; ++n) {
            r[n] = e(i, t[n]);
          }r.t = t.t;
        }r.s = e(this.s, t.s), r.clamp();
      }, F.prototype.changeBit = function jt(t, e) {
        var r = F.ONE.shiftLeft(t);return this.bitwiseTo(r, e, r), r;
      }, F.prototype.addTo = function Mt(t, e) {
        for (var r = 0, n = 0, i = Math.min(t.t, this.t); r < i;) {
          n += this[r] + t[r], e[r++] = n & this.DM, n >>= this.DB;
        }if (t.t < this.t) {
          for (n += t.s; r < this.t;) {
            n += this[r], e[r++] = n & this.DM, n >>= this.DB;
          }n += this.s;
        } else {
          for (n += this.s; r < t.t;) {
            n += t[r], e[r++] = n & this.DM, n >>= this.DB;
          }n += t.s;
        }e.s = n < 0 ? -1 : 0, n > 0 ? e[r++] = n : n < -1 && (e[r++] = this.DV + n), e.t = r, e.clamp();
      }, F.prototype.dMultiply = function Ht(t) {
        this[this.t] = this.am(0, t - 1, this, 0, 0, this.t), ++this.t, this.clamp();
      }, F.prototype.dAddOffset = function Vt(t, e) {
        if (0 != t) {
          for (; this.t <= e;) {
            this[this.t++] = 0;
          }for (this[e] += t; this[e] >= this.DV;) {
            this[e] -= this.DV, ++e >= this.t && (this[this.t++] = 0), ++this[e];
          }
        }
      }, F.prototype.multiplyLowerTo = function Kt(t, e, r) {
        var n,
            i = Math.min(this.t + t.t, e);for (r.s = 0, r.t = i; i > 0;) {
          r[--i] = 0;
        }for (n = r.t - this.t; i < n; ++i) {
          r[i + this.t] = this.am(0, t[i], r, i, 0, this.t);
        }for (n = Math.min(t.t, e); i < n; ++i) {
          this.am(0, t[i], r, i, 0, e - i);
        }r.clamp();
      }, F.prototype.multiplyUpperTo = function qt(t, e, r) {
        --e;var n = r.t = this.t + t.t - e;for (r.s = 0; --n >= 0;) {
          r[n] = 0;
        }for (n = Math.max(e - this.t, 0); n < t.t; ++n) {
          r[this.t + n - e] = this.am(e - n, t[n], r, 0, 0, this.t + n - e);
        }r.clamp(), r.drShiftTo(1, r);
      }, F.prototype.modInt = function Jt(t) {
        if (t <= 0) return 0;var e = this.DV % t,
            r = this.s < 0 ? t - 1 : 0;if (this.t > 0) if (0 == e) r = this[0] % t;else for (var n = this.t - 1; n >= 0; --n) {
          r = (e * r + this[n]) % t;
        }return r;
      }, F.prototype.millerRabin = function Wt(t) {
        var e = this.subtract(F.ONE),
            r = e.getLowestSetBit();if (r <= 0) return !1;var n = e.shiftRight(r);(t = t + 1 >> 1) > Rt.length && (t = Rt.length);for (var i = E(), o = 0; o < t; ++o) {
          i.fromInt(Rt[Math.floor(Math.random() * Rt.length)]);var s = i.modPow(n, this);if (0 != s.compareTo(F.ONE) && 0 != s.compareTo(e)) {
            for (var a = 1; a++ < r && 0 != s.compareTo(e);) {
              if (0 == (s = s.modPowInt(2, this)).compareTo(F.ONE)) return !1;
            }if (0 != s.compareTo(e)) return !1;
          }
        }return !0;
      }, F.prototype.clone =
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */
      function zt() {
        var t = E();return this.copyTo(t), t;
      }, F.prototype.intValue = function Yt() {
        if (this.s < 0) {
          if (1 == this.t) return this[0] - this.DV;if (0 == this.t) return -1;
        } else {
          if (1 == this.t) return this[0];if (0 == this.t) return 0;
        }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
      }, F.prototype.byteValue = function Gt() {
        return 0 == this.t ? this.s : this[0] << 24 >> 24;
      }, F.prototype.shortValue = function Xt() {
        return 0 == this.t ? this.s : this[0] << 16 >> 16;
      }, F.prototype.signum = function $t() {
        return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;
      }, F.prototype.toByteArray = function Qt() {
        var t = this.t,
            e = new Array();e[0] = this.s;var r,
            n = this.DB - t * this.DB % 8,
            i = 0;if (t-- > 0) for (n < this.DB && (r = this[t] >> n) != (this.s & this.DM) >> n && (e[i++] = r | this.s << this.DB - n); t >= 0;) {
          n < 8 ? (r = (this[t] & (1 << n) - 1) << 8 - n, r |= this[--t] >> (n += this.DB - 8)) : (r = this[t] >> (n -= 8) & 255, n <= 0 && (n += this.DB, --t)), 0 != (128 & r) && (r |= -256), 0 == i && (128 & this.s) != (128 & r) && ++i, (i > 0 || r != this.s) && (e[i++] = r);
        }return e;
      }, F.prototype.equals = function Zt(t) {
        return 0 == this.compareTo(t);
      }, F.prototype.min = function te(t) {
        return this.compareTo(t) < 0 ? this : t;
      }, F.prototype.max = function ee(t) {
        return this.compareTo(t) > 0 ? this : t;
      }, F.prototype.and = function re(t) {
        var e = E();return this.bitwiseTo(t, B, e), e;
      }, F.prototype.or = function ne(t) {
        var e = E();return this.bitwiseTo(t, O, e), e;
      }, F.prototype.xor = function ie(t) {
        var e = E();return this.bitwiseTo(t, j, e), e;
      }, F.prototype.andNot = function oe(t) {
        var e = E();return this.bitwiseTo(t, M, e), e;
      }, F.prototype.not = function se() {
        for (var t = E(), e = 0; e < this.t; ++e) {
          t[e] = this.DM & ~this[e];
        }return t.t = this.t, t.s = ~this.s, t;
      }, F.prototype.shiftLeft = function ae(t) {
        var e = E();return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;
      }, F.prototype.shiftRight = function ue(t) {
        var e = E();return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;
      }, F.prototype.getLowestSetBit = function ce() {
        for (var t = 0; t < this.t; ++t) {
          if (0 != this[t]) return t * this.DB + H(this[t]);
        }return this.s < 0 ? this.t * this.DB : -1;
      }, F.prototype.bitCount = function he() {
        for (var t = 0, e = this.s & this.DM, r = 0; r < this.t; ++r) {
          t += V(this[r] ^ e);
        }return t;
      }, F.prototype.testBit = function le(t) {
        var e = Math.floor(t / this.DB);return e >= this.t ? 0 != this.s : 0 != (this[e] & 1 << t % this.DB);
      }, F.prototype.setBit = function fe(t) {
        return this.changeBit(t, O);
      }, F.prototype.clearBit = function ge(t) {
        return this.changeBit(t, M);
      }, F.prototype.flipBit = function de(t) {
        return this.changeBit(t, j);
      }, F.prototype.add = function pe(t) {
        var e = E();return this.addTo(t, e), e;
      }, F.prototype.subtract = function ve(t) {
        var e = E();return this.subTo(t, e), e;
      }, F.prototype.multiply = function ye(t) {
        var e = E();return this.multiplyTo(t, e), e;
      }, F.prototype.divide = function me(t) {
        var e = E();return this.divRemTo(t, e, null), e;
      }, F.prototype.remainder = function _e(t) {
        var e = E();return this.divRemTo(t, null, e), e;
      }, F.prototype.divideAndRemainder = function Se(t) {
        var e = E(),
            r = E();return this.divRemTo(t, e, r), new Array(e, r);
      }, F.prototype.modPow = function be(t, e) {
        var r,
            n,
            i = t.bitLength(),
            o = D(1);if (i <= 0) return o;r = i < 18 ? 1 : i < 48 ? 3 : i < 144 ? 4 : i < 768 ? 5 : 6, n = i < 8 ? new N(e) : e.isEven() ? new J(e) : new U(e);var s = new Array(),
            a = 3,
            u = r - 1,
            c = (1 << r) - 1;if (s[1] = n.convert(this), r > 1) {
          var h = E();for (n.sqrTo(s[1], h); a <= c;) {
            s[a] = E(), n.mulTo(h, s[a - 2], s[a]), a += 2;
          }
        }var l,
            f,
            g = t.t - 1,
            d = !0,
            p = E();for (i = L(t[g]) - 1; g >= 0;) {
          for (i >= u ? l = t[g] >> i - u & c : (l = (t[g] & (1 << i + 1) - 1) << u - i, g > 0 && (l |= t[g - 1] >> this.DB + i - u)), a = r; 0 == (1 & l);) {
            l >>= 1, --a;
          }if ((i -= a) < 0 && (i += this.DB, --g), d) s[l].copyTo(o), d = !1;else {
            for (; a > 1;) {
              n.sqrTo(o, p), n.sqrTo(p, o), a -= 2;
            }a > 0 ? n.sqrTo(o, p) : (f = o, o = p, p = f), n.mulTo(p, s[l], o);
          }for (; g >= 0 && 0 == (t[g] & 1 << i);) {
            n.sqrTo(o, p), f = o, o = p, p = f, --i < 0 && (i = this.DB - 1, --g);
          }
        }return n.revert(o);
      }, F.prototype.modInverse = function we(t) {
        var e = t.isEven();if (this.isEven() && e || 0 == t.signum()) return F.ZERO;for (var r = t.clone(), n = this.clone(), i = D(1), o = D(0), s = D(0), a = D(1); 0 != r.signum();) {
          for (; r.isEven();) {
            r.rShiftTo(1, r), e ? (i.isEven() && o.isEven() || (i.addTo(this, i), o.subTo(t, o)), i.rShiftTo(1, i)) : o.isEven() || o.subTo(t, o), o.rShiftTo(1, o);
          }for (; n.isEven();) {
            n.rShiftTo(1, n), e ? (s.isEven() && a.isEven() || (s.addTo(this, s), a.subTo(t, a)), s.rShiftTo(1, s)) : a.isEven() || a.subTo(t, a), a.rShiftTo(1, a);
          }r.compareTo(n) >= 0 ? (r.subTo(n, r), e && i.subTo(s, i), o.subTo(a, o)) : (n.subTo(r, n), e && s.subTo(i, s), a.subTo(o, a));
        }return 0 != n.compareTo(F.ONE) ? F.ZERO : a.compareTo(t) >= 0 ? a.subtract(t) : a.signum() < 0 ? (a.addTo(t, a), a.signum() < 0 ? a.add(t) : a) : a;
      }, F.prototype.pow = function Fe(t) {
        return this.exp(t, new K());
      }, F.prototype.gcd = function Ee(t) {
        var e = this.s < 0 ? this.negate() : this.clone(),
            r = t.s < 0 ? t.negate() : t.clone();if (e.compareTo(r) < 0) {
          var n = e;e = r, r = n;
        }var i = e.getLowestSetBit(),
            o = r.getLowestSetBit();if (o < 0) return e;for (i < o && (o = i), o > 0 && (e.rShiftTo(o, e), r.rShiftTo(o, r)); e.signum() > 0;) {
          (i = e.getLowestSetBit()) > 0 && e.rShiftTo(i, e), (i = r.getLowestSetBit()) > 0 && r.rShiftTo(i, r), e.compareTo(r) >= 0 ? (e.subTo(r, e), e.rShiftTo(1, e)) : (r.subTo(e, r), r.rShiftTo(1, r));
        }return o > 0 && r.lShiftTo(o, r), r;
      }, F.prototype.isProbablePrime = function xe(t) {
        var e,
            r = this.abs();if (1 == r.t && r[0] <= Rt[Rt.length - 1]) {
          for (e = 0; e < Rt.length; ++e) {
            if (r[0] == Rt[e]) return !0;
          }return !1;
        }if (r.isEven()) return !1;for (e = 1; e < Rt.length;) {
          for (var n = Rt[e], i = e + 1; i < Rt.length && n < It;) {
            n *= Rt[i++];
          }for (n = r.modInt(n); e < i;) {
            if (n % Rt[e++] == 0) return !1;
          }
        }return r.millerRabin(t);
      }, F.prototype.square = function ke() {
        var t = E();return this.squareTo(t), t;
      }, Dt.prototype.init = function Ae(t) {
        var e, r, n;for (e = 0; e < 256; ++e) {
          this.S[e] = e;
        }for (r = 0, e = 0; e < 256; ++e) {
          r = r + this.S[e] + t[e % t.length] & 255, n = this.S[e], this.S[e] = this.S[r], this.S[r] = n;
        }this.i = 0, this.j = 0;
      }, Dt.prototype.next = function Pe() {
        var t;return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, t = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = t, this.S[t + this.S[this.i] & 255];
      };var Ce, Te, Re;
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */function Ie() {
        !function t(e) {
          Te[Re++] ^= 255 & e, Te[Re++] ^= e >> 8 & 255, Te[Re++] ^= e >> 16 & 255, Te[Re++] ^= e >> 24 & 255, Re >= 256 && (Re -= 256);
        }(new Date().getTime());
      }if (null == Te) {
        var De;if (Te = new Array(), Re = 0, void 0 !== i && (void 0 !== i.crypto || void 0 !== i.msCrypto)) {
          var Le = i.crypto || i.msCrypto;if (Le.getRandomValues) {
            var Ne = new Uint8Array(32);for (Le.getRandomValues(Ne), De = 0; De < 32; ++De) {
              Te[Re++] = Ne[De];
            }
          } else if ("Netscape" == n.appName && n.appVersion < "5") {
            var Ue = i.crypto.random(32);for (De = 0; De < Ue.length; ++De) {
              Te[Re++] = 255 & Ue.charCodeAt(De);
            }
          }
        }for (; Re < 256;) {
          De = Math.floor(65536 * Math.random()), Te[Re++] = De >>> 8, Te[Re++] = 255 & De;
        }Re = 0, Ie();
      }function Be() {
        if (null == Ce) {
          for (Ie(), (Ce = function t() {
            return new Dt();
          }()).init(Te), Re = 0; Re < Te.length; ++Re) {
            Te[Re] = 0;
          }Re = 0;
        }return Ce.next();
      }function Oe() {}
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */
      function je(t, e) {
        return new F(t, e);
      }function Me(t, e, r) {
        for (var n = "", i = 0; n.length < e;) {
          n += r(String.fromCharCode.apply(String, t.concat([(4278190080 & i) >> 24, (16711680 & i) >> 16, (65280 & i) >> 8, 255 & i]))), i += 1;
        }return n;
      }function He() {
        this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff = null;
      }
      /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
       */
      function Ve(t, e) {
        this.x = e, this.q = t;
      }function Ke(t, e, r, n) {
        this.curve = t, this.x = e, this.y = r, this.z = null == n ? F.ONE : n, this.zinv = null;
      }function qe(t, e, r) {
        this.q = t, this.a = this.fromBigInteger(e), this.b = this.fromBigInteger(r), this.infinity = new Ke(this, null, null);
      }Oe.prototype.nextBytes = function Je(t) {
        var e;for (e = 0; e < t.length; ++e) {
          t[e] = Be();
        }
      }, He.prototype.doPublic = function We(t) {
        return t.modPowInt(this.e, this.n);
      }, He.prototype.setPublic = function ze(t, e) {
        if (this.isPublic = !0, this.isPrivate = !1, "string" != typeof t) this.n = t, this.e = e;else {
          if (!(null != t && null != e && t.length > 0 && e.length > 0)) throw "Invalid RSA public key";this.n = je(t, 16), this.e = parseInt(e, 16);
        }
      }, He.prototype.encrypt = function Ye(t) {
        var e = function r(t, e) {
          if (e < t.length + 11) throw "Message too long for RSA";for (var r = new Array(), n = t.length - 1; n >= 0 && e > 0;) {
            var i = t.charCodeAt(n--);i < 128 ? r[--e] = i : i > 127 && i < 2048 ? (r[--e] = 63 & i | 128, r[--e] = i >> 6 | 192) : (r[--e] = 63 & i | 128, r[--e] = i >> 6 & 63 | 128, r[--e] = i >> 12 | 224);
          }r[--e] = 0;for (var o = new Oe(), s = new Array(); e > 2;) {
            for (s[0] = 0; 0 == s[0];) {
              o.nextBytes(s);
            }r[--e] = s[0];
          }return r[--e] = 2, r[--e] = 0, new F(r);
        }(t, this.n.bitLength() + 7 >> 3);if (null == e) return null;var n = this.doPublic(e);if (null == n) return null;var i = n.toString(16);return 0 == (1 & i.length) ? i : "0" + i;
      }, He.prototype.encryptOAEP = function Ge(t, e, r) {
        var n = function i(t, e, r, n) {
          var i = br.crypto.MessageDigest,
              o = br.crypto.Util,
              s = null;if (r || (r = "sha1"), "string" == typeof r && (s = i.getCanonicalAlgName(r), n = i.getHashLength(s), r = function t(e) {
            return Nr(o.hashHex(Ur(e), s));
          }), t.length + 2 * n + 2 > e) throw "Message too long for RSA";var a,
              u = "";for (a = 0; a < e - t.length - 2 * n - 2; a += 1) {
            u += "\0";
          }var c = r("") + u + "" + t,
              h = new Array(n);new Oe().nextBytes(h);var l = Me(h, c.length, r),
              f = [];for (a = 0; a < c.length; a += 1) {
            f[a] = c.charCodeAt(a) ^ l.charCodeAt(a);
          }var g = Me(f, h.length, r),
              d = [0];for (a = 0; a < h.length; a += 1) {
            d[a + 1] = h[a] ^ g.charCodeAt(a);
          }return new F(d.concat(f));
        }(t, this.n.bitLength() + 7 >> 3, e, r);if (null == n) return null;var o = this.doPublic(n);if (null == o) return null;var s = o.toString(16);return 0 == (1 & s.length) ? s : "0" + s;
      }, He.prototype.type = "RSA", Ve.prototype.equals = function Xe(t) {
        return t == this || this.q.equals(t.q) && this.x.equals(t.x);
      }, Ve.prototype.toBigInteger = function $e() {
        return this.x;
      }, Ve.prototype.negate = function Qe() {
        return new Ve(this.q, this.x.negate().mod(this.q));
      }, Ve.prototype.add = function Ze(t) {
        return new Ve(this.q, this.x.add(t.toBigInteger()).mod(this.q));
      }, Ve.prototype.subtract = function tr(t) {
        return new Ve(this.q, this.x.subtract(t.toBigInteger()).mod(this.q));
      }, Ve.prototype.multiply = function er(t) {
        return new Ve(this.q, this.x.multiply(t.toBigInteger()).mod(this.q));
      }, Ve.prototype.square = function rr() {
        return new Ve(this.q, this.x.square().mod(this.q));
      }, Ve.prototype.divide = function nr(t) {
        return new Ve(this.q, this.x.multiply(t.toBigInteger().modInverse(this.q)).mod(this.q));
      }, Ke.prototype.getX = function ir() {
        return null == this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
      }, Ke.prototype.getY = function or() {
        return null == this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
      }, Ke.prototype.equals = function sr(t) {
        return t == this || (this.isInfinity() ? t.isInfinity() : t.isInfinity() ? this.isInfinity() : !!t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(F.ZERO) && t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(F.ZERO));
      }, Ke.prototype.isInfinity = function ar() {
        return null == this.x && null == this.y || this.z.equals(F.ZERO) && !this.y.toBigInteger().equals(F.ZERO);
      }, Ke.prototype.negate = function ur() {
        return new Ke(this.curve, this.x, this.y.negate(), this.z);
      }, Ke.prototype.add = function cr(t) {
        if (this.isInfinity()) return t;if (t.isInfinity()) return this;var e = t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q),
            r = t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);if (F.ZERO.equals(r)) return F.ZERO.equals(e) ? this.twice() : this.curve.getInfinity();var n = new F("3"),
            i = this.x.toBigInteger(),
            o = this.y.toBigInteger(),
            s = (t.x.toBigInteger(), t.y.toBigInteger(), r.square()),
            a = s.multiply(r),
            u = i.multiply(s),
            c = e.square().multiply(this.z),
            h = c.subtract(u.shiftLeft(1)).multiply(t.z).subtract(a).multiply(r).mod(this.curve.q),
            l = u.multiply(n).multiply(e).subtract(o.multiply(a)).subtract(c.multiply(e)).multiply(t.z).add(e.multiply(a)).mod(this.curve.q),
            f = a.multiply(this.z).multiply(t.z).mod(this.curve.q);return new Ke(this.curve, this.curve.fromBigInteger(h), this.curve.fromBigInteger(l), f);
      }, Ke.prototype.twice = function hr() {
        if (this.isInfinity()) return this;if (0 == this.y.toBigInteger().signum()) return this.curve.getInfinity();var t = new F("3"),
            e = this.x.toBigInteger(),
            r = this.y.toBigInteger(),
            n = r.multiply(this.z),
            i = n.multiply(r).mod(this.curve.q),
            o = this.curve.a.toBigInteger(),
            s = e.square().multiply(t);F.ZERO.equals(o) || (s = s.add(this.z.square().multiply(o)));var a = (s = s.mod(this.curve.q)).square().subtract(e.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(n).mod(this.curve.q),
            u = s.multiply(t).multiply(e).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(s.square().multiply(s)).mod(this.curve.q),
            c = n.square().multiply(n).shiftLeft(3).mod(this.curve.q);return new Ke(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(u), c);
      }, Ke.prototype.multiply = function lr(t) {
        if (this.isInfinity()) return this;if (0 == t.signum()) return this.curve.getInfinity();var e,
            r = t,
            n = r.multiply(new F("3")),
            i = this.negate(),
            o = this,
            s = this.curve.q.subtract(t),
            a = s.multiply(new F("3")),
            u = new Ke(this.curve, this.x, this.y),
            c = u.negate();for (e = n.bitLength() - 2; e > 0; --e) {
          o = o.twice();var h = n.testBit(e);h != r.testBit(e) && (o = o.add(h ? this : i));
        }for (e = a.bitLength() - 2; e > 0; --e) {
          u = u.twice();var l = a.testBit(e);l != s.testBit(e) && (u = u.add(l ? u : c));
        }return o;
      }, Ke.prototype.multiplyTwo = function fr(t, e, r) {
        var n;n = t.bitLength() > r.bitLength() ? t.bitLength() - 1 : r.bitLength() - 1;for (var i = this.curve.getInfinity(), o = this.add(e); n >= 0;) {
          i = i.twice(), t.testBit(n) ? i = r.testBit(n) ? i.add(o) : i.add(this) : r.testBit(n) && (i = i.add(e)), --n;
        }return i;
      }, qe.prototype.getQ = function gr() {
        return this.q;
      }, qe.prototype.getA = function dr() {
        return this.a;
      }, qe.prototype.getB = function pr() {
        return this.b;
      }, qe.prototype.equals = function vr(t) {
        return t == this || this.q.equals(t.q) && this.a.equals(t.a) && this.b.equals(t.b);
      }, qe.prototype.getInfinity = function yr() {
        return this.infinity;
      }, qe.prototype.fromBigInteger = function mr(t) {
        return new Ve(this.q, t);
      }, qe.prototype.decodePointHex = function _r(t) {
        switch (parseInt(t.substr(0, 2), 16)) {case 0:
            return this.infinity;case 2:case 3:
            return null;case 4:case 6:case 7:
            var e = (t.length - 2) / 2,
                r = t.substr(2, e),
                n = t.substr(e + 2, e);return new Ke(this, this.fromBigInteger(new F(r, 16)), this.fromBigInteger(new F(n, 16)));default:
            return null;}
      },
      /*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
       */
      Ve.prototype.getByteLength = function () {
        return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
      }, Ke.prototype.getEncoded = function (t) {
        var e = function t(e, r) {
          var n = e.toByteArrayUnsigned();if (r < n.length) n = n.slice(n.length - r);else for (; r > n.length;) {
            n.unshift(0);
          }return n;
        },
            r = this.getX().toBigInteger(),
            n = this.getY().toBigInteger(),
            i = e(r, 32);return t ? n.isEven() ? i.unshift(2) : i.unshift(3) : (i.unshift(4), i = i.concat(e(n, 32))), i;
      }, Ke.decodeFrom = function (t, e) {
        e[0];var r = e.length - 1,
            n = e.slice(1, 1 + r / 2),
            i = e.slice(1 + r / 2, 1 + r);n.unshift(0), i.unshift(0);var o = new F(n),
            s = new F(i);return new Ke(t, t.fromBigInteger(o), t.fromBigInteger(s));
      }, Ke.decodeFromHex = function (t, e) {
        e.substr(0, 2);var r = e.length - 2,
            n = e.substr(2, r / 2),
            i = e.substr(2 + r / 2, r / 2),
            o = new F(n, 16),
            s = new F(i, 16);return new Ke(t, t.fromBigInteger(o), t.fromBigInteger(s));
      }, Ke.prototype.add2D = function (t) {
        if (this.isInfinity()) return t;if (t.isInfinity()) return this;if (this.x.equals(t.x)) return this.y.equals(t.y) ? this.twice() : this.curve.getInfinity();var e = t.x.subtract(this.x),
            r = t.y.subtract(this.y).divide(e),
            n = r.square().subtract(this.x).subtract(t.x),
            i = r.multiply(this.x.subtract(n)).subtract(this.y);return new Ke(this.curve, n, i);
      }, Ke.prototype.twice2D = function () {
        if (this.isInfinity()) return this;if (0 == this.y.toBigInteger().signum()) return this.curve.getInfinity();var t = this.curve.fromBigInteger(F.valueOf(2)),
            e = this.curve.fromBigInteger(F.valueOf(3)),
            r = this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(t)),
            n = r.square().subtract(this.x.multiply(t)),
            i = r.multiply(this.x.subtract(n)).subtract(this.y);return new Ke(this.curve, n, i);
      }, Ke.prototype.multiply2D = function (t) {
        if (this.isInfinity()) return this;if (0 == t.signum()) return this.curve.getInfinity();var e,
            r = t,
            n = r.multiply(new F("3")),
            i = this.negate(),
            o = this;for (e = n.bitLength() - 2; e > 0; --e) {
          o = o.twice();var s = n.testBit(e);s != r.testBit(e) && (o = o.add2D(s ? this : i));
        }return o;
      }, Ke.prototype.isOnCurve = function () {
        var t = this.getX().toBigInteger(),
            e = this.getY().toBigInteger(),
            r = this.curve.getA().toBigInteger(),
            n = this.curve.getB().toBigInteger(),
            i = this.curve.getQ(),
            o = e.multiply(e).mod(i),
            s = t.multiply(t).multiply(t).add(r.multiply(t)).add(n).mod(i);return o.equals(s);
      }, Ke.prototype.toString = function () {
        return "(" + this.getX().toBigInteger().toString() + "," + this.getY().toBigInteger().toString() + ")";
      }, Ke.prototype.validate = function () {
        var t = this.curve.getQ();if (this.isInfinity()) throw new Error("Point is at infinity.");var e = this.getX().toBigInteger(),
            r = this.getY().toBigInteger();if (e.compareTo(F.ONE) < 0 || e.compareTo(t.subtract(F.ONE)) > 0) throw new Error("x coordinate out of bounds");if (r.compareTo(F.ONE) < 0 || r.compareTo(t.subtract(F.ONE)) > 0) throw new Error("y coordinate out of bounds");if (!this.isOnCurve()) throw new Error("Point is not on the curve.");if (this.multiply(t).isInfinity()) throw new Error("Point is not a scalar multiple of G.");return !0;
      };
      /*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
       */
      var Sr = function () {
        var t = new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))', "g"),
            e = new RegExp("\\\\(?:([^u])|u(.{4}))", "g"),
            n = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function i(t, e, r) {
          return e ? n[e] : String.fromCharCode(parseInt(r, 16));
        }var o = new String(""),
            s = Object.hasOwnProperty;return function (n, a) {
          var u,
              c,
              h = n.match(t),
              l = h[0],
              f = !1;"{" === l ? u = {} : "[" === l ? u = [] : (u = [], f = !0);for (var g = [u], d = 1 - f, p = h.length; d < p; ++d) {
            var v;switch ((l = h[d]).charCodeAt(0)) {default:
                (v = g[0])[c || v.length] = +l, c = void 0;break;case 34:
                if (-1 !== (l = l.substring(1, l.length - 1)).indexOf("\\") && (l = l.replace(e, i)), v = g[0], !c) {
                  if (!(v instanceof Array)) {
                    c = l || o;break;
                  }c = v.length;
                }v[c] = l, c = void 0;break;case 91:
                v = g[0], g.unshift(v[c || v.length] = []), c = void 0;break;case 93:
                g.shift();break;case 102:
                (v = g[0])[c || v.length] = !1, c = void 0;break;case 110:
                (v = g[0])[c || v.length] = null, c = void 0;break;case 116:
                (v = g[0])[c || v.length] = !0, c = void 0;break;case 123:
                v = g[0], g.unshift(v[c || v.length] = {}), c = void 0;break;case 125:
                g.shift();}
          }if (f) {
            if (1 !== g.length) throw new Error();u = u[0];
          } else if (g.length) throw new Error();if (a) {
            u = function t(e, n) {
              var i = e[n];if (i && "object" === (void 0 === i ? "undefined" : r(i))) {
                var o = null;for (var u in i) {
                  if (s.call(i, u) && i !== e) {
                    var c = t(i, u);void 0 !== c ? i[u] = c : (o || (o = []), o.push(u));
                  }
                }if (o) for (var h = o.length; --h >= 0;) {
                  delete i[o[h]];
                }
              }return a.call(e, n, i);
            }({ "": u }, "");
          }return u;
        };
      }();void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.asn1 && br.asn1 || (br.asn1 = {}), br.asn1.ASN1Util = new function () {
        this.integerToByteHex = function (t) {
          var e = t.toString(16);return e.length % 2 == 1 && (e = "0" + e), e;
        }, this.bigIntToMinTwosComplementsHex = function (t) {
          var e = t.toString(16);if ("-" != e.substr(0, 1)) e.length % 2 == 1 ? e = "0" + e : e.match(/^[0-7]/) || (e = "00" + e);else {
            var r = e.substr(1).length;r % 2 == 1 ? r += 1 : e.match(/^[0-7]/) || (r += 2);for (var n = "", i = 0; i < r; i++) {
              n += "f";
            }e = new F(n, 16).xor(t).add(F.ONE).toString(16).replace(/^-/, "");
          }return e;
        }, this.getPEMStringFromHex = function (t, e) {
          return Mr(t, e);
        }, this.newObject = function (t) {
          var e = br.asn1,
              r = e.ASN1Object,
              n = e.DERBoolean,
              i = e.DERInteger,
              o = e.DERBitString,
              s = e.DEROctetString,
              a = e.DERNull,
              u = e.DERObjectIdentifier,
              c = e.DEREnumerated,
              h = e.DERUTF8String,
              l = e.DERNumericString,
              f = e.DERPrintableString,
              g = e.DERTeletexString,
              d = e.DERIA5String,
              p = e.DERUTCTime,
              v = e.DERGeneralizedTime,
              y = e.DERVisibleString,
              m = e.DERBMPString,
              _ = e.DERSequence,
              S = e.DERSet,
              b = e.DERTaggedObject,
              w = e.ASN1Util.newObject;if (t instanceof e.ASN1Object) return t;var F = Object.keys(t);if (1 != F.length) throw new Error("key of param shall be only one.");var E = F[0];if (-1 == ":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":" + E + ":")) throw new Error("undefined key: " + E);if ("bool" == E) return new n(t[E]);if ("int" == E) return new i(t[E]);if ("bitstr" == E) return new o(t[E]);if ("octstr" == E) return new s(t[E]);if ("null" == E) return new a(t[E]);if ("oid" == E) return new u(t[E]);if ("enum" == E) return new c(t[E]);if ("utf8str" == E) return new h(t[E]);if ("numstr" == E) return new l(t[E]);if ("prnstr" == E) return new f(t[E]);if ("telstr" == E) return new g(t[E]);if ("ia5str" == E) return new d(t[E]);if ("utctime" == E) return new p(t[E]);if ("gentime" == E) return new v(t[E]);if ("visstr" == E) return new y(t[E]);if ("bmpstr" == E) return new m(t[E]);if ("asn1" == E) return new r(t[E]);if ("seq" == E) {
            for (var x = t[E], k = [], A = 0; A < x.length; A++) {
              var P = w(x[A]);k.push(P);
            }return new _({ array: k });
          }if ("set" == E) {
            for (x = t[E], k = [], A = 0; A < x.length; A++) {
              P = w(x[A]);k.push(P);
            }return new S({ array: k });
          }if ("tag" == E) {
            var C = t[E];if ("[object Array]" === Object.prototype.toString.call(C) && 3 == C.length) {
              var T = w(C[2]);return new b({ tag: C[0], explicit: C[1], obj: T });
            }return new b(C);
          }
        }, this.jsonToASN1HEX = function (t) {
          return this.newObject(t).getEncodedHex();
        };
      }(), br.asn1.ASN1Util.oidHexToInt = function (t) {
        for (var e = "", r = parseInt(t.substr(0, 2), 16), n = (e = Math.floor(r / 40) + "." + r % 40, ""), i = 2; i < t.length; i += 2) {
          var o = ("00000000" + parseInt(t.substr(i, 2), 16).toString(2)).slice(-8);if (n += o.substr(1, 7), "0" == o.substr(0, 1)) e = e + "." + new F(n, 2).toString(10), n = "";
        }return e;
      }, br.asn1.ASN1Util.oidIntToHex = function (t) {
        var e = function t(e) {
          var r = e.toString(16);return 1 == r.length && (r = "0" + r), r;
        },
            r = function t(r) {
          var n = "",
              i = new F(r, 10).toString(2),
              o = 7 - i.length % 7;7 == o && (o = 0);for (var s = "", a = 0; a < o; a++) {
            s += "0";
          }i = s + i;for (a = 0; a < i.length - 1; a += 7) {
            var u = i.substr(a, 7);a != i.length - 7 && (u = "1" + u), n += e(parseInt(u, 2));
          }return n;
        };if (!t.match(/^[0-9.]+$/)) throw "malformed oid string: " + t;var n = "",
            i = t.split("."),
            o = 40 * parseInt(i[0]) + parseInt(i[1]);n += e(o), i.splice(0, 2);for (var s = 0; s < i.length; s++) {
          n += r(i[s]);
        }return n;
      }, br.asn1.ASN1Object = function (t) {
        this.params = null, this.getLengthHexFromValue = function () {
          if (void 0 === this.hV || null == this.hV) throw new Error("this.hV is null or undefined");if (this.hV.length % 2 == 1) throw new Error("value hex must be even length: n=" + "".length + ",v=" + this.hV);var t = this.hV.length / 2,
              e = t.toString(16);if (e.length % 2 == 1 && (e = "0" + e), t < 128) return e;var r = e.length / 2;if (r > 15) throw "ASN.1 length too long to represent by 8x: n = " + t.toString(16);return (128 + r).toString(16) + e;
        }, this.getEncodedHex = function () {
          return (null == this.hTLV || this.isModified) && (this.hV = this.getFreshValueHex(), this.hL = this.getLengthHexFromValue(), this.hTLV = this.hT + this.hL + this.hV, this.isModified = !1), this.hTLV;
        }, this.getValueHex = function () {
          return this.getEncodedHex(), this.hV;
        }, this.getFreshValueHex = function () {
          return "";
        }, this.setByParam = function (t) {
          this.params = t;
        }, null != t && null != t.tlv && (this.hTLV = t.tlv, this.isModified = !1);
      }, br.asn1.DERAbstractString = function (t) {
        br.asn1.DERAbstractString.superclass.constructor.call(this);this.getString = function () {
          return this.s;
        }, this.setString = function (t) {
          this.hTLV = null, this.isModified = !0, this.s = t, this.hV = Dr(this.s).toLowerCase();
        }, this.setStringHex = function (t) {
          this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, void 0 !== t && ("string" == typeof t ? this.setString(t) : void 0 !== t.str ? this.setString(t.str) : void 0 !== t.hex && this.setStringHex(t.hex));
      }, o.lang.extend(br.asn1.DERAbstractString, br.asn1.ASN1Object), br.asn1.DERAbstractTime = function (t) {
        br.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC = function (t) {
          var e = t.getTime() + 6e4 * t.getTimezoneOffset();return new Date(e);
        }, this.formatDate = function (t, e, r) {
          var n = this.zeroPadding,
              i = this.localDateToUTC(t),
              o = String(i.getFullYear());"utc" == e && (o = o.substr(2, 2));var s = o + n(String(i.getMonth() + 1), 2) + n(String(i.getDate()), 2) + n(String(i.getHours()), 2) + n(String(i.getMinutes()), 2) + n(String(i.getSeconds()), 2);if (!0 === r) {
            var a = i.getMilliseconds();if (0 != a) {
              var u = n(String(a), 3);s = s + "." + (u = u.replace(/[0]+$/, ""));
            }
          }return s + "Z";
        }, this.zeroPadding = function (t, e) {
          return t.length >= e ? t : new Array(e - t.length + 1).join("0") + t;
        }, this.getString = function () {
          return this.s;
        }, this.setString = function (t) {
          this.hTLV = null, this.isModified = !0, this.s = t, this.hV = Pr(t);
        }, this.setByDateValue = function (t, e, r, n, i, o) {
          var s = new Date(Date.UTC(t, e - 1, r, n, i, o, 0));this.setByDate(s);
        }, this.getFreshValueHex = function () {
          return this.hV;
        };
      }, o.lang.extend(br.asn1.DERAbstractTime, br.asn1.ASN1Object), br.asn1.DERAbstractStructured = function (t) {
        br.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray = function (t) {
          this.hTLV = null, this.isModified = !0, this.asn1Array = t;
        }, this.appendASN1Object = function (t) {
          this.hTLV = null, this.isModified = !0, this.asn1Array.push(t);
        }, this.asn1Array = new Array(), void 0 !== t && void 0 !== t.array && (this.asn1Array = t.array);
      }, o.lang.extend(br.asn1.DERAbstractStructured, br.asn1.ASN1Object), br.asn1.DERBoolean = function (t) {
        br.asn1.DERBoolean.superclass.constructor.call(this), this.hT = "01", this.hTLV = 0 == t ? "010100" : "0101ff";
      }, o.lang.extend(br.asn1.DERBoolean, br.asn1.ASN1Object), br.asn1.DERInteger = function (t) {
        br.asn1.DERInteger.superclass.constructor.call(this), this.hT = "02", this.setByBigInteger = function (t) {
          this.hTLV = null, this.isModified = !0, this.hV = br.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);
        }, this.setByInteger = function (t) {
          var e = new F(String(t), 10);this.setByBigInteger(e);
        }, this.setValueHex = function (t) {
          this.hV = t;
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, void 0 !== t && (void 0 !== t.bigint ? this.setByBigInteger(t.bigint) : void 0 !== t.int ? this.setByInteger(t.int) : "number" == typeof t ? this.setByInteger(t) : void 0 !== t.hex && this.setValueHex(t.hex));
      }, o.lang.extend(br.asn1.DERInteger, br.asn1.ASN1Object), br.asn1.DERBitString = function (t) {
        if (void 0 !== t && void 0 !== t.obj) {
          var e = br.asn1.ASN1Util.newObject(t.obj);t.hex = "00" + e.getEncodedHex();
        }br.asn1.DERBitString.superclass.constructor.call(this), this.hT = "03", this.setHexValueIncludingUnusedBits = function (t) {
          this.hTLV = null, this.isModified = !0, this.hV = t;
        }, this.setUnusedBitsAndHexValue = function (t, e) {
          if (t < 0 || 7 < t) throw "unused bits shall be from 0 to 7: u = " + t;var r = "0" + t;this.hTLV = null, this.isModified = !0, this.hV = r + e;
        }, this.setByBinaryString = function (t) {
          var e = 8 - (t = t.replace(/0+$/, "")).length % 8;8 == e && (e = 0);for (var r = 0; r <= e; r++) {
            t += "0";
          }var n = "";for (r = 0; r < t.length - 1; r += 8) {
            var i = t.substr(r, 8),
                o = parseInt(i, 2).toString(16);1 == o.length && (o = "0" + o), n += o;
          }this.hTLV = null, this.isModified = !0, this.hV = "0" + e + n;
        }, this.setByBooleanArray = function (t) {
          for (var e = "", r = 0; r < t.length; r++) {
            1 == t[r] ? e += "1" : e += "0";
          }this.setByBinaryString(e);
        }, this.newFalseArray = function (t) {
          for (var e = new Array(t), r = 0; r < t; r++) {
            e[r] = !1;
          }return e;
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, void 0 !== t && ("string" == typeof t && t.toLowerCase().match(/^[0-9a-f]+$/) ? this.setHexValueIncludingUnusedBits(t) : void 0 !== t.hex ? this.setHexValueIncludingUnusedBits(t.hex) : void 0 !== t.bin ? this.setByBinaryString(t.bin) : void 0 !== t.array && this.setByBooleanArray(t.array));
      }, o.lang.extend(br.asn1.DERBitString, br.asn1.ASN1Object), br.asn1.DEROctetString = function (t) {
        if (void 0 !== t && void 0 !== t.obj) {
          var e = br.asn1.ASN1Util.newObject(t.obj);t.hex = e.getEncodedHex();
        }br.asn1.DEROctetString.superclass.constructor.call(this, t), this.hT = "04";
      }, o.lang.extend(br.asn1.DEROctetString, br.asn1.DERAbstractString), br.asn1.DERNull = function () {
        br.asn1.DERNull.superclass.constructor.call(this), this.hT = "05", this.hTLV = "0500";
      }, o.lang.extend(br.asn1.DERNull, br.asn1.ASN1Object), br.asn1.DERObjectIdentifier = function (t) {
        br.asn1.DERObjectIdentifier.superclass.constructor.call(this), this.hT = "06", this.setValueHex = function (t) {
          this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;
        }, this.setValueOidString = function (t) {
          var e = function r(t) {
            var e = function t(e) {
              var r = e.toString(16);return 1 == r.length && (r = "0" + r), r;
            },
                r = function t(r) {
              var n = "",
                  i = parseInt(r, 10).toString(2),
                  o = 7 - i.length % 7;7 == o && (o = 0);for (var s = "", a = 0; a < o; a++) {
                s += "0";
              }i = s + i;for (a = 0; a < i.length - 1; a += 7) {
                var u = i.substr(a, 7);a != i.length - 7 && (u = "1" + u), n += e(parseInt(u, 2));
              }return n;
            };try {
              if (!t.match(/^[0-9.]+$/)) return null;var n = "",
                  i = t.split("."),
                  o = 40 * parseInt(i[0], 10) + parseInt(i[1], 10);n += e(o), i.splice(0, 2);for (var s = 0; s < i.length; s++) {
                n += r(i[s]);
              }return n;
            } catch (t) {
              return null;
            }
          }(t);if (null == e) throw new Error("malformed oid string: " + t);this.hTLV = null, this.isModified = !0, this.s = null, this.hV = e;
        }, this.setValueName = function (t) {
          var e = br.asn1.x509.OID.name2oid(t);if ("" === e) throw new Error("DERObjectIdentifier oidName undefined: " + t);this.setValueOidString(e);
        }, this.setValueNameOrOid = function (t) {
          t.match(/^[0-2].[0-9.]+$/) ? this.setValueOidString(t) : this.setValueName(t);
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, this.setByParam = function (t) {
          "string" == typeof t ? this.setValueNameOrOid(t) : void 0 !== t.oid ? this.setValueNameOrOid(t.oid) : void 0 !== t.name ? this.setValueNameOrOid(t.name) : void 0 !== t.hex && this.setValueHex(t.hex);
        }, void 0 !== t && this.setByParam(t);
      }, o.lang.extend(br.asn1.DERObjectIdentifier, br.asn1.ASN1Object), br.asn1.DEREnumerated = function (t) {
        br.asn1.DEREnumerated.superclass.constructor.call(this), this.hT = "0a", this.setByBigInteger = function (t) {
          this.hTLV = null, this.isModified = !0, this.hV = br.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);
        }, this.setByInteger = function (t) {
          var e = new F(String(t), 10);this.setByBigInteger(e);
        }, this.setValueHex = function (t) {
          this.hV = t;
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, void 0 !== t && (void 0 !== t.int ? this.setByInteger(t.int) : "number" == typeof t ? this.setByInteger(t) : void 0 !== t.hex && this.setValueHex(t.hex));
      }, o.lang.extend(br.asn1.DEREnumerated, br.asn1.ASN1Object), br.asn1.DERUTF8String = function (t) {
        br.asn1.DERUTF8String.superclass.constructor.call(this, t), this.hT = "0c";
      }, o.lang.extend(br.asn1.DERUTF8String, br.asn1.DERAbstractString), br.asn1.DERNumericString = function (t) {
        br.asn1.DERNumericString.superclass.constructor.call(this, t), this.hT = "12";
      }, o.lang.extend(br.asn1.DERNumericString, br.asn1.DERAbstractString), br.asn1.DERPrintableString = function (t) {
        br.asn1.DERPrintableString.superclass.constructor.call(this, t), this.hT = "13";
      }, o.lang.extend(br.asn1.DERPrintableString, br.asn1.DERAbstractString), br.asn1.DERTeletexString = function (t) {
        br.asn1.DERTeletexString.superclass.constructor.call(this, t), this.hT = "14";
      }, o.lang.extend(br.asn1.DERTeletexString, br.asn1.DERAbstractString), br.asn1.DERIA5String = function (t) {
        br.asn1.DERIA5String.superclass.constructor.call(this, t), this.hT = "16";
      }, o.lang.extend(br.asn1.DERIA5String, br.asn1.DERAbstractString), br.asn1.DERVisibleString = function (t) {
        br.asn1.DERIA5String.superclass.constructor.call(this, t), this.hT = "1a";
      }, o.lang.extend(br.asn1.DERVisibleString, br.asn1.DERAbstractString), br.asn1.DERBMPString = function (t) {
        br.asn1.DERBMPString.superclass.constructor.call(this, t), this.hT = "1e";
      }, o.lang.extend(br.asn1.DERBMPString, br.asn1.DERAbstractString), br.asn1.DERUTCTime = function (t) {
        br.asn1.DERUTCTime.superclass.constructor.call(this, t), this.hT = "17", this.setByDate = function (t) {
          this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, "utc"), this.hV = Pr(this.s);
        }, this.getFreshValueHex = function () {
          return void 0 === this.date && void 0 === this.s && (this.date = new Date(), this.s = this.formatDate(this.date, "utc"), this.hV = Pr(this.s)), this.hV;
        }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : "string" == typeof t && t.match(/^[0-9]{12}Z$/) ? this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date));
      }, o.lang.extend(br.asn1.DERUTCTime, br.asn1.DERAbstractTime), br.asn1.DERGeneralizedTime = function (t) {
        br.asn1.DERGeneralizedTime.superclass.constructor.call(this, t), this.hT = "18", this.withMillis = !1, this.setByDate = function (t) {
          this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, "gen", this.withMillis), this.hV = Pr(this.s);
        }, this.getFreshValueHex = function () {
          return void 0 === this.date && void 0 === this.s && (this.date = new Date(), this.s = this.formatDate(this.date, "gen", this.withMillis), this.hV = Pr(this.s)), this.hV;
        }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : "string" == typeof t && t.match(/^[0-9]{14}Z$/) ? this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date), !0 === t.millis && (this.withMillis = !0));
      }, o.lang.extend(br.asn1.DERGeneralizedTime, br.asn1.DERAbstractTime), br.asn1.DERSequence = function (t) {
        br.asn1.DERSequence.superclass.constructor.call(this, t), this.hT = "30", this.getFreshValueHex = function () {
          for (var t = "", e = 0; e < this.asn1Array.length; e++) {
            t += this.asn1Array[e].getEncodedHex();
          }return this.hV = t, this.hV;
        };
      }, o.lang.extend(br.asn1.DERSequence, br.asn1.DERAbstractStructured), br.asn1.DERSet = function (t) {
        br.asn1.DERSet.superclass.constructor.call(this, t), this.hT = "31", this.sortFlag = !0, this.getFreshValueHex = function () {
          for (var t = new Array(), e = 0; e < this.asn1Array.length; e++) {
            var r = this.asn1Array[e];t.push(r.getEncodedHex());
          }return 1 == this.sortFlag && t.sort(), this.hV = t.join(""), this.hV;
        }, void 0 !== t && void 0 !== t.sortflag && 0 == t.sortflag && (this.sortFlag = !1);
      }, o.lang.extend(br.asn1.DERSet, br.asn1.DERAbstractStructured), br.asn1.DERTaggedObject = function (t) {
        br.asn1.DERTaggedObject.superclass.constructor.call(this);var e = br.asn1;this.hT = "a0", this.hV = "", this.isExplicit = !0, this.asn1Object = null, this.setASN1Object = function (t, e, r) {
          this.hT = e, this.isExplicit = t, this.asn1Object = r, this.isExplicit ? (this.hV = this.asn1Object.getEncodedHex(), this.hTLV = null, this.isModified = !0) : (this.hV = null, this.hTLV = r.getEncodedHex(), this.hTLV = this.hTLV.replace(/^../, e), this.isModified = !1);
        }, this.getFreshValueHex = function () {
          return this.hV;
        }, this.setByParam = function (t) {
          null != t.tag && (this.hT = t.tag), null != t.explicit && (this.isExplicit = t.explicit), null != t.tage && (this.hT = t.tage, this.isExplicit = !0), null != t.tagi && (this.hT = t.tagi, this.isExplicit = !1), null != t.obj && (t.obj instanceof e.ASN1Object ? (this.asn1Object = t.obj, this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)) : "object" == r(t.obj) && (this.asn1Object = e.ASN1Util.newObject(t.obj), this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)));
        }, null != t && this.setByParam(t);
      }, o.lang.extend(br.asn1.DERTaggedObject, br.asn1.ASN1Object);var br,
          wr,
          Fr,
          Er = new function () {}();function xr(t) {
        for (var e = new Array(), r = 0; r < t.length; r++) {
          e[r] = t.charCodeAt(r);
        }return e;
      }function kr(t) {
        for (var e = "", r = 0; r < t.length; r++) {
          e += String.fromCharCode(t[r]);
        }return e;
      }function Ar(t) {
        for (var e = "", r = 0; r < t.length; r++) {
          var n = t[r].toString(16);1 == n.length && (n = "0" + n), e += n;
        }return e;
      }function Pr(t) {
        return Ar(xr(t));
      }function Cr(t) {
        return t = (t = (t = t.replace(/\=/g, "")).replace(/\+/g, "-")).replace(/\//g, "_");
      }function Tr(t) {
        return t.length % 4 == 2 ? t += "==" : t.length % 4 == 3 && (t += "="), t = (t = t.replace(/-/g, "+")).replace(/_/g, "/");
      }function Rr(t) {
        return t.length % 2 == 1 && (t = "0" + t), Cr(S(t));
      }function Ir(t) {
        return b(Tr(t));
      }function Dr(t) {
        return qr(Gr(t));
      }function Lr(t) {
        return decodeURIComponent(Jr(t));
      }function Nr(t) {
        for (var e = "", r = 0; r < t.length - 1; r += 2) {
          e += String.fromCharCode(parseInt(t.substr(r, 2), 16));
        }return e;
      }function Ur(t) {
        for (var e = "", r = 0; r < t.length; r++) {
          e += ("0" + t.charCodeAt(r).toString(16)).slice(-2);
        }return e;
      }function Br(t) {
        return S(t);
      }function Or(t) {
        var e = Br(t).replace(/(.{64})/g, "$1\r\n");return e = e.replace(/\r\n$/, "");
      }function jr(t) {
        return b(t.replace(/[^0-9A-Za-z\/+=]*/g, ""));
      }function Mr(t, e) {
        return "-----BEGIN " + e + "-----\r\n" + Or(t) + "\r\n-----END " + e + "-----\r\n";
      }function Hr(t, e) {
        if (-1 == t.indexOf("-----BEGIN ")) throw "can't find PEM header: " + e;return jr(t = void 0 !== e ? (t = t.replace(new RegExp("^[^]*-----BEGIN " + e + "-----"), "")).replace(new RegExp("-----END " + e + "-----[^]*$"), "") : (t = t.replace(/^[^]*-----BEGIN [^-]+-----/, "")).replace(/-----END [^-]+-----[^]*$/, ""));
      }function Vr(t) {
        var e, r, n, i, o, s, a, u, c, h, l;if (l = t.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/)) return u = l[1], e = parseInt(u), 2 === u.length && (50 <= e && e < 100 ? e = 1900 + e : 0 <= e && e < 50 && (e = 2e3 + e)), r = parseInt(l[2]) - 1, n = parseInt(l[3]), i = parseInt(l[4]), o = parseInt(l[5]), s = parseInt(l[6]), a = 0, "" !== (c = l[7]) && (h = (c.substr(1) + "00").substr(0, 3), a = parseInt(h)), Date.UTC(e, r, n, i, o, s, a);throw "unsupported zulu format: " + t;
      }function Kr(t) {
        return ~~(Vr(t) / 1e3);
      }function qr(t) {
        return t.replace(/%/g, "");
      }function Jr(t) {
        return t.replace(/(..)/g, "%$1");
      }function Wr(t) {
        var e = "malformed IPv6 address";if (!t.match(/^[0-9A-Fa-f:]+$/)) throw e;var r = (t = t.toLowerCase()).split(":").length - 1;if (r < 2) throw e;var n = ":".repeat(7 - r + 2),
            i = (t = t.replace("::", n)).split(":");if (8 != i.length) throw e;for (var o = 0; o < 8; o++) {
          i[o] = ("0000" + i[o]).slice(-4);
        }return i.join("");
      }function zr(t) {
        if (!t.match(/^[0-9A-Fa-f]{32}$/)) throw "malformed IPv6 address octet";for (var e = (t = t.toLowerCase()).match(/.{1,4}/g), r = 0; r < 8; r++) {
          e[r] = e[r].replace(/^0+/, ""), "" == e[r] && (e[r] = "0");
        }var n = (t = ":" + e.join(":") + ":").match(/:(0:){2,}/g);if (null === n) return t.slice(1, -1);var i = "";for (r = 0; r < n.length; r++) {
          n[r].length > i.length && (i = n[r]);
        }return (t = t.replace(i, "::")).slice(1, -1);
      }function Yr(t) {
        var e = "malformed hex value";if (!t.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) throw e;if (8 != t.length) return 32 == t.length ? zr(t) : t;try {
          return parseInt(t.substr(0, 2), 16) + "." + parseInt(t.substr(2, 2), 16) + "." + parseInt(t.substr(4, 2), 16) + "." + parseInt(t.substr(6, 2), 16);
        } catch (t) {
          throw e;
        }
      }function Gr(t) {
        for (var e = encodeURIComponent(t), r = "", n = 0; n < e.length; n++) {
          "%" == e[n] ? (r += e.substr(n, 3), n += 2) : r = r + "%" + Pr(e[n]);
        }return r;
      }function Xr(t) {
        return !(t.length % 2 != 0 || !t.match(/^[0-9a-f]+$/) && !t.match(/^[0-9A-F]+$/));
      }function $r(t) {
        return t.length % 2 == 1 ? "0" + t : t.substr(0, 1) > "7" ? "00" + t : t;
      }Er.getLblen = function (t, e) {
        if ("8" != t.substr(e + 2, 1)) return 1;var r = parseInt(t.substr(e + 3, 1));return 0 == r ? -1 : 0 < r && r < 10 ? r + 1 : -2;
      }, Er.getL = function (t, e) {
        var r = Er.getLblen(t, e);return r < 1 ? "" : t.substr(e + 2, 2 * r);
      }, Er.getVblen = function (t, e) {
        var r;return "" == (r = Er.getL(t, e)) ? -1 : ("8" === r.substr(0, 1) ? new F(r.substr(2), 16) : new F(r, 16)).intValue();
      }, Er.getVidx = function (t, e) {
        var r = Er.getLblen(t, e);return r < 0 ? r : e + 2 * (r + 1);
      }, Er.getV = function (t, e) {
        var r = Er.getVidx(t, e),
            n = Er.getVblen(t, e);return t.substr(r, 2 * n);
      }, Er.getTLV = function (t, e) {
        return t.substr(e, 2) + Er.getL(t, e) + Er.getV(t, e);
      }, Er.getTLVblen = function (t, e) {
        return 2 + 2 * Er.getLblen(t, e) + 2 * Er.getVblen(t, e);
      }, Er.getNextSiblingIdx = function (t, e) {
        return Er.getVidx(t, e) + 2 * Er.getVblen(t, e);
      }, Er.getChildIdx = function (t, e) {
        var r,
            n,
            i,
            o = Er,
            s = [];r = o.getVidx(t, e), n = 2 * o.getVblen(t, e), "03" == t.substr(e, 2) && (r += 2, n -= 2), i = 0;for (var a = r; i <= n;) {
          var u = o.getTLVblen(t, a);if ((i += u) <= n && s.push(a), a += u, i >= n) break;
        }return s;
      }, Er.getNthChildIdx = function (t, e, r) {
        return Er.getChildIdx(t, e)[r];
      }, Er.getIdxbyList = function (t, e, r, n) {
        var i,
            o,
            s = Er;return 0 == r.length ? void 0 !== n && t.substr(e, 2) !== n ? -1 : e : (i = r.shift()) >= (o = s.getChildIdx(t, e)).length ? -1 : s.getIdxbyList(t, o[i], r, n);
      }, Er.getIdxbyListEx = function (t, e, r, n) {
        var i,
            o,
            s = Er;if (0 == r.length) return void 0 !== n && t.substr(e, 2) !== n ? -1 : e;i = r.shift(), o = s.getChildIdx(t, e);for (var a = 0, u = 0; u < o.length; u++) {
          var c = t.substr(o[u], 2);if ("number" == typeof i && !s.isContextTag(c) && a == i || "string" == typeof i && s.isContextTag(c, i)) return s.getIdxbyListEx(t, o[u], r, n);s.isContextTag(c) || a++;
        }return -1;
      }, Er.getTLVbyList = function (t, e, r, n) {
        var i = Er,
            o = i.getIdxbyList(t, e, r, n);return -1 == o || o >= t.length ? null : i.getTLV(t, o);
      }, Er.getTLVbyListEx = function (t, e, r, n) {
        var i = Er,
            o = i.getIdxbyListEx(t, e, r, n);return -1 == o ? null : i.getTLV(t, o);
      }, Er.getVbyList = function (t, e, r, n, i) {
        var o,
            s,
            a = Er;return -1 == (o = a.getIdxbyList(t, e, r, n)) || o >= t.length ? null : (s = a.getV(t, o), !0 === i && (s = s.substr(2)), s);
      }, Er.getVbyListEx = function (t, e, r, n, i) {
        var o,
            s,
            a = Er;return -1 == (o = a.getIdxbyListEx(t, e, r, n)) ? null : (s = a.getV(t, o), "03" == t.substr(o, 2) && !1 !== i && (s = s.substr(2)), s);
      }, Er.getInt = function (t, e, r) {
        null == r && (r = -1);try {
          var n = t.substr(e, 2);if ("02" != n && "03" != n) return r;var i = Er.getV(t, e);return "02" == n ? parseInt(i, 16) : function o(t) {
            try {
              var e = t.substr(0, 2);if ("00" == e) return parseInt(t.substr(2), 16);var r = parseInt(e, 16),
                  n = t.substr(2),
                  i = parseInt(n, 16).toString(2);return "0" == i && (i = "00000000"), i = i.slice(0, 0 - r), parseInt(i, 2);
            } catch (t) {
              return -1;
            }
          }(i);
        } catch (t) {
          return r;
        }
      }, Er.getOID = function (t, e, r) {
        null == r && (r = null);try {
          return "06" != t.substr(e, 2) ? r : function n(t) {
            if (!Xr(t)) return null;try {
              var e = [],
                  r = t.substr(0, 2),
                  n = parseInt(r, 16);e[0] = new String(Math.floor(n / 40)), e[1] = new String(n % 40);for (var i = t.substr(2), o = [], s = 0; s < i.length / 2; s++) {
                o.push(parseInt(i.substr(2 * s, 2), 16));
              }var a = [],
                  u = "";for (s = 0; s < o.length; s++) {
                128 & o[s] ? u += Qr((127 & o[s]).toString(2), 7) : (u += Qr((127 & o[s]).toString(2), 7), a.push(new String(parseInt(u, 2))), u = "");
              }var c = e.join(".");return a.length > 0 && (c = c + "." + a.join(".")), c;
            } catch (t) {
              return null;
            }
          }(Er.getV(t, e));
        } catch (t) {
          return r;
        }
      }, Er.getOIDName = function (t, e, r) {
        null == r && (r = null);try {
          var n = Er.getOID(t, e, r);if (n == r) return r;var i = br.asn1.x509.OID.oid2name(n);return "" == i ? n : i;
        } catch (t) {
          return r;
        }
      }, Er.getString = function (t, e, r) {
        null == r && (r = null);try {
          return Nr(Er.getV(t, e));
        } catch (t) {
          return r;
        }
      }, Er.hextooidstr = function (t) {
        var e = function t(e, r) {
          return e.length >= r ? e : new Array(r - e.length + 1).join("0") + e;
        },
            r = [],
            n = t.substr(0, 2),
            i = parseInt(n, 16);r[0] = new String(Math.floor(i / 40)), r[1] = new String(i % 40);for (var o = t.substr(2), s = [], a = 0; a < o.length / 2; a++) {
          s.push(parseInt(o.substr(2 * a, 2), 16));
        }var u = [],
            c = "";for (a = 0; a < s.length; a++) {
          128 & s[a] ? c += e((127 & s[a]).toString(2), 7) : (c += e((127 & s[a]).toString(2), 7), u.push(new String(parseInt(c, 2))), c = "");
        }var h = r.join(".");return u.length > 0 && (h = h + "." + u.join(".")), h;
      }, Er.dump = function (t, e, r, n) {
        var i = Er,
            o = i.getV,
            s = i.dump,
            a = i.getChildIdx,
            u = t;t instanceof br.asn1.ASN1Object && (u = t.getEncodedHex());var c = function t(e, r) {
          return e.length <= 2 * r ? e : e.substr(0, r) + "..(total " + e.length / 2 + "bytes).." + e.substr(e.length - r, r);
        };void 0 === e && (e = { ommit_long_octet: 32 }), void 0 === r && (r = 0), void 0 === n && (n = "");var h,
            l = e.ommit_long_octet;if ("01" == (h = u.substr(r, 2))) return "00" == (f = o(u, r)) ? n + "BOOLEAN FALSE\n" : n + "BOOLEAN TRUE\n";if ("02" == h) return n + "INTEGER " + c(f = o(u, r), l) + "\n";if ("03" == h) {
          var f = o(u, r);if (i.isASN1HEX(f.substr(2))) {
            var g = n + "BITSTRING, encapsulates\n";return g += s(f.substr(2), e, 0, n + "  ");
          }return n + "BITSTRING " + c(f, l) + "\n";
        }if ("04" == h) {
          f = o(u, r);if (i.isASN1HEX(f)) {
            g = n + "OCTETSTRING, encapsulates\n";return g += s(f, e, 0, n + "  ");
          }return n + "OCTETSTRING " + c(f, l) + "\n";
        }if ("05" == h) return n + "NULL\n";if ("06" == h) {
          var d = o(u, r),
              p = br.asn1.ASN1Util.oidHexToInt(d),
              v = br.asn1.x509.OID.oid2name(p),
              y = p.replace(/\./g, " ");return "" != v ? n + "ObjectIdentifier " + v + " (" + y + ")\n" : n + "ObjectIdentifier (" + y + ")\n";
        }if ("0a" == h) return n + "ENUMERATED " + parseInt(o(u, r)) + "\n";if ("0c" == h) return n + "UTF8String '" + Lr(o(u, r)) + "'\n";if ("13" == h) return n + "PrintableString '" + Lr(o(u, r)) + "'\n";if ("14" == h) return n + "TeletexString '" + Lr(o(u, r)) + "'\n";if ("16" == h) return n + "IA5String '" + Lr(o(u, r)) + "'\n";if ("17" == h) return n + "UTCTime " + Lr(o(u, r)) + "\n";if ("18" == h) return n + "GeneralizedTime " + Lr(o(u, r)) + "\n";if ("1a" == h) return n + "VisualString '" + Lr(o(u, r)) + "'\n";if ("1e" == h) return n + "BMPString '" + Lr(o(u, r)) + "'\n";if ("30" == h) {
          if ("3000" == u.substr(r, 4)) return n + "SEQUENCE {}\n";g = n + "SEQUENCE\n";var m = e;if ((2 == (b = a(u, r)).length || 3 == b.length) && "06" == u.substr(b[0], 2) && "04" == u.substr(b[b.length - 1], 2)) {
            v = i.oidname(o(u, b[0]));var _ = JSON.parse(JSON.stringify(e));_.x509ExtName = v, m = _;
          }for (var S = 0; S < b.length; S++) {
            g += s(u, m, b[S], n + "  ");
          }return g;
        }if ("31" == h) {
          g = n + "SET\n";var b = a(u, r);for (S = 0; S < b.length; S++) {
            g += s(u, e, b[S], n + "  ");
          }return g;
        }if (0 != (128 & (h = parseInt(h, 16)))) {
          var w = 31 & h;if (0 != (32 & h)) {
            for (g = n + "[" + w + "]\n", b = a(u, r), S = 0; S < b.length; S++) {
              g += s(u, e, b[S], n + "  ");
            }return g;
          }f = o(u, r);if (Er.isASN1HEX(f)) {
            var g = n + "[" + w + "]\n";return g += s(f, e, 0, n + "  ");
          }return ("68747470" == f.substr(0, 8) || "subjectAltName" === e.x509ExtName && 2 == w) && (f = Lr(f)), g = n + "[" + w + "] " + f + "\n";
        }return n + "UNKNOWN(" + h + ") " + o(u, r) + "\n";
      }, Er.isContextTag = function (t, e) {
        var r, n;t = t.toLowerCase();try {
          r = parseInt(t, 16);
        } catch (t) {
          return -1;
        }if (void 0 === e) return 128 == (192 & r);try {
          return null != e.match(/^\[[0-9]+\]$/) && !((n = parseInt(e.substr(1, e.length - 1), 10)) > 31) && 128 == (192 & r) && (31 & r) == n;
        } catch (t) {
          return !1;
        }
      }, Er.isASN1HEX = function (t) {
        var e = Er;if (t.length % 2 == 1) return !1;var r = e.getVblen(t, 0),
            n = t.substr(0, 2),
            i = e.getL(t, 0);return t.length - n.length - i.length == 2 * r;
      }, Er.checkStrictDER = function (t, e, r, n, i) {
        var o = Er;if (void 0 === r) {
          if ("string" != typeof t) throw new Error("not hex string");if (t = t.toLowerCase(), !br.lang.String.isHex(t)) throw new Error("not hex string");r = t.length, i = (n = t.length / 2) < 128 ? 1 : Math.ceil(n.toString(16)) + 1;
        }if (o.getL(t, e).length > 2 * i) throw new Error("L of TLV too long: idx=" + e);var s = o.getVblen(t, e);if (s > n) throw new Error("value of L too long than hex: idx=" + e);var a = o.getTLV(t, e),
            u = a.length - 2 - o.getL(t, e).length;if (u !== 2 * s) throw new Error("V string length and L's value not the same:" + u + "/" + 2 * s);if (0 === e && t.length != a.length) throw new Error("total length and TLV length unmatch:" + t.length + "!=" + a.length);var c = t.substr(e, 2);if ("02" === c) {
          var h = o.getVidx(t, e);if ("00" == t.substr(h, 2) && t.charCodeAt(h + 2) < 56) throw new Error("not least zeros for DER INTEGER");
        }if (32 & parseInt(c, 16)) {
          for (var l = o.getVblen(t, e), f = 0, g = o.getChildIdx(t, e), d = 0; d < g.length; d++) {
            f += o.getTLV(t, g[d]).length, o.checkStrictDER(t, g[d], r, n, i);
          }if (2 * l != f) throw new Error("sum of children's TLV length and L unmatch: " + 2 * l + "!=" + f);
        }
      }, Er.oidname = function (t) {
        var e = br.asn1;br.lang.String.isHex(t) && (t = e.ASN1Util.oidHexToInt(t));var r = e.x509.OID.oid2name(t);return "" === r && (r = t), r;
      }, void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.lang && br.lang || (br.lang = {}), br.lang.String = function () {}, "function" == typeof t ? (e.utf8tob64u = wr = function e(r) {
        return Cr(t.from(r, "utf8").toString("base64"));
      }, e.b64utoutf8 = Fr = function e(r) {
        return t.from(Tr(r), "base64").toString("utf8");
      }) : (e.utf8tob64u = wr = function t(e) {
        return Rr(qr(Gr(e)));
      }, e.b64utoutf8 = Fr = function t(e) {
        return decodeURIComponent(Jr(Ir(e)));
      }), br.lang.String.isInteger = function (t) {
        return !!t.match(/^[0-9]+$/) || !!t.match(/^-[0-9]+$/);
      }, br.lang.String.isHex = function (t) {
        return Xr(t);
      }, br.lang.String.isBase64 = function (t) {
        return !(!(t = t.replace(/\s+/g, "")).match(/^[0-9A-Za-z+\/]+={0,3}$/) || t.length % 4 != 0);
      }, br.lang.String.isBase64URL = function (t) {
        return !t.match(/[+/=]/) && (t = Tr(t), br.lang.String.isBase64(t));
      }, br.lang.String.isIntegerArray = function (t) {
        return !!(t = t.replace(/\s+/g, "")).match(/^\[[0-9,]+\]$/);
      }, br.lang.String.isPrintable = function (t) {
        return null !== t.match(/^[0-9A-Za-z '()+,-./:=?]*$/);
      }, br.lang.String.isIA5 = function (t) {
        return null !== t.match(/^[\x20-\x21\x23-\x7f]*$/);
      }, br.lang.String.isMail = function (t) {
        return null !== t.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/);
      };var Qr = function t(e, r, n) {
        return null == n && (n = "0"), e.length >= r ? e : new Array(r - e.length + 1).join(n) + e;
      };void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.crypto && br.crypto || (br.crypto = {}), br.crypto.Util = new function () {
        this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" }, this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHAwithRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" }, this.CRYPTOJSMESSAGEDIGESTNAME = { md5: y.algo.MD5, sha1: y.algo.SHA1, sha224: y.algo.SHA224, sha256: y.algo.SHA256, sha384: y.algo.SHA384, sha512: y.algo.SHA512, ripemd160: y.algo.RIPEMD160 }, this.getDigestInfoHex = function (t, e) {
          if (void 0 === this.DIGESTINFOHEAD[e]) throw "alg not supported in Util.DIGESTINFOHEAD: " + e;return this.DIGESTINFOHEAD[e] + t;
        }, this.getPaddedDigestInfoHex = function (t, e, r) {
          var n = this.getDigestInfoHex(t, e),
              i = r / 4;if (n.length + 22 > i) throw "key is too short for SigAlg: keylen=" + r + "," + e;for (var o = "0001", s = "00" + n, a = "", u = i - o.length - s.length, c = 0; c < u; c += 2) {
            a += "ff";
          }return o + a + s;
        }, this.hashString = function (t, e) {
          return new br.crypto.MessageDigest({ alg: e }).digestString(t);
        }, this.hashHex = function (t, e) {
          return new br.crypto.MessageDigest({ alg: e }).digestHex(t);
        }, this.sha1 = function (t) {
          return this.hashString(t, "sha1");
        }, this.sha256 = function (t) {
          return this.hashString(t, "sha256");
        }, this.sha256Hex = function (t) {
          return this.hashHex(t, "sha256");
        }, this.sha512 = function (t) {
          return this.hashString(t, "sha512");
        }, this.sha512Hex = function (t) {
          return this.hashHex(t, "sha512");
        }, this.isKey = function (t) {
          return t instanceof He || t instanceof br.crypto.DSA || t instanceof br.crypto.ECDSA;
        };
      }(), br.crypto.Util.md5 = function (t) {
        return new br.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" }).digestString(t);
      }, br.crypto.Util.ripemd160 = function (t) {
        return new br.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" }).digestString(t);
      }, br.crypto.Util.SECURERANDOMGEN = new Oe(), br.crypto.Util.getRandomHexOfNbytes = function (t) {
        var e = new Array(t);return br.crypto.Util.SECURERANDOMGEN.nextBytes(e), Ar(e);
      }, br.crypto.Util.getRandomBigIntegerOfNbytes = function (t) {
        return new F(br.crypto.Util.getRandomHexOfNbytes(t), 16);
      }, br.crypto.Util.getRandomHexOfNbits = function (t) {
        var e = t % 8,
            r = new Array((t - e) / 8 + 1);return br.crypto.Util.SECURERANDOMGEN.nextBytes(r), r[0] = (255 << e & 255 ^ 255) & r[0], Ar(r);
      }, br.crypto.Util.getRandomBigIntegerOfNbits = function (t) {
        return new F(br.crypto.Util.getRandomHexOfNbits(t), 16);
      }, br.crypto.Util.getRandomBigIntegerZeroToMax = function (t) {
        for (var e = t.bitLength();;) {
          var r = br.crypto.Util.getRandomBigIntegerOfNbits(e);if (-1 != t.compareTo(r)) return r;
        }
      }, br.crypto.Util.getRandomBigIntegerMinToMax = function (t, e) {
        var r = t.compareTo(e);if (1 == r) throw "biMin is greater than biMax";if (0 == r) return t;var n = e.subtract(t);return br.crypto.Util.getRandomBigIntegerZeroToMax(n).add(t);
      }, br.crypto.MessageDigest = function (t) {
        this.setAlgAndProvider = function (t, e) {
          if (null !== (t = br.crypto.MessageDigest.getCanonicalAlgName(t)) && void 0 === e && (e = br.crypto.Util.DEFAULTPROVIDER[t]), -1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(t) && "cryptojs" == e) {
            try {
              this.md = br.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create();
            } catch (e) {
              throw "setAlgAndProvider hash alg set fail alg=" + t + "/" + e;
            }this.updateString = function (t) {
              this.md.update(t);
            }, this.updateHex = function (t) {
              var e = y.enc.Hex.parse(t);this.md.update(e);
            }, this.digest = function () {
              return this.md.finalize().toString(y.enc.Hex);
            }, this.digestString = function (t) {
              return this.updateString(t), this.digest();
            }, this.digestHex = function (t) {
              return this.updateHex(t), this.digest();
            };
          }if (-1 != ":sha256:".indexOf(t) && "sjcl" == e) {
            try {
              this.md = new sjcl.hash.sha256();
            } catch (e) {
              throw "setAlgAndProvider hash alg set fail alg=" + t + "/" + e;
            }this.updateString = function (t) {
              this.md.update(t);
            }, this.updateHex = function (t) {
              var e = sjcl.codec.hex.toBits(t);this.md.update(e);
            }, this.digest = function () {
              var t = this.md.finalize();return sjcl.codec.hex.fromBits(t);
            }, this.digestString = function (t) {
              return this.updateString(t), this.digest();
            }, this.digestHex = function (t) {
              return this.updateHex(t), this.digest();
            };
          }
        }, this.updateString = function (t) {
          throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
        }, this.updateHex = function (t) {
          throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
        }, this.digest = function () {
          throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
        }, this.digestString = function (t) {
          throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
        }, this.digestHex = function (t) {
          throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
        }, void 0 !== t && void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov && (this.provName = br.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName));
      }, br.crypto.MessageDigest.getCanonicalAlgName = function (t) {
        return "string" == typeof t && (t = (t = t.toLowerCase()).replace(/-/, "")), t;
      }, br.crypto.MessageDigest.getHashLength = function (t) {
        var e = br.crypto.MessageDigest,
            r = e.getCanonicalAlgName(t);if (void 0 === e.HASHLENGTH[r]) throw "not supported algorithm: " + t;return e.HASHLENGTH[r];
      }, br.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 }, br.crypto.Mac = function (t) {
        this.setAlgAndProvider = function (t, e) {
          if (null == (t = t.toLowerCase()) && (t = "hmacsha1"), "hmac" != (t = t.toLowerCase()).substr(0, 4)) throw "setAlgAndProvider unsupported HMAC alg: " + t;void 0 === e && (e = br.crypto.Util.DEFAULTPROVIDER[t]), this.algProv = t + "/" + e;var r = t.substr(4);if (-1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(r) && "cryptojs" == e) {
            try {
              var n = br.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[r];this.mac = y.algo.HMAC.create(n, this.pass);
            } catch (t) {
              throw "setAlgAndProvider hash alg set fail hashAlg=" + r + "/" + t;
            }this.updateString = function (t) {
              this.mac.update(t);
            }, this.updateHex = function (t) {
              var e = y.enc.Hex.parse(t);this.mac.update(e);
            }, this.doFinal = function () {
              return this.mac.finalize().toString(y.enc.Hex);
            }, this.doFinalString = function (t) {
              return this.updateString(t), this.doFinal();
            }, this.doFinalHex = function (t) {
              return this.updateHex(t), this.doFinal();
            };
          }
        }, this.updateString = function (t) {
          throw "updateString(str) not supported for this alg/prov: " + this.algProv;
        }, this.updateHex = function (t) {
          throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
        }, this.doFinal = function () {
          throw "digest() not supported for this alg/prov: " + this.algProv;
        }, this.doFinalString = function (t) {
          throw "digestString(str) not supported for this alg/prov: " + this.algProv;
        }, this.doFinalHex = function (t) {
          throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
        }, this.setPassword = function (t) {
          if ("string" == typeof t) {
            var e = t;return t.length % 2 != 1 && t.match(/^[0-9A-Fa-f]+$/) || (e = Ur(t)), void (this.pass = y.enc.Hex.parse(e));
          }if ("object" != (void 0 === t ? "undefined" : r(t))) throw "KJUR.crypto.Mac unsupported password type: " + t;e = null;if (void 0 !== t.hex) {
            if (t.hex.length % 2 != 0 || !t.hex.match(/^[0-9A-Fa-f]+$/)) throw "Mac: wrong hex password: " + t.hex;e = t.hex;
          }if (void 0 !== t.utf8 && (e = Dr(t.utf8)), void 0 !== t.rstr && (e = Ur(t.rstr)), void 0 !== t.b64 && (e = b(t.b64)), void 0 !== t.b64u && (e = Ir(t.b64u)), null == e) throw "KJUR.crypto.Mac unsupported password type: " + t;this.pass = y.enc.Hex.parse(e);
        }, void 0 !== t && (void 0 !== t.pass && this.setPassword(t.pass), void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov && (this.provName = br.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName)));
      }, br.crypto.Signature = function (t) {
        var e = null;if (this._setAlgNames = function () {
          var t = this.algName.match(/^(.+)with(.+)$/);t && (this.mdAlgName = t[1].toLowerCase(), this.pubkeyAlgName = t[2].toLowerCase(), "rsaandmgf1" == this.pubkeyAlgName && "sha" == this.mdAlgName && (this.mdAlgName = "sha1"));
        }, this._zeroPaddingOfSignature = function (t, e) {
          for (var r = "", n = e / 4 - t.length, i = 0; i < n; i++) {
            r += "0";
          }return r + t;
        }, this.setAlgAndProvider = function (t, e) {
          if (this._setAlgNames(), "cryptojs/jsrsa" != e) throw new Error("provider not supported: " + e);if (-1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)) {
            try {
              this.md = new br.crypto.MessageDigest({ alg: this.mdAlgName });
            } catch (t) {
              throw new Error("setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + t);
            }this.init = function (t, e) {
              var r = null;try {
                r = void 0 === e ? Zr.getKey(t) : Zr.getKey(t, e);
              } catch (t) {
                throw "init failed:" + t;
              }if (!0 === r.isPrivate) this.prvKey = r, this.state = "SIGN";else {
                if (!0 !== r.isPublic) throw "init failed.:" + r;this.pubKey = r, this.state = "VERIFY";
              }
            }, this.updateString = function (t) {
              this.md.updateString(t);
            }, this.updateHex = function (t) {
              this.md.updateHex(t);
            }, this.sign = function () {
              if (this.sHashHex = this.md.digest(), void 0 === this.prvKey && void 0 !== this.ecprvhex && void 0 !== this.eccurvename && void 0 !== br.crypto.ECDSA && (this.prvKey = new br.crypto.ECDSA({ curve: this.eccurvename, prv: this.ecprvhex })), this.prvKey instanceof He && "rsaandmgf1" === this.pubkeyAlgName) this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);else if (this.prvKey instanceof He && "rsa" === this.pubkeyAlgName) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);else if (this.prvKey instanceof br.crypto.ECDSA) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);else {
                if (!(this.prvKey instanceof br.crypto.DSA)) throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
              }return this.hSign;
            }, this.signString = function (t) {
              return this.updateString(t), this.sign();
            }, this.signHex = function (t) {
              return this.updateHex(t), this.sign();
            }, this.verify = function (t) {
              if (this.sHashHex = this.md.digest(), void 0 === this.pubKey && void 0 !== this.ecpubhex && void 0 !== this.eccurvename && void 0 !== br.crypto.ECDSA && (this.pubKey = new br.crypto.ECDSA({ curve: this.eccurvename, pub: this.ecpubhex })), this.pubKey instanceof He && "rsaandmgf1" === this.pubkeyAlgName) return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, t, this.mdAlgName, this.pssSaltLen);if (this.pubKey instanceof He && "rsa" === this.pubkeyAlgName) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);if (void 0 !== br.crypto.ECDSA && this.pubKey instanceof br.crypto.ECDSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);if (void 0 !== br.crypto.DSA && this.pubKey instanceof br.crypto.DSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
            };
          }
        }, this.init = function (t, e) {
          throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
        }, this.updateString = function (t) {
          throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
        }, this.updateHex = function (t) {
          throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
        }, this.sign = function () {
          throw "sign() not supported for this alg:prov=" + this.algProvName;
        }, this.signString = function (t) {
          throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
        }, this.signHex = function (t) {
          throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
        }, this.verify = function (t) {
          throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
        }, this.initParams = t, void 0 !== t && (void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov ? this.provName = br.crypto.Util.DEFAULTPROVIDER[this.algName] : this.provName = t.prov, this.algProvName = this.algName + ":" + this.provName, this.setAlgAndProvider(this.algName, this.provName), this._setAlgNames()), void 0 !== t.psssaltlen && (this.pssSaltLen = t.psssaltlen), void 0 !== t.prvkeypem)) {
          if (void 0 !== t.prvkeypas) throw "both prvkeypem and prvkeypas parameters not supported";try {
            e = Zr.getKey(t.prvkeypem);this.init(e);
          } catch (t) {
            throw "fatal error to load pem private key: " + t;
          }
        }
      }, br.crypto.Cipher = function (t) {}, br.crypto.Cipher.encrypt = function (t, e, r) {
        if (e instanceof He && e.isPublic) {
          var n = br.crypto.Cipher.getAlgByKeyAndName(e, r);if ("RSA" === n) return e.encrypt(t);if ("RSAOAEP" === n) return e.encryptOAEP(t, "sha1");var i = n.match(/^RSAOAEP(\d+)$/);if (null !== i) return e.encryptOAEP(t, "sha" + i[1]);throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + r;
        }throw "Cipher.encrypt: unsupported key or algorithm";
      }, br.crypto.Cipher.decrypt = function (t, e, r) {
        if (e instanceof He && e.isPrivate) {
          var n = br.crypto.Cipher.getAlgByKeyAndName(e, r);if ("RSA" === n) return e.decrypt(t);if ("RSAOAEP" === n) return e.decryptOAEP(t, "sha1");var i = n.match(/^RSAOAEP(\d+)$/);if (null !== i) return e.decryptOAEP(t, "sha" + i[1]);throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + r;
        }throw "Cipher.decrypt: unsupported key or algorithm";
      }, br.crypto.Cipher.getAlgByKeyAndName = function (t, e) {
        if (t instanceof He) {
          if (-1 != ":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(e)) return e;if (null == e) return "RSA";throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + e;
        }throw "getAlgByKeyAndName: not supported algorithm name: " + e;
      }, br.crypto.OID = new function () {
        this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040023": "secp521r1", "2b81040022": "secp384r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
      }(), void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.crypto && br.crypto || (br.crypto = {}), br.crypto.ECDSA = function (t) {
        var e = Error,
            n = F,
            i = Ke,
            o = br.crypto.ECDSA,
            s = br.crypto.ECParameterDB,
            a = o.getName,
            u = Er,
            c = u.getVbyListEx,
            h = u.isASN1HEX,
            l = new Oe();this.type = "EC", this.isPrivate = !1, this.isPublic = !1, this.getBigRandom = function (t) {
          return new n(t.bitLength(), l).mod(t.subtract(n.ONE)).add(n.ONE);
        }, this.setNamedCurve = function (t) {
          this.ecparams = s.getByName(t), this.prvKeyHex = null, this.pubKeyHex = null, this.curveName = t;
        }, this.setPrivateKeyHex = function (t) {
          this.isPrivate = !0, this.prvKeyHex = t;
        }, this.setPublicKeyHex = function (t) {
          this.isPublic = !0, this.pubKeyHex = t;
        }, this.getPublicKeyXYHex = function () {
          var t = this.pubKeyHex;if ("04" !== t.substr(0, 2)) throw "this method supports uncompressed format(04) only";var e = this.ecparams.keylen / 4;if (t.length !== 2 + 2 * e) throw "malformed public key hex length";var r = {};return r.x = t.substr(2, e), r.y = t.substr(2 + e), r;
        }, this.getShortNISTPCurveName = function () {
          var t = this.curveName;return "secp256r1" === t || "NIST P-256" === t || "P-256" === t || "prime256v1" === t ? "P-256" : "secp384r1" === t || "NIST P-384" === t || "P-384" === t ? "P-384" : null;
        }, this.generateKeyPairHex = function () {
          var t = this.ecparams.n,
              e = this.getBigRandom(t),
              r = this.ecparams.G.multiply(e),
              n = r.getX().toBigInteger(),
              i = r.getY().toBigInteger(),
              o = this.ecparams.keylen / 4,
              s = ("0000000000" + e.toString(16)).slice(-o),
              a = "04" + ("0000000000" + n.toString(16)).slice(-o) + ("0000000000" + i.toString(16)).slice(-o);return this.setPrivateKeyHex(s), this.setPublicKeyHex(a), { ecprvhex: s, ecpubhex: a };
        }, this.signWithMessageHash = function (t) {
          return this.signHex(t, this.prvKeyHex);
        }, this.signHex = function (t, e) {
          var r = new n(e, 16),
              i = this.ecparams.n,
              s = new n(t.substring(0, this.ecparams.keylen / 4), 16);do {
            var a = this.getBigRandom(i),
                u = this.ecparams.G.multiply(a).getX().toBigInteger().mod(i);
          } while (u.compareTo(n.ZERO) <= 0);var c = a.modInverse(i).multiply(s.add(r.multiply(u))).mod(i);return o.biRSSigToASN1Sig(u, c);
        }, this.sign = function (t, e) {
          var r = e,
              i = this.ecparams.n,
              o = n.fromByteArrayUnsigned(t);do {
            var s = this.getBigRandom(i),
                a = this.ecparams.G.multiply(s).getX().toBigInteger().mod(i);
          } while (a.compareTo(F.ZERO) <= 0);var u = s.modInverse(i).multiply(o.add(r.multiply(a))).mod(i);return this.serializeSig(a, u);
        }, this.verifyWithMessageHash = function (t, e) {
          return this.verifyHex(t, e, this.pubKeyHex);
        }, this.verifyHex = function (t, e, r) {
          try {
            var s,
                a,
                u = o.parseSigHex(e);s = u.r, a = u.s;var c = i.decodeFromHex(this.ecparams.curve, r),
                h = new n(t.substring(0, this.ecparams.keylen / 4), 16);return this.verifyRaw(h, s, a, c);
          } catch (t) {
            return !1;
          }
        }, this.verify = function (t, e, o) {
          var s, a, u;if (Bitcoin.Util.isArray(e)) {
            var c = this.parseSig(e);s = c.r, a = c.s;
          } else {
            if ("object" !== (void 0 === e ? "undefined" : r(e)) || !e.r || !e.s) throw "Invalid value for signature";s = e.r, a = e.s;
          }if (o instanceof Ke) u = o;else {
            if (!Bitcoin.Util.isArray(o)) throw "Invalid format for pubkey value, must be byte array or ECPointFp";u = i.decodeFrom(this.ecparams.curve, o);
          }var h = n.fromByteArrayUnsigned(t);return this.verifyRaw(h, s, a, u);
        }, this.verifyRaw = function (t, e, r, i) {
          var o = this.ecparams.n,
              s = this.ecparams.G;if (e.compareTo(n.ONE) < 0 || e.compareTo(o) >= 0) return !1;if (r.compareTo(n.ONE) < 0 || r.compareTo(o) >= 0) return !1;var a = r.modInverse(o),
              u = t.multiply(a).mod(o),
              c = e.multiply(a).mod(o);return s.multiply(u).add(i.multiply(c)).getX().toBigInteger().mod(o).equals(e);
        }, this.serializeSig = function (t, e) {
          var r = t.toByteArraySigned(),
              n = e.toByteArraySigned(),
              i = [];return i.push(2), i.push(r.length), (i = i.concat(r)).push(2), i.push(n.length), (i = i.concat(n)).unshift(i.length), i.unshift(48), i;
        }, this.parseSig = function (t) {
          var e;if (48 != t[0]) throw new Error("Signature not a valid DERSequence");if (2 != t[e = 2]) throw new Error("First element in signature must be a DERInteger");var r = t.slice(e + 2, e + 2 + t[e + 1]);if (2 != t[e += 2 + t[e + 1]]) throw new Error("Second element in signature must be a DERInteger");var i = t.slice(e + 2, e + 2 + t[e + 1]);return e += 2 + t[e + 1], { r: n.fromByteArrayUnsigned(r), s: n.fromByteArrayUnsigned(i) };
        }, this.parseSigCompact = function (t) {
          if (65 !== t.length) throw "Signature has the wrong length";var e = t[0] - 27;if (e < 0 || e > 7) throw "Invalid signature type";var r = this.ecparams.n;return { r: n.fromByteArrayUnsigned(t.slice(1, 33)).mod(r), s: n.fromByteArrayUnsigned(t.slice(33, 65)).mod(r), i: e };
        }, this.readPKCS5PrvKeyHex = function (t) {
          if (!1 === h(t)) throw new Error("not ASN.1 hex string");var e, r, n;try {
            e = c(t, 0, ["[0]", 0], "06"), r = c(t, 0, [1], "04");try {
              n = c(t, 0, ["[1]", 0], "03");
            } catch (t) {}
          } catch (t) {
            throw new Error("malformed PKCS#1/5 plain ECC private key");
          }if (this.curveName = a(e), void 0 === this.curveName) throw "unsupported curve name";this.setNamedCurve(this.curveName), this.setPublicKeyHex(n), this.setPrivateKeyHex(r), this.isPublic = !1;
        }, this.readPKCS8PrvKeyHex = function (t) {
          if (!1 === h(t)) throw new e("not ASN.1 hex string");var r, n, i;try {
            c(t, 0, [1, 0], "06"), r = c(t, 0, [1, 1], "06"), n = c(t, 0, [2, 0, 1], "04");try {
              i = c(t, 0, [2, 0, "[1]", 0], "03");
            } catch (t) {}
          } catch (t) {
            throw new e("malformed PKCS#8 plain ECC private key");
          }if (this.curveName = a(r), void 0 === this.curveName) throw new e("unsupported curve name");this.setNamedCurve(this.curveName), this.setPublicKeyHex(i), this.setPrivateKeyHex(n), this.isPublic = !1;
        }, this.readPKCS8PubKeyHex = function (t) {
          if (!1 === h(t)) throw new e("not ASN.1 hex string");var r, n;try {
            c(t, 0, [0, 0], "06"), r = c(t, 0, [0, 1], "06"), n = c(t, 0, [1], "03");
          } catch (t) {
            throw new e("malformed PKCS#8 ECC public key");
          }if (this.curveName = a(r), null === this.curveName) throw new e("unsupported curve name");this.setNamedCurve(this.curveName), this.setPublicKeyHex(n);
        }, this.readCertPubKeyHex = function (t, r) {
          if (!1 === h(t)) throw new e("not ASN.1 hex string");var n, i;try {
            n = c(t, 0, [0, 5, 0, 1], "06"), i = c(t, 0, [0, 5, 1], "03");
          } catch (t) {
            throw new e("malformed X.509 certificate ECC public key");
          }if (this.curveName = a(n), null === this.curveName) throw new e("unsupported curve name");this.setNamedCurve(this.curveName), this.setPublicKeyHex(i);
        }, void 0 !== t && void 0 !== t.curve && (this.curveName = t.curve), void 0 === this.curveName && (this.curveName = "secp256r1"), this.setNamedCurve(this.curveName), void 0 !== t && (void 0 !== t.prv && this.setPrivateKeyHex(t.prv), void 0 !== t.pub && this.setPublicKeyHex(t.pub));
      }, br.crypto.ECDSA.parseSigHex = function (t) {
        var e = br.crypto.ECDSA.parseSigHexInHexRS(t);return { r: new F(e.r, 16), s: new F(e.s, 16) };
      }, br.crypto.ECDSA.parseSigHexInHexRS = function (t) {
        var e = Er,
            r = e.getChildIdx,
            n = e.getV;if (e.checkStrictDER(t, 0), "30" != t.substr(0, 2)) throw new Error("signature is not a ASN.1 sequence");var i = r(t, 0);if (2 != i.length) throw new Error("signature shall have two elements");var o = i[0],
            s = i[1];if ("02" != t.substr(o, 2)) throw new Error("1st item not ASN.1 integer");if ("02" != t.substr(s, 2)) throw new Error("2nd item not ASN.1 integer");return { r: n(t, o), s: n(t, s) };
      }, br.crypto.ECDSA.asn1SigToConcatSig = function (t) {
        var e = br.crypto.ECDSA.parseSigHexInHexRS(t),
            r = e.r,
            n = e.s;if ("00" == r.substr(0, 2) && r.length % 32 == 2 && (r = r.substr(2)), "00" == n.substr(0, 2) && n.length % 32 == 2 && (n = n.substr(2)), r.length % 32 == 30 && (r = "00" + r), n.length % 32 == 30 && (n = "00" + n), r.length % 32 != 0) throw "unknown ECDSA sig r length error";if (n.length % 32 != 0) throw "unknown ECDSA sig s length error";return r + n;
      }, br.crypto.ECDSA.concatSigToASN1Sig = function (t) {
        if (t.length / 2 * 8 % 128 != 0) throw "unknown ECDSA concatinated r-s sig  length error";var e = t.substr(0, t.length / 2),
            r = t.substr(t.length / 2);return br.crypto.ECDSA.hexRSSigToASN1Sig(e, r);
      }, br.crypto.ECDSA.hexRSSigToASN1Sig = function (t, e) {
        var r = new F(t, 16),
            n = new F(e, 16);return br.crypto.ECDSA.biRSSigToASN1Sig(r, n);
      }, br.crypto.ECDSA.biRSSigToASN1Sig = function (t, e) {
        var r = br.asn1,
            n = new r.DERInteger({ bigint: t }),
            i = new r.DERInteger({ bigint: e });return new r.DERSequence({ array: [n, i] }).getEncodedHex();
      }, br.crypto.ECDSA.getName = function (t) {
        return "2b8104001f" === t ? "secp192k1" : "2a8648ce3d030107" === t ? "secp256r1" : "2b8104000a" === t ? "secp256k1" : "2b81040021" === t ? "secp224r1" : "2b81040022" === t ? "secp384r1" : -1 !== "|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(t) ? "secp256r1" : -1 !== "|secp256k1|".indexOf(t) ? "secp256k1" : -1 !== "|secp224r1|NIST P-224|P-224|".indexOf(t) ? "secp224r1" : -1 !== "|secp384r1|NIST P-384|P-384|".indexOf(t) ? "secp384r1" : null;
      }, void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.crypto && br.crypto || (br.crypto = {}), br.crypto.ECParameterDB = new function () {
        var t = {},
            e = {};function r(t) {
          return new F(t, 16);
        }this.getByName = function (r) {
          var n = r;if (void 0 !== e[n] && (n = e[r]), void 0 !== t[n]) return t[n];throw "unregistered EC curve name: " + n;
        }, this.regist = function (n, i, o, s, a, u, c, h, l, f, g, d) {
          t[n] = {};var p = r(o),
              v = r(s),
              y = r(a),
              m = r(u),
              _ = r(c),
              S = new qe(p, v, y),
              b = S.decodePointHex("04" + h + l);t[n].name = n, t[n].keylen = i, t[n].curve = S, t[n].G = b, t[n].n = m, t[n].h = _, t[n].oid = g, t[n].info = d;for (var w = 0; w < f.length; w++) {
            e[f[w]] = n;
          }
        };
      }(), br.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field"), br.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field"), br.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field"), br.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []), br.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []), br.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []), br.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []), br.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]), br.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]), br.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);var Zr = function () {
        var t = function t(r, n, i) {
          return e(y.AES, r, n, i);
        },
            e = function t(e, r, n, i) {
          var o = y.enc.Hex.parse(r),
              s = y.enc.Hex.parse(n),
              a = y.enc.Hex.parse(i),
              u = {};u.key = s, u.iv = a, u.ciphertext = o;var c = e.decrypt(u, s, { iv: a });return y.enc.Hex.stringify(c);
        },
            r = function t(e, r, i) {
          return n(y.AES, e, r, i);
        },
            n = function t(e, r, n, i) {
          var o = y.enc.Hex.parse(r),
              s = y.enc.Hex.parse(n),
              a = y.enc.Hex.parse(i),
              u = e.encrypt(o, s, { iv: a }),
              c = y.enc.Hex.parse(u.toString());return y.enc.Base64.stringify(c);
        },
            i = { "AES-256-CBC": { proc: t, eproc: r, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: t, eproc: r, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: t, eproc: r, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: function t(r, n, i) {
              return e(y.TripleDES, r, n, i);
            }, eproc: function t(e, r, i) {
              return n(y.TripleDES, e, r, i);
            }, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: function t(r, n, i) {
              return e(y.DES, r, n, i);
            }, eproc: function t(e, r, i) {
              return n(y.DES, e, r, i);
            }, keylen: 8, ivlen: 8 } },
            o = function t(e) {
          var r = {},
              n = e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));n && (r.cipher = n[1], r.ivsalt = n[2]);var i = e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));i && (r.type = i[1]);var o = -1,
              s = 0;-1 != e.indexOf("\r\n\r\n") && (o = e.indexOf("\r\n\r\n"), s = 2), -1 != e.indexOf("\n\n") && (o = e.indexOf("\n\n"), s = 1);var a = e.indexOf("-----END");if (-1 != o && -1 != a) {
            var u = e.substring(o + 2 * s, a - s);u = u.replace(/\s+/g, ""), r.data = u;
          }return r;
        },
            s = function t(e, r, n) {
          for (var o = n.substring(0, 16), s = y.enc.Hex.parse(o), a = y.enc.Utf8.parse(r), u = i[e].keylen + i[e].ivlen, c = "", h = null;;) {
            var l = y.algo.MD5.create();if (null != h && l.update(h), l.update(a), l.update(s), h = l.finalize(), (c += y.enc.Hex.stringify(h)).length >= 2 * u) break;
          }var f = {};return f.keyhex = c.substr(0, 2 * i[e].keylen), f.ivhex = c.substr(2 * i[e].keylen, 2 * i[e].ivlen), f;
        },
            a = function t(e, r, n, o) {
          var s = y.enc.Base64.parse(e),
              a = y.enc.Hex.stringify(s);return (0, i[r].proc)(a, n, o);
        };return { version: "1.0.0", parsePKCS5PEM: function t(e) {
            return o(e);
          }, getKeyAndUnusedIvByPasscodeAndIvsalt: function t(e, r, n) {
            return s(e, r, n);
          }, decryptKeyB64: function t(e, r, n, i) {
            return a(e, r, n, i);
          }, getDecryptedKeyHex: function t(e, r) {
            var n = o(e),
                i = (n.type, n.cipher),
                u = n.ivsalt,
                c = n.data,
                h = s(i, r, u).keyhex;return a(c, i, h, u);
          }, getEncryptedPKCS5PEMFromPrvKeyHex: function t(e, r, n, o, a) {
            var u = "";if (void 0 !== o && null != o || (o = "AES-256-CBC"), void 0 === i[o]) throw "KEYUTIL unsupported algorithm: " + o;void 0 !== a && null != a || (a = function t(e) {
              var r = y.lib.WordArray.random(e);return y.enc.Hex.stringify(r);
            }(i[o].ivlen).toUpperCase());var c = function t(e, r, n, o) {
              return (0, i[r].eproc)(e, n, o);
            }(r, o, s(o, n, a).keyhex, a);u = "-----BEGIN " + e + " PRIVATE KEY-----\r\n";return u += "Proc-Type: 4,ENCRYPTED\r\n", u += "DEK-Info: " + o + "," + a + "\r\n", u += "\r\n", u += c.replace(/(.{64})/g, "$1\r\n"), u += "\r\n-----END " + e + " PRIVATE KEY-----\r\n";
          }, parseHexOfEncryptedPKCS8: function t(e) {
            var r = Er,
                n = r.getChildIdx,
                i = r.getV,
                o = {},
                s = n(e, 0);if (2 != s.length) throw "malformed format: SEQUENCE(0).items != 2: " + s.length;o.ciphertext = i(e, s[1]);var a = n(e, s[0]);if (2 != a.length) throw "malformed format: SEQUENCE(0.0).items != 2: " + a.length;if ("2a864886f70d01050d" != i(e, a[0])) throw "this only supports pkcs5PBES2";var u = n(e, a[1]);if (2 != a.length) throw "malformed format: SEQUENCE(0.0.1).items != 2: " + u.length;var c = n(e, u[1]);if (2 != c.length) throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + c.length;if ("2a864886f70d0307" != i(e, c[0])) throw "this only supports TripleDES";o.encryptionSchemeAlg = "TripleDES", o.encryptionSchemeIV = i(e, c[1]);var h = n(e, u[0]);if (2 != h.length) throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + h.length;if ("2a864886f70d01050c" != i(e, h[0])) throw "this only supports pkcs5PBKDF2";var l = n(e, h[1]);if (l.length < 2) throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + l.length;o.pbkdf2Salt = i(e, l[0]);var f = i(e, l[1]);try {
              o.pbkdf2Iter = parseInt(f, 16);
            } catch (t) {
              throw "malformed format pbkdf2Iter: " + f;
            }return o;
          }, getPBKDF2KeyHexFromParam: function t(e, r) {
            var n = y.enc.Hex.parse(e.pbkdf2Salt),
                i = e.pbkdf2Iter,
                o = y.PBKDF2(r, n, { keySize: 6, iterations: i });return y.enc.Hex.stringify(o);
          }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function t(e, r) {
            var n = Hr(e, "ENCRYPTED PRIVATE KEY"),
                i = this.parseHexOfEncryptedPKCS8(n),
                o = Zr.getPBKDF2KeyHexFromParam(i, r),
                s = {};s.ciphertext = y.enc.Hex.parse(i.ciphertext);var a = y.enc.Hex.parse(o),
                u = y.enc.Hex.parse(i.encryptionSchemeIV),
                c = y.TripleDES.decrypt(s, a, { iv: u });return y.enc.Hex.stringify(c);
          }, getKeyFromEncryptedPKCS8PEM: function t(e, r) {
            var n = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e, r);return this.getKeyFromPlainPrivatePKCS8Hex(n);
          }, parsePlainPrivatePKCS8Hex: function t(e) {
            var r = Er,
                n = r.getChildIdx,
                i = r.getV,
                o = { algparam: null };if ("30" != e.substr(0, 2)) throw "malformed plain PKCS8 private key(code:001)";var s = n(e, 0);if (3 != s.length) throw "malformed plain PKCS8 private key(code:002)";if ("30" != e.substr(s[1], 2)) throw "malformed PKCS8 private key(code:003)";var a = n(e, s[1]);if (2 != a.length) throw "malformed PKCS8 private key(code:004)";if ("06" != e.substr(a[0], 2)) throw "malformed PKCS8 private key(code:005)";if (o.algoid = i(e, a[0]), "06" == e.substr(a[1], 2) && (o.algparam = i(e, a[1])), "04" != e.substr(s[2], 2)) throw "malformed PKCS8 private key(code:006)";return o.keyidx = r.getVidx(e, s[2]), o;
          }, getKeyFromPlainPrivatePKCS8PEM: function t(e) {
            var r = Hr(e, "PRIVATE KEY");return this.getKeyFromPlainPrivatePKCS8Hex(r);
          }, getKeyFromPlainPrivatePKCS8Hex: function t(e) {
            var r,
                n = this.parsePlainPrivatePKCS8Hex(e);if ("2a864886f70d010101" == n.algoid) r = new He();else if ("2a8648ce380401" == n.algoid) r = new br.crypto.DSA();else {
              if ("2a8648ce3d0201" != n.algoid) throw "unsupported private key algorithm";r = new br.crypto.ECDSA();
            }return r.readPKCS8PrvKeyHex(e), r;
          }, _getKeyFromPublicPKCS8Hex: function t(e) {
            var r,
                n = Er.getVbyList(e, 0, [0, 0], "06");if ("2a864886f70d010101" === n) r = new He();else if ("2a8648ce380401" === n) r = new br.crypto.DSA();else {
              if ("2a8648ce3d0201" !== n) throw "unsupported PKCS#8 public key hex";r = new br.crypto.ECDSA();
            }return r.readPKCS8PubKeyHex(e), r;
          }, parsePublicRawRSAKeyHex: function t(e) {
            var r = Er,
                n = r.getChildIdx,
                i = r.getV,
                o = {};if ("30" != e.substr(0, 2)) throw "malformed RSA key(code:001)";var s = n(e, 0);if (2 != s.length) throw "malformed RSA key(code:002)";if ("02" != e.substr(s[0], 2)) throw "malformed RSA key(code:003)";if (o.n = i(e, s[0]), "02" != e.substr(s[1], 2)) throw "malformed RSA key(code:004)";return o.e = i(e, s[1]), o;
          }, parsePublicPKCS8Hex: function t(e) {
            var r = Er,
                n = r.getChildIdx,
                i = r.getV,
                o = { algparam: null },
                s = n(e, 0);if (2 != s.length) throw "outer DERSequence shall have 2 elements: " + s.length;var a = s[0];if ("30" != e.substr(a, 2)) throw "malformed PKCS8 public key(code:001)";var u = n(e, a);if (2 != u.length) throw "malformed PKCS8 public key(code:002)";if ("06" != e.substr(u[0], 2)) throw "malformed PKCS8 public key(code:003)";if (o.algoid = i(e, u[0]), "06" == e.substr(u[1], 2) ? o.algparam = i(e, u[1]) : "30" == e.substr(u[1], 2) && (o.algparam = {}, o.algparam.p = r.getVbyList(e, u[1], [0], "02"), o.algparam.q = r.getVbyList(e, u[1], [1], "02"), o.algparam.g = r.getVbyList(e, u[1], [2], "02")), "03" != e.substr(s[1], 2)) throw "malformed PKCS8 public key(code:004)";return o.key = i(e, s[1]).substr(2), o;
          } };
      }();Zr.getKey = function (t, e, r) {
        var n = (v = Er).getChildIdx,
            i = (v.getV, v.getVbyList),
            o = br.crypto,
            s = o.ECDSA,
            a = o.DSA,
            u = He,
            c = Hr,
            h = Zr;if (void 0 !== u && t instanceof u) return t;if (void 0 !== s && t instanceof s) return t;if (void 0 !== a && t instanceof a) return t;if (void 0 !== t.curve && void 0 !== t.xy && void 0 === t.d) return new s({ pub: t.xy, curve: t.curve });if (void 0 !== t.curve && void 0 !== t.d) return new s({ prv: t.d, curve: t.curve });if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 === t.d) return (P = new u()).setPublic(t.n, t.e), P;if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 !== t.p && void 0 !== t.q && void 0 !== t.dp && void 0 !== t.dq && void 0 !== t.co && void 0 === t.qi) return (P = new u()).setPrivateEx(t.n, t.e, t.d, t.p, t.q, t.dp, t.dq, t.co), P;if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 === t.p) return (P = new u()).setPrivate(t.n, t.e, t.d), P;if (void 0 !== t.p && void 0 !== t.q && void 0 !== t.g && void 0 !== t.y && void 0 === t.x) return (P = new a()).setPublic(t.p, t.q, t.g, t.y), P;if (void 0 !== t.p && void 0 !== t.q && void 0 !== t.g && void 0 !== t.y && void 0 !== t.x) return (P = new a()).setPrivate(t.p, t.q, t.g, t.y, t.x), P;if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 === t.d) return (P = new u()).setPublic(Ir(t.n), Ir(t.e)), P;if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 !== t.p && void 0 !== t.q && void 0 !== t.dp && void 0 !== t.dq && void 0 !== t.qi) return (P = new u()).setPrivateEx(Ir(t.n), Ir(t.e), Ir(t.d), Ir(t.p), Ir(t.q), Ir(t.dp), Ir(t.dq), Ir(t.qi)), P;if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d) return (P = new u()).setPrivate(Ir(t.n), Ir(t.e), Ir(t.d)), P;if ("EC" === t.kty && void 0 !== t.crv && void 0 !== t.x && void 0 !== t.y && void 0 === t.d) {
          var l = (A = new s({ curve: t.crv })).ecparams.keylen / 4,
              f = "04" + ("0000000000" + Ir(t.x)).slice(-l) + ("0000000000" + Ir(t.y)).slice(-l);return A.setPublicKeyHex(f), A;
        }if ("EC" === t.kty && void 0 !== t.crv && void 0 !== t.x && void 0 !== t.y && void 0 !== t.d) {
          l = (A = new s({ curve: t.crv })).ecparams.keylen / 4, f = "04" + ("0000000000" + Ir(t.x)).slice(-l) + ("0000000000" + Ir(t.y)).slice(-l);var g = ("0000000000" + Ir(t.d)).slice(-l);return A.setPublicKeyHex(f), A.setPrivateKeyHex(g), A;
        }if ("pkcs5prv" === r) {
          var d,
              p = t,
              v = Er;if (9 === (d = n(p, 0)).length) (P = new u()).readPKCS5PrvKeyHex(p);else if (6 === d.length) (P = new a()).readPKCS5PrvKeyHex(p);else {
            if (!(d.length > 2 && "04" === p.substr(d[1], 2))) throw "unsupported PKCS#1/5 hexadecimal key";(P = new s()).readPKCS5PrvKeyHex(p);
          }return P;
        }if ("pkcs8prv" === r) return P = h.getKeyFromPlainPrivatePKCS8Hex(t);if ("pkcs8pub" === r) return h._getKeyFromPublicPKCS8Hex(t);if ("x509pub" === r) return on.getPublicKeyFromCertHex(t);if (-1 != t.indexOf("-END CERTIFICATE-", 0) || -1 != t.indexOf("-END X509 CERTIFICATE-", 0) || -1 != t.indexOf("-END TRUSTED CERTIFICATE-", 0)) return on.getPublicKeyFromCertPEM(t);if (-1 != t.indexOf("-END PUBLIC KEY-")) {
          var y = Hr(t, "PUBLIC KEY");return h._getKeyFromPublicPKCS8Hex(y);
        }if (-1 != t.indexOf("-END RSA PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
          var m = c(t, "RSA PRIVATE KEY");return h.getKey(m, null, "pkcs5prv");
        }if (-1 != t.indexOf("-END DSA PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
          var _ = i(R = c(t, "DSA PRIVATE KEY"), 0, [1], "02"),
              S = i(R, 0, [2], "02"),
              b = i(R, 0, [3], "02"),
              w = i(R, 0, [4], "02"),
              E = i(R, 0, [5], "02");return (P = new a()).setPrivate(new F(_, 16), new F(S, 16), new F(b, 16), new F(w, 16), new F(E, 16)), P;
        }if (-1 != t.indexOf("-END EC PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
          m = c(t, "EC PRIVATE KEY");return h.getKey(m, null, "pkcs5prv");
        }if (-1 != t.indexOf("-END PRIVATE KEY-")) return h.getKeyFromPlainPrivatePKCS8PEM(t);if (-1 != t.indexOf("-END RSA PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
          var x = h.getDecryptedKeyHex(t, e),
              k = new He();return k.readPKCS5PrvKeyHex(x), k;
        }if (-1 != t.indexOf("-END EC PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
          var A,
              P = i(R = h.getDecryptedKeyHex(t, e), 0, [1], "04"),
              C = i(R, 0, [2, 0], "06"),
              T = i(R, 0, [3, 0], "03").substr(2);if (void 0 === br.crypto.OID.oidhex2name[C]) throw "undefined OID(hex) in KJUR.crypto.OID: " + C;return (A = new s({ curve: br.crypto.OID.oidhex2name[C] })).setPublicKeyHex(T), A.setPrivateKeyHex(P), A.isPublic = !1, A;
        }if (-1 != t.indexOf("-END DSA PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
          var R;_ = i(R = h.getDecryptedKeyHex(t, e), 0, [1], "02"), S = i(R, 0, [2], "02"), b = i(R, 0, [3], "02"), w = i(R, 0, [4], "02"), E = i(R, 0, [5], "02");return (P = new a()).setPrivate(new F(_, 16), new F(S, 16), new F(b, 16), new F(w, 16), new F(E, 16)), P;
        }if (-1 != t.indexOf("-END ENCRYPTED PRIVATE KEY-")) return h.getKeyFromEncryptedPKCS8PEM(t, e);throw new Error("not supported argument");
      }, Zr.generateKeypair = function (t, e) {
        if ("RSA" == t) {
          var r = e;(s = new He()).generate(r, "10001"), s.isPrivate = !0, s.isPublic = !0;var n = new He(),
              i = s.n.toString(16),
              o = s.e.toString(16);return n.setPublic(i, o), n.isPrivate = !1, n.isPublic = !0, (a = {}).prvKeyObj = s, a.pubKeyObj = n, a;
        }if ("EC" == t) {
          var s,
              a,
              u = e,
              c = new br.crypto.ECDSA({ curve: u }).generateKeyPairHex();return (s = new br.crypto.ECDSA({ curve: u })).setPublicKeyHex(c.ecpubhex), s.setPrivateKeyHex(c.ecprvhex), s.isPrivate = !0, s.isPublic = !1, (n = new br.crypto.ECDSA({ curve: u })).setPublicKeyHex(c.ecpubhex), n.isPrivate = !1, n.isPublic = !0, (a = {}).prvKeyObj = s, a.pubKeyObj = n, a;
        }throw "unknown algorithm: " + t;
      }, Zr.getPEM = function (t, e, r, n, i, o) {
        var s = br,
            a = s.asn1,
            u = a.DERObjectIdentifier,
            c = a.DERInteger,
            h = a.ASN1Util.newObject,
            l = a.x509.SubjectPublicKeyInfo,
            f = s.crypto,
            g = f.DSA,
            d = f.ECDSA,
            p = He;function v(t) {
          return h({ seq: [{ int: 0 }, { int: { bigint: t.n } }, { int: t.e }, { int: { bigint: t.d } }, { int: { bigint: t.p } }, { int: { bigint: t.q } }, { int: { bigint: t.dmp1 } }, { int: { bigint: t.dmq1 } }, { int: { bigint: t.coeff } }] });
        }function m(t) {
          return h({ seq: [{ int: 1 }, { octstr: { hex: t.prvKeyHex } }, { tag: ["a0", !0, { oid: { name: t.curveName } }] }, { tag: ["a1", !0, { bitstr: { hex: "00" + t.pubKeyHex } }] }] });
        }function _(t) {
          return h({ seq: [{ int: 0 }, { int: { bigint: t.p } }, { int: { bigint: t.q } }, { int: { bigint: t.g } }, { int: { bigint: t.y } }, { int: { bigint: t.x } }] });
        }if ((void 0 !== p && t instanceof p || void 0 !== g && t instanceof g || void 0 !== d && t instanceof d) && 1 == t.isPublic && (void 0 === e || "PKCS8PUB" == e)) return Mr(F = new l(t).getEncodedHex(), "PUBLIC KEY");if ("PKCS1PRV" == e && void 0 !== p && t instanceof p && (void 0 === r || null == r) && 1 == t.isPrivate) return Mr(F = v(t).getEncodedHex(), "RSA PRIVATE KEY");if ("PKCS1PRV" == e && void 0 !== d && t instanceof d && (void 0 === r || null == r) && 1 == t.isPrivate) {
          var S = new u({ name: t.curveName }).getEncodedHex(),
              b = m(t).getEncodedHex(),
              w = "";return w += Mr(S, "EC PARAMETERS"), w += Mr(b, "EC PRIVATE KEY");
        }if ("PKCS1PRV" == e && void 0 !== g && t instanceof g && (void 0 === r || null == r) && 1 == t.isPrivate) return Mr(F = _(t).getEncodedHex(), "DSA PRIVATE KEY");if ("PKCS5PRV" == e && void 0 !== p && t instanceof p && void 0 !== r && null != r && 1 == t.isPrivate) {
          var F = v(t).getEncodedHex();return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", F, r, n, o);
        }if ("PKCS5PRV" == e && void 0 !== d && t instanceof d && void 0 !== r && null != r && 1 == t.isPrivate) {
          F = m(t).getEncodedHex();return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", F, r, n, o);
        }if ("PKCS5PRV" == e && void 0 !== g && t instanceof g && void 0 !== r && null != r && 1 == t.isPrivate) {
          F = _(t).getEncodedHex();return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", F, r, n, o);
        }var E = function t(e, r) {
          var n = x(e, r);return new h({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: n.pbkdf2Salt } }, { int: n.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: n.encryptionSchemeIV } }] }] }] }, { octstr: { hex: n.ciphertext } }] }).getEncodedHex();
        },
            x = function t(e, r) {
          var n = y.lib.WordArray.random(8),
              i = y.lib.WordArray.random(8),
              o = y.PBKDF2(r, n, { keySize: 6, iterations: 100 }),
              s = y.enc.Hex.parse(e),
              a = y.TripleDES.encrypt(s, o, { iv: i }) + "",
              u = {};return u.ciphertext = a, u.pbkdf2Salt = y.enc.Hex.stringify(n), u.pbkdf2Iter = 100, u.encryptionSchemeAlg = "DES-EDE3-CBC", u.encryptionSchemeIV = y.enc.Hex.stringify(i), u;
        };if ("PKCS8PRV" == e && null != p && t instanceof p && 1 == t.isPrivate) {
          var k = v(t).getEncodedHex();F = h({ seq: [{ int: 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { null: !0 }] }, { octstr: { hex: k } }] }).getEncodedHex();return void 0 === r || null == r ? Mr(F, "PRIVATE KEY") : Mr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
        }if ("PKCS8PRV" == e && void 0 !== d && t instanceof d && 1 == t.isPrivate) {
          k = new h({ seq: [{ int: 1 }, { octstr: { hex: t.prvKeyHex } }, { tag: ["a1", !0, { bitstr: { hex: "00" + t.pubKeyHex } }] }] }).getEncodedHex(), F = h({ seq: [{ int: 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: t.curveName } }] }, { octstr: { hex: k } }] }).getEncodedHex();return void 0 === r || null == r ? Mr(F, "PRIVATE KEY") : Mr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
        }if ("PKCS8PRV" == e && void 0 !== g && t instanceof g && 1 == t.isPrivate) {
          k = new c({ bigint: t.x }).getEncodedHex(), F = h({ seq: [{ int: 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ int: { bigint: t.p } }, { int: { bigint: t.q } }, { int: { bigint: t.g } }] }] }, { octstr: { hex: k } }] }).getEncodedHex();return void 0 === r || null == r ? Mr(F, "PRIVATE KEY") : Mr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
        }throw new Error("unsupported object nor format");
      }, Zr.getKeyFromCSRPEM = function (t) {
        var e = Hr(t, "CERTIFICATE REQUEST");return Zr.getKeyFromCSRHex(e);
      }, Zr.getKeyFromCSRHex = function (t) {
        var e = Zr.parseCSRHex(t);return Zr.getKey(e.p8pubkeyhex, null, "pkcs8pub");
      }, Zr.parseCSRHex = function (t) {
        var e = Er,
            r = e.getChildIdx,
            n = e.getTLV,
            i = {},
            o = t;if ("30" != o.substr(0, 2)) throw "malformed CSR(code:001)";var s = r(o, 0);if (s.length < 1) throw "malformed CSR(code:002)";if ("30" != o.substr(s[0], 2)) throw "malformed CSR(code:003)";var a = r(o, s[0]);if (a.length < 3) throw "malformed CSR(code:004)";return i.p8pubkeyhex = n(o, a[2]), i;
      }, Zr.getKeyID = function (t) {
        var e = Zr,
            r = Er;"string" == typeof t && -1 != t.indexOf("BEGIN ") && (t = e.getKey(t));var n = Hr(e.getPEM(t)),
            i = r.getIdxbyList(n, 0, [1]),
            o = r.getV(n, i).substring(2);return br.crypto.Util.hashHex(o, "sha1");
      }, Zr.getJWKFromKey = function (t) {
        var e = {};if (t instanceof He && t.isPrivate) return e.kty = "RSA", e.n = Rr(t.n.toString(16)), e.e = Rr(t.e.toString(16)), e.d = Rr(t.d.toString(16)), e.p = Rr(t.p.toString(16)), e.q = Rr(t.q.toString(16)), e.dp = Rr(t.dmp1.toString(16)), e.dq = Rr(t.dmq1.toString(16)), e.qi = Rr(t.coeff.toString(16)), e;if (t instanceof He && t.isPublic) return e.kty = "RSA", e.n = Rr(t.n.toString(16)), e.e = Rr(t.e.toString(16)), e;if (t instanceof br.crypto.ECDSA && t.isPrivate) {
          if ("P-256" !== (n = t.getShortNISTPCurveName()) && "P-384" !== n) throw "unsupported curve name for JWT: " + n;var r = t.getPublicKeyXYHex();return e.kty = "EC", e.crv = n, e.x = Rr(r.x), e.y = Rr(r.y), e.d = Rr(t.prvKeyHex), e;
        }if (t instanceof br.crypto.ECDSA && t.isPublic) {
          var n;if ("P-256" !== (n = t.getShortNISTPCurveName()) && "P-384" !== n) throw "unsupported curve name for JWT: " + n;r = t.getPublicKeyXYHex();return e.kty = "EC", e.crv = n, e.x = Rr(r.x), e.y = Rr(r.y), e;
        }throw "not supported key object";
      }, He.getPosArrayOfChildrenFromHex = function (t) {
        return Er.getChildIdx(t, 0);
      }, He.getHexValueArrayOfChildrenFromHex = function (t) {
        var e,
            r = Er.getV,
            n = r(t, (e = He.getPosArrayOfChildrenFromHex(t))[0]),
            i = r(t, e[1]),
            o = r(t, e[2]),
            s = r(t, e[3]),
            a = r(t, e[4]),
            u = r(t, e[5]),
            c = r(t, e[6]),
            h = r(t, e[7]),
            l = r(t, e[8]);return (e = new Array()).push(n, i, o, s, a, u, c, h, l), e;
      }, He.prototype.readPrivateKeyFromPEMString = function (t) {
        var e = Hr(t),
            r = He.getHexValueArrayOfChildrenFromHex(e);this.setPrivateEx(r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
      }, He.prototype.readPKCS5PrvKeyHex = function (t) {
        var e = He.getHexValueArrayOfChildrenFromHex(t);this.setPrivateEx(e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
      }, He.prototype.readPKCS8PrvKeyHex = function (t) {
        var e,
            r,
            n,
            i,
            o,
            s,
            a,
            u,
            c = Er,
            h = c.getVbyListEx;if (!1 === c.isASN1HEX(t)) throw new Error("not ASN.1 hex string");try {
          e = h(t, 0, [2, 0, 1], "02"), r = h(t, 0, [2, 0, 2], "02"), n = h(t, 0, [2, 0, 3], "02"), i = h(t, 0, [2, 0, 4], "02"), o = h(t, 0, [2, 0, 5], "02"), s = h(t, 0, [2, 0, 6], "02"), a = h(t, 0, [2, 0, 7], "02"), u = h(t, 0, [2, 0, 8], "02");
        } catch (t) {
          throw new Error("malformed PKCS#8 plain RSA private key");
        }this.setPrivateEx(e, r, n, i, o, s, a, u);
      }, He.prototype.readPKCS5PubKeyHex = function (t) {
        var e = Er,
            r = e.getV;if (!1 === e.isASN1HEX(t)) throw new Error("keyHex is not ASN.1 hex string");var n = e.getChildIdx(t, 0);if (2 !== n.length || "02" !== t.substr(n[0], 2) || "02" !== t.substr(n[1], 2)) throw new Error("wrong hex for PKCS#5 public key");var i = r(t, n[0]),
            o = r(t, n[1]);this.setPublic(i, o);
      }, He.prototype.readPKCS8PubKeyHex = function (t) {
        var e = Er;if (!1 === e.isASN1HEX(t)) throw new Error("not ASN.1 hex string");if ("06092a864886f70d010101" !== e.getTLVbyListEx(t, 0, [0, 0])) throw new Error("not PKCS8 RSA public key");var r = e.getTLVbyListEx(t, 0, [1, 0]);this.readPKCS5PubKeyHex(r);
      }, He.prototype.readCertPubKeyHex = function (t, e) {
        var r, n;(r = new on()).readCertHex(t), n = r.getPublicKeyHex(), this.readPKCS8PubKeyHex(n);
      };var tn = new RegExp("[^0-9a-f]", "gi");function en(t, e) {
        for (var r = "", n = e / 4 - t.length, i = 0; i < n; i++) {
          r += "0";
        }return r + t;
      }function rn(t, e, r) {
        for (var n = "", i = 0; n.length < e;) {
          n += Nr(r(Ur(t + String.fromCharCode.apply(String, [(4278190080 & i) >> 24, (16711680 & i) >> 16, (65280 & i) >> 8, 255 & i])))), i += 1;
        }return n;
      }function nn(t) {
        for (var e in br.crypto.Util.DIGESTINFOHEAD) {
          var r = br.crypto.Util.DIGESTINFOHEAD[e],
              n = r.length;if (t.substring(0, n) == r) return [e, t.substring(n)];
        }return [];
      }function on(t) {
        var e,
            r = Er,
            n = r.getChildIdx,
            i = r.getV,
            o = r.getTLV,
            s = r.getVbyList,
            a = r.getVbyListEx,
            u = r.getTLVbyList,
            c = r.getTLVbyListEx,
            h = r.getIdxbyList,
            l = r.getIdxbyListEx,
            f = r.getVidx,
            g = r.oidname,
            d = r.hextooidstr,
            p = on,
            v = Hr;try {
          e = br.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;
        } catch (t) {}this.HEX2STAG = { "0c": "utf8", 13: "prn", 16: "ia5", "1a": "vis", "1e": "bmp" }, this.hex = null, this.version = 0, this.foffset = 0, this.aExtInfo = null, this.getVersion = function () {
          return null === this.hex || 0 !== this.version ? this.version : "a003020102" !== u(this.hex, 0, [0, 0]) ? (this.version = 1, this.foffset = -1, 1) : (this.version = 3, 3);
        }, this.getSerialNumberHex = function () {
          return a(this.hex, 0, [0, 0], "02");
        }, this.getSignatureAlgorithmField = function () {
          var t = c(this.hex, 0, [0, 1]);return this.getAlgorithmIdentifierName(t);
        }, this.getAlgorithmIdentifierName = function (t) {
          for (var r in e) {
            if (t === e[r]) return r;
          }return g(a(t, 0, [0], "06"));
        }, this.getIssuer = function () {
          return this.getX500Name(this.getIssuerHex());
        }, this.getIssuerHex = function () {
          return u(this.hex, 0, [0, 3 + this.foffset], "30");
        }, this.getIssuerString = function () {
          return p.hex2dn(this.getIssuerHex());
        }, this.getSubject = function () {
          return this.getX500Name(this.getSubjectHex());
        }, this.getSubjectHex = function () {
          return u(this.hex, 0, [0, 5 + this.foffset], "30");
        }, this.getSubjectString = function () {
          return p.hex2dn(this.getSubjectHex());
        }, this.getNotBefore = function () {
          var t = s(this.hex, 0, [0, 4 + this.foffset, 0]);return t = t.replace(/(..)/g, "%$1"), t = decodeURIComponent(t);
        }, this.getNotAfter = function () {
          var t = s(this.hex, 0, [0, 4 + this.foffset, 1]);return t = t.replace(/(..)/g, "%$1"), t = decodeURIComponent(t);
        }, this.getPublicKeyHex = function () {
          return r.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
        }, this.getPublicKeyIdx = function () {
          return h(this.hex, 0, [0, 6 + this.foffset], "30");
        }, this.getPublicKeyContentIdx = function () {
          var t = this.getPublicKeyIdx();return h(this.hex, t, [1, 0], "30");
        }, this.getPublicKey = function () {
          return Zr.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
        }, this.getSignatureAlgorithmName = function () {
          var t = u(this.hex, 0, [1], "30");return this.getAlgorithmIdentifierName(t);
        }, this.getSignatureValueHex = function () {
          return s(this.hex, 0, [2], "03", !0);
        }, this.verifySignature = function (t) {
          var e = this.getSignatureAlgorithmField(),
              r = this.getSignatureValueHex(),
              n = u(this.hex, 0, [0], "30"),
              i = new br.crypto.Signature({ alg: e });return i.init(t), i.updateHex(n), i.verify(r);
        }, this.parseExt = function (t) {
          var e, o, a;if (void 0 === t) {
            if (a = this.hex, 3 !== this.version) return -1;e = h(a, 0, [0, 7, 0], "30"), o = n(a, e);
          } else {
            a = Hr(t);var u = h(a, 0, [0, 3, 0, 0], "06");if ("2a864886f70d01090e" != i(a, u)) return void (this.aExtInfo = new Array());e = h(a, 0, [0, 3, 0, 1, 0], "30"), o = n(a, e), this.hex = a;
          }this.aExtInfo = new Array();for (var c = 0; c < o.length; c++) {
            var l = { critical: !1 },
                g = 0;3 === n(a, o[c]).length && (l.critical = !0, g = 1), l.oid = r.hextooidstr(s(a, o[c], [0], "06"));var d = h(a, o[c], [1 + g]);l.vidx = f(a, d), this.aExtInfo.push(l);
          }
        }, this.getExtInfo = function (t) {
          var e = this.aExtInfo,
              r = t;if (t.match(/^[0-9.]+$/) || (r = br.asn1.x509.OID.name2oid(t)), "" !== r) for (var n = 0; n < e.length; n++) {
            if (e[n].oid === r) return e[n];
          }
        }, this.getExtBasicConstraints = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("basicConstraints");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var n = { extname: "basicConstraints" };if (e && (n.critical = !0), "3000" === t) return n;if ("30030101ff" === t) return n.cA = !0, n;if ("30060101ff02" === t.substr(0, 12)) {
            var s = i(t, 10),
                a = parseInt(s, 16);return n.cA = !0, n.pathLen = a, n;
          }throw new Error("hExtV parse error: " + t);
        }, this.getExtKeyUsage = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("keyUsage");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var n = { extname: "keyUsage" };return e && (n.critical = !0), n.names = this.getExtKeyUsageString(t).split(","), n;
        }, this.getExtKeyUsageBin = function (t) {
          if (void 0 === t) {
            var e = this.getExtInfo("keyUsage");if (void 0 === e) return "";t = o(this.hex, e.vidx);
          }if (8 != t.length && 10 != t.length) throw new Error("malformed key usage value: " + t);var r = "000000000000000" + parseInt(t.substr(6), 16).toString(2);return 8 == t.length && (r = r.slice(-8)), 10 == t.length && (r = r.slice(-16)), "" == (r = r.replace(/0+$/, "")) && (r = "0"), r;
        }, this.getExtKeyUsageString = function (t) {
          for (var e = this.getExtKeyUsageBin(t), r = new Array(), n = 0; n < e.length; n++) {
            "1" == e.substr(n, 1) && r.push(on.KEYUSAGE_NAME[n]);
          }return r.join(",");
        }, this.getExtSubjectKeyIdentifier = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("subjectKeyIdentifier");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var n = { extname: "subjectKeyIdentifier" };e && (n.critical = !0);var s = i(t, 0);return n.kid = { hex: s }, n;
        }, this.getExtAuthorityKeyIdentifier = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("authorityKeyIdentifier");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var s = { extname: "authorityKeyIdentifier" };e && (s.critical = !0);for (var a = n(t, 0), u = 0; u < a.length; u++) {
            var c = t.substr(a[u], 2);if ("80" === c && (s.kid = { hex: i(t, a[u]) }), "a1" === c) {
              var h = o(t, a[u]),
                  l = this.getGeneralNames(h);s.issuer = l[0].dn;
            }"82" === c && (s.sn = { hex: i(t, a[u]) });
          }return s;
        }, this.getExtExtKeyUsage = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("extKeyUsage");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var s = { extname: "extKeyUsage", array: [] };e && (s.critical = !0);for (var a = n(t, 0), u = 0; u < a.length; u++) {
            s.array.push(g(i(t, a[u])));
          }return s;
        }, this.getExtExtKeyUsageName = function () {
          var t = this.getExtInfo("extKeyUsage");if (void 0 === t) return t;var e = new Array(),
              r = o(this.hex, t.vidx);if ("" === r) return e;for (var s = n(r, 0), a = 0; a < s.length; a++) {
            e.push(g(i(r, s[a])));
          }return e;
        }, this.getExtSubjectAltName = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("subjectAltName");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var n = { extname: "subjectAltName", array: [] };return e && (n.critical = !0), n.array = this.getGeneralNames(t), n;
        }, this.getExtIssuerAltName = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("issuerAltName");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var n = { extname: "issuerAltName", array: [] };return e && (n.critical = !0), n.array = this.getGeneralNames(t), n;
        }, this.getGeneralNames = function (t) {
          for (var e = n(t, 0), r = [], i = 0; i < e.length; i++) {
            var s = this.getGeneralName(o(t, e[i]));void 0 !== s && r.push(s);
          }return r;
        }, this.getGeneralName = function (t) {
          var e = t.substr(0, 2),
              r = i(t, 0),
              n = Nr(r);return "81" == e ? { rfc822: n } : "82" == e ? { dns: n } : "86" == e ? { uri: n } : "87" == e ? { ip: Yr(r) } : "a4" == e ? { dn: this.getX500Name(r) } : void 0;
        }, this.getExtSubjectAltName2 = function () {
          var t,
              e,
              r,
              s = this.getExtInfo("subjectAltName");if (void 0 === s) return s;for (var a = new Array(), u = o(this.hex, s.vidx), c = n(u, 0), h = 0; h < c.length; h++) {
            r = u.substr(c[h], 2), t = i(u, c[h]), "81" === r && (e = Lr(t), a.push(["MAIL", e])), "82" === r && (e = Lr(t), a.push(["DNS", e])), "84" === r && (e = on.hex2dn(t, 0), a.push(["DN", e])), "86" === r && (e = Lr(t), a.push(["URI", e])), "87" === r && (e = Yr(t), a.push(["IP", e]));
          }return a;
        }, this.getExtCRLDistributionPoints = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("cRLDistributionPoints");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var i = { extname: "cRLDistributionPoints", array: [] };e && (i.critical = !0);for (var s = n(t, 0), a = 0; a < s.length; a++) {
            var u = o(t, s[a]);i.array.push(this.getDistributionPoint(u));
          }return i;
        }, this.getDistributionPoint = function (t) {
          for (var e = {}, r = n(t, 0), i = 0; i < r.length; i++) {
            var s = t.substr(r[i], 2),
                a = o(t, r[i]);"a0" == s && (e.dpname = this.getDistributionPointName(a));
          }return e;
        }, this.getDistributionPointName = function (t) {
          for (var e = {}, r = n(t, 0), i = 0; i < r.length; i++) {
            var s = t.substr(r[i], 2),
                a = o(t, r[i]);"a0" == s && (e.full = this.getGeneralNames(a));
          }return e;
        }, this.getExtCRLDistributionPointsURI = function () {
          var t = this.getExtInfo("cRLDistributionPoints");if (void 0 === t) return t;for (var e = new Array(), r = n(this.hex, t.vidx), i = 0; i < r.length; i++) {
            try {
              var o = Lr(s(this.hex, r[i], [0, 0, 0], "86"));e.push(o);
            } catch (t) {}
          }return e;
        }, this.getExtAIAInfo = function () {
          var t = this.getExtInfo("authorityInfoAccess");if (void 0 === t) return t;for (var e = { ocsp: [], caissuer: [] }, r = n(this.hex, t.vidx), i = 0; i < r.length; i++) {
            var o = s(this.hex, r[i], [0], "06"),
                a = s(this.hex, r[i], [1], "86");"2b06010505073001" === o && e.ocsp.push(Lr(a)), "2b06010505073002" === o && e.caissuer.push(Lr(a));
          }return e;
        }, this.getExtAuthorityInfoAccess = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("authorityInfoAccess");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var i = { extname: "authorityInfoAccess", array: [] };e && (i.critical = !0);for (var u = n(t, 0), c = 0; c < u.length; c++) {
            var h = a(t, u[c], [0], "06"),
                l = Lr(s(t, u[c], [1], "86"));if ("2b06010505073001" == h) i.array.push({ ocsp: l });else {
              if ("2b06010505073002" != h) throw new Error("unknown method: " + h);i.array.push({ caissuer: l });
            }
          }return i;
        }, this.getExtCertificatePolicies = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("certificatePolicies");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var i = { extname: "certificatePolicies", array: [] };e && (i.critical = !0);for (var s = n(t, 0), a = 0; a < s.length; a++) {
            var u = o(t, s[a]),
                c = this.getPolicyInformation(u);i.array.push(c);
          }return i;
        }, this.getPolicyInformation = function (t) {
          var e = {},
              r = s(t, 0, [0], "06");e.policyoid = g(r);var i = l(t, 0, [1], "30");if (-1 != i) {
            e.array = [];for (var a = n(t, i), u = 0; u < a.length; u++) {
              var c = o(t, a[u]),
                  h = this.getPolicyQualifierInfo(c);e.array.push(h);
            }
          }return e;
        }, this.getPolicyQualifierInfo = function (t) {
          var e = {},
              r = s(t, 0, [0], "06");if ("2b06010505070201" === r) {
            var n = a(t, 0, [1], "16");e.cps = Nr(n);
          } else if ("2b06010505070202" === r) {
            var i = u(t, 0, [1], "30");e.unotice = this.getUserNotice(i);
          }return e;
        }, this.getUserNotice = function (t) {
          for (var e = {}, r = n(t, 0), i = 0; i < r.length; i++) {
            var s = o(t, r[i]);"30" != s.substr(0, 2) && (e.exptext = this.getDisplayText(s));
          }return e;
        }, this.getDisplayText = function (t) {
          var e = {};return e.type = { "0c": "utf8", 16: "ia5", "1a": "vis", "1e": "bmp" }[t.substr(0, 2)], e.str = Nr(i(t, 0)), e;
        }, this.getExtCRLNumber = function (t, e) {
          var r = { extname: "cRLNumber" };if (e && (r.critical = !0), "02" == t.substr(0, 2)) return r.num = { hex: i(t, 0) }, r;throw new Error("hExtV parse error: " + t);
        }, this.getExtCRLReason = function (t, e) {
          var r = { extname: "cRLReason" };if (e && (r.critical = !0), "0a" == t.substr(0, 2)) return r.code = parseInt(i(t, 0), 16), r;throw new Error("hExtV parse error: " + t);
        }, this.getExtOcspNonce = function (t, e) {
          var r = { extname: "ocspNonce" };e && (r.critical = !0);var n = i(t, 0);return r.hex = n, r;
        }, this.getExtOcspNoCheck = function (t, e) {
          var r = { extname: "ocspNoCheck" };return e && (r.critical = !0), r;
        }, this.getExtAdobeTimeStamp = function (t, e) {
          if (void 0 === t && void 0 === e) {
            var r = this.getExtInfo("adobeTimeStamp");if (void 0 === r) return;t = o(this.hex, r.vidx), e = r.critical;
          }var i = { extname: "adobeTimeStamp" };e && (i.critical = !0);var s = n(t, 0);if (s.length > 1) {
            var a = o(t, s[1]),
                u = this.getGeneralName(a);null != u.uri && (i.uri = u.uri);
          }if (s.length > 2) {
            var c = o(t, s[2]);"0101ff" == c && (i.reqauth = !0), "010100" == c && (i.reqauth = !1);
          }return i;
        }, this.getX500NameRule = function (t) {
          for (var e = null, r = [], n = 0; n < t.length; n++) {
            for (var i = t[n], o = 0; o < i.length; o++) {
              r.push(i[o]);
            }
          }for (n = 0; n < r.length; n++) {
            var s = r[n],
                a = s.ds,
                u = s.value,
                c = s.type;if (":" + a, "prn" != a && "utf8" != a && "ia5" != a) return "mixed";if ("ia5" == a) {
              if ("CN" != c) return "mixed";if (br.lang.String.isMail(u)) continue;return "mixed";
            }if ("C" == c) {
              if ("prn" == a) continue;return "mixed";
            }if (":" + a, null == e) e = a;else if (e !== a) return "mixed";
          }return null == e ? "prn" : e;
        }, this.getX500Name = function (t) {
          var e = this.getX500NameArray(t);return { array: e, str: this.dnarraytostr(e) };
        }, this.getX500NameArray = function (t) {
          for (var e = [], r = n(t, 0), i = 0; i < r.length; i++) {
            e.push(this.getRDN(o(t, r[i])));
          }return e;
        }, this.getRDN = function (t) {
          for (var e = [], r = n(t, 0), i = 0; i < r.length; i++) {
            e.push(this.getAttrTypeAndValue(o(t, r[i])));
          }return e;
        }, this.getAttrTypeAndValue = function (t) {
          var e = { type: null, value: null, ds: null },
              r = n(t, 0),
              i = s(t, r[0], [], "06"),
              o = s(t, r[1], []),
              a = br.asn1.ASN1Util.oidHexToInt(i);return e.type = br.asn1.x509.OID.oid2atype(a), e.value = Nr(o), e.ds = this.HEX2STAG[t.substr(r[1], 2)], e;
        }, this.readCertPEM = function (t) {
          this.readCertHex(v(t));
        }, this.readCertHex = function (t) {
          this.hex = t, this.getVersion();try {
            h(this.hex, 0, [0, 7], "a3"), this.parseExt();
          } catch (t) {}
        }, this.getParam = function () {
          var t = {};return t.version = this.getVersion(), t.serial = { hex: this.getSerialNumberHex() }, t.sigalg = this.getSignatureAlgorithmField(), t.issuer = this.getIssuer(), t.notbefore = this.getNotBefore(), t.notafter = this.getNotAfter(), t.subject = this.getSubject(), t.sbjpubkey = Mr(this.getPublicKeyHex(), "PUBLIC KEY"), this.aExtInfo.length > 0 && (t.ext = this.getExtParamArray()), t.sighex = this.getSignatureValueHex(), t;
        }, this.getExtParamArray = function (t) {
          null == t && -1 != l(this.hex, 0, [0, "[3]"]) && (t = c(this.hex, 0, [0, "[3]", 0], "30"));for (var e = [], r = n(t, 0), i = 0; i < r.length; i++) {
            var s = o(t, r[i]),
                a = this.getExtParam(s);null != a && e.push(a);
          }return e;
        }, this.getExtParam = function (t) {
          var e = n(t, 0).length;if (2 != e && 3 != e) throw new Error("wrong number elements in Extension: " + e + " " + t);var r = d(s(t, 0, [0], "06")),
              i = !1;3 == e && "0101ff" == u(t, 0, [1]) && (i = !0);var o = u(t, 0, [e - 1, 0]),
              a = void 0;if ("2.5.29.14" == r ? a = this.getExtSubjectKeyIdentifier(o, i) : "2.5.29.15" == r ? a = this.getExtKeyUsage(o, i) : "2.5.29.17" == r ? a = this.getExtSubjectAltName(o, i) : "2.5.29.18" == r ? a = this.getExtIssuerAltName(o, i) : "2.5.29.19" == r ? a = this.getExtBasicConstraints(o, i) : "2.5.29.31" == r ? a = this.getExtCRLDistributionPoints(o, i) : "2.5.29.32" == r ? a = this.getExtCertificatePolicies(o, i) : "2.5.29.35" == r ? a = this.getExtAuthorityKeyIdentifier(o, i) : "2.5.29.37" == r ? a = this.getExtExtKeyUsage(o, i) : "1.3.6.1.5.5.7.1.1" == r ? a = this.getExtAuthorityInfoAccess(o, i) : "2.5.29.20" == r ? a = this.getExtCRLNumber(o, i) : "2.5.29.21" == r ? a = this.getExtCRLReason(o, i) : "1.3.6.1.5.5.7.48.1.2" == r ? a = this.getExtOcspNonce(o, i) : "1.3.6.1.5.5.7.48.1.5" == r ? a = this.getExtOcspNoCheck(o, i) : "1.2.840.113583.1.1.9.1" == r && (a = this.getExtAdobeTimeStamp(o, i)), null != a) return a;var c = { extname: r, extn: o };return i && (c.critical = !0), c;
        }, this.findExt = function (t, e) {
          for (var r = 0; r < t.length; r++) {
            if (t[r].extname == e) return t[r];
          }return null;
        }, this.updateExtCDPFullURI = function (t, e) {
          var r = this.findExt(t, "cRLDistributionPoints");if (null != r && null != r.array) for (var n = r.array, i = 0; i < n.length; i++) {
            if (null != n[i].dpname && null != n[i].dpname.full) for (var o = n[i].dpname.full, s = 0; s < o.length; s++) {
              var a = o[i];null != a.uri && (a.uri = e);
            }
          }
        }, this.updateExtAIAOCSP = function (t, e) {
          var r = this.findExt(t, "authorityInfoAccess");if (null != r && null != r.array) for (var n = r.array, i = 0; i < n.length; i++) {
            null != n[i].ocsp && (n[i].ocsp = e);
          }
        }, this.updateExtAIACAIssuer = function (t, e) {
          var r = this.findExt(t, "authorityInfoAccess");if (null != r && null != r.array) for (var n = r.array, i = 0; i < n.length; i++) {
            null != n[i].caissuer && (n[i].caissuer = e);
          }
        }, this.dnarraytostr = function (t) {
          return "/" + t.map(function (t) {
            return function e(t) {
              return t.map(function (t) {
                return function e(t) {
                  return t.type + "=" + t.value;
                }(t);
              }).join("+");
            }(t);
          }).join("/");
        }, this.getInfo = function () {
          var t,
              e,
              r,
              n = function t(e) {
            return JSON.stringify(e.array).replace(/[\[\]\{\}\"]/g, "");
          },
              i = function t(e) {
            for (var r = "", n = e.array, i = 0; i < n.length; i++) {
              var o = n[i];if (r += "    policy oid: " + o.policyoid + "\n", void 0 !== o.array) for (var s = 0; s < o.array.length; s++) {
                var a = o.array[s];void 0 !== a.cps && (r += "    cps: " + a.cps + "\n");
              }
            }return r;
          },
              o = function t(e) {
            for (var r = "", n = e.array, i = 0; i < n.length; i++) {
              var o = n[i];try {
                void 0 !== o.dpname.full[0].uri && (r += "    " + o.dpname.full[0].uri + "\n");
              } catch (t) {}try {
                void 0 !== o.dname.full[0].dn.hex && (r += "    " + on.hex2dn(o.dpname.full[0].dn.hex) + "\n");
              } catch (t) {}
            }return r;
          },
              s = function t(e) {
            for (var r = "", n = e.array, i = 0; i < n.length; i++) {
              var o = n[i];void 0 !== o.caissuer && (r += "    caissuer: " + o.caissuer + "\n"), void 0 !== o.ocsp && (r += "    ocsp: " + o.ocsp + "\n");
            }return r;
          };if (t = "Basic Fields\n", t += "  serial number: " + this.getSerialNumberHex() + "\n", t += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n", t += "  issuer: " + this.getIssuerString() + "\n", t += "  notBefore: " + this.getNotBefore() + "\n", t += "  notAfter: " + this.getNotAfter() + "\n", t += "  subject: " + this.getSubjectString() + "\n", t += "  subject public key info: \n", t += "    key algorithm: " + (e = this.getPublicKey()).type + "\n", "RSA" === e.type && (t += "    n=" + $r(e.n.toString(16)).substr(0, 16) + "...\n", t += "    e=" + $r(e.e.toString(16)) + "\n"), null != (r = this.aExtInfo)) {
            t += "X509v3 Extensions:\n";for (var a = 0; a < r.length; a++) {
              var u = r[a],
                  c = br.asn1.x509.OID.oid2name(u.oid);"" === c && (c = u.oid);var h = "";if (!0 === u.critical && (h = "CRITICAL"), t += "  " + c + " " + h + ":\n", "basicConstraints" === c) {
                var l = this.getExtBasicConstraints();void 0 === l.cA ? t += "    {}\n" : (t += "    cA=true", void 0 !== l.pathLen && (t += ", pathLen=" + l.pathLen), t += "\n");
              } else if ("keyUsage" === c) t += "    " + this.getExtKeyUsageString() + "\n";else if ("subjectKeyIdentifier" === c) t += "    " + this.getExtSubjectKeyIdentifier().kid.hex + "\n";else if ("authorityKeyIdentifier" === c) {
                var f = this.getExtAuthorityKeyIdentifier();void 0 !== f.kid && (t += "    kid=" + f.kid.hex + "\n");
              } else {
                if ("extKeyUsage" === c) t += "    " + this.getExtExtKeyUsage().array.join(", ") + "\n";else if ("subjectAltName" === c) t += "    " + n(this.getExtSubjectAltName()) + "\n";else if ("cRLDistributionPoints" === c) t += o(this.getExtCRLDistributionPoints());else if ("authorityInfoAccess" === c) t += s(this.getExtAuthorityInfoAccess());else "certificatePolicies" === c && (t += i(this.getExtCertificatePolicies()));
              }
            }
          }return t += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n", t += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";
        }, "string" == typeof t && (-1 != t.indexOf("-----BEGIN") ? this.readCertPEM(t) : br.lang.String.isHex(t) && this.readCertHex(t));
      }He.prototype.sign = function (t, e) {
        var r = function t(r) {
          return br.crypto.Util.hashString(r, e);
        }(t);return this.signWithMessageHash(r, e);
      }, He.prototype.signWithMessageHash = function (t, e) {
        var r = je(br.crypto.Util.getPaddedDigestInfoHex(t, e, this.n.bitLength()), 16);return en(this.doPrivate(r).toString(16), this.n.bitLength());
      }, He.prototype.signPSS = function (t, e, r) {
        var n = function t(r) {
          return br.crypto.Util.hashHex(r, e);
        }(Ur(t));return void 0 === r && (r = -1), this.signWithMessageHashPSS(n, e, r);
      }, He.prototype.signWithMessageHashPSS = function (t, e, r) {
        var n,
            i = Nr(t),
            o = i.length,
            s = this.n.bitLength() - 1,
            a = Math.ceil(s / 8),
            u = function t(r) {
          return br.crypto.Util.hashHex(r, e);
        };if (-1 === r || void 0 === r) r = o;else if (-2 === r) r = a - o - 2;else if (r < -2) throw new Error("invalid salt length");if (a < o + r + 2) throw new Error("data too long");var c = "";r > 0 && (c = new Array(r), new Oe().nextBytes(c), c = String.fromCharCode.apply(String, c));var h = Nr(u(Ur("\0\0\0\0\0\0\0\0" + i + c))),
            l = [];for (n = 0; n < a - r - o - 2; n += 1) {
          l[n] = 0;
        }var f = String.fromCharCode.apply(String, l) + "" + c,
            g = rn(h, f.length, u),
            d = [];for (n = 0; n < f.length; n += 1) {
          d[n] = f.charCodeAt(n) ^ g.charCodeAt(n);
        }var p = 65280 >> 8 * a - s & 255;for (d[0] &= ~p, n = 0; n < o; n++) {
          d.push(h.charCodeAt(n));
        }return d.push(188), en(this.doPrivate(new F(d)).toString(16), this.n.bitLength());
      }, He.prototype.verify = function (t, e) {
        var r = je(e = (e = e.replace(tn, "")).replace(/[ \n]+/g, ""), 16);if (r.bitLength() > this.n.bitLength()) return 0;var n = nn(this.doPublic(r).toString(16).replace(/^1f+00/, ""));if (0 == n.length) return !1;var i = n[0];return n[1] == function t(e) {
          return br.crypto.Util.hashString(e, i);
        }(t);
      }, He.prototype.verifyWithMessageHash = function (t, e) {
        if (e.length != Math.ceil(this.n.bitLength() / 4)) return !1;var r = je(e, 16);if (r.bitLength() > this.n.bitLength()) return 0;var n = nn(this.doPublic(r).toString(16).replace(/^1f+00/, ""));if (0 == n.length) return !1;n[0];return n[1] == t;
      }, He.prototype.verifyPSS = function (t, e, r, n) {
        var i = function t(e) {
          return br.crypto.Util.hashHex(e, r);
        }(Ur(t));return void 0 === n && (n = -1), this.verifyWithMessageHashPSS(i, e, r, n);
      }, He.prototype.verifyWithMessageHashPSS = function (t, e, r, n) {
        if (e.length != Math.ceil(this.n.bitLength() / 4)) return !1;var i,
            o = new F(e, 16),
            s = function t(e) {
          return br.crypto.Util.hashHex(e, r);
        },
            a = Nr(t),
            u = a.length,
            c = this.n.bitLength() - 1,
            h = Math.ceil(c / 8);if (-1 === n || void 0 === n) n = u;else if (-2 === n) n = h - u - 2;else if (n < -2) throw new Error("invalid salt length");if (h < u + n + 2) throw new Error("data too long");var l = this.doPublic(o).toByteArray();for (i = 0; i < l.length; i += 1) {
          l[i] &= 255;
        }for (; l.length < h;) {
          l.unshift(0);
        }if (188 !== l[h - 1]) throw new Error("encoded message does not end in 0xbc");var f = (l = String.fromCharCode.apply(String, l)).substr(0, h - u - 1),
            g = l.substr(f.length, u),
            d = 65280 >> 8 * h - c & 255;if (0 != (f.charCodeAt(0) & d)) throw new Error("bits beyond keysize not zero");var p = rn(g, f.length, s),
            v = [];for (i = 0; i < f.length; i += 1) {
          v[i] = f.charCodeAt(i) ^ p.charCodeAt(i);
        }v[0] &= ~d;var y = h - u - n - 2;for (i = 0; i < y; i += 1) {
          if (0 !== v[i]) throw new Error("leftmost octets not zero");
        }if (1 !== v[y]) throw new Error("0x01 marker not found");return g === Nr(s(Ur("\0\0\0\0\0\0\0\0" + a + String.fromCharCode.apply(String, v.slice(-n)))));
      }, He.SALT_LEN_HLEN = -1, He.SALT_LEN_MAX = -2, He.SALT_LEN_RECOVER = -2, on.hex2dn = function (t, e) {
        if (void 0 === e && (e = 0), "30" !== t.substr(e, 2)) throw new Error("malformed DN");for (var r = new Array(), n = Er.getChildIdx(t, e), i = 0; i < n.length; i++) {
          r.push(on.hex2rdn(t, n[i]));
        }return "/" + (r = r.map(function (t) {
          return t.replace("/", "\\/");
        })).join("/");
      }, on.hex2rdn = function (t, e) {
        if (void 0 === e && (e = 0), "31" !== t.substr(e, 2)) throw new Error("malformed RDN");for (var r = new Array(), n = Er.getChildIdx(t, e), i = 0; i < n.length; i++) {
          r.push(on.hex2attrTypeValue(t, n[i]));
        }return (r = r.map(function (t) {
          return t.replace("+", "\\+");
        })).join("+");
      }, on.hex2attrTypeValue = function (t, e) {
        var r = Er,
            n = r.getV;if (void 0 === e && (e = 0), "30" !== t.substr(e, 2)) throw new Error("malformed attribute type and value");var i = r.getChildIdx(t, e);2 !== i.length || t.substr(i[0], 2);var o = n(t, i[0]),
            s = br.asn1.ASN1Util.oidHexToInt(o);return br.asn1.x509.OID.oid2atype(s) + "=" + Nr(n(t, i[1]));
      }, on.getPublicKeyFromCertHex = function (t) {
        var e = new on();return e.readCertHex(t), e.getPublicKey();
      }, on.getPublicKeyFromCertPEM = function (t) {
        var e = new on();return e.readCertPEM(t), e.getPublicKey();
      }, on.getPublicKeyInfoPropOfCertPEM = function (t) {
        var e,
            r,
            n = Er.getVbyList,
            i = {};return i.algparam = null, (e = new on()).readCertPEM(t), r = e.getPublicKeyHex(), i.keyhex = n(r, 0, [1], "03").substr(2), i.algoid = n(r, 0, [0, 0], "06"), "2a8648ce3d0201" === i.algoid && (i.algparam = n(r, 0, [0, 1], "06")), i;
      }, on.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"], void 0 !== br && br || (e.KJUR = br = {}), void 0 !== br.jws && br.jws || (br.jws = {}), br.jws.JWS = function () {
        var t = br.jws.JWS.isSafeJSONString;this.parseJWS = function (e, r) {
          if (void 0 === this.parsedJWS || !r && void 0 === this.parsedJWS.sigvalH) {
            var n = e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (null == n) throw "JWS signature is not a form of 'Head.Payload.SigValue'.";var i = n[1],
                o = n[2],
                s = n[3],
                a = i + "." + o;if (this.parsedJWS = {}, this.parsedJWS.headB64U = i, this.parsedJWS.payloadB64U = o, this.parsedJWS.sigvalB64U = s, this.parsedJWS.si = a, !r) {
              var u = Ir(s),
                  c = je(u, 16);this.parsedJWS.sigvalH = u, this.parsedJWS.sigvalBI = c;
            }var h = Fr(i),
                l = Fr(o);if (this.parsedJWS.headS = h, this.parsedJWS.payloadS = l, !t(h, this.parsedJWS, "headP")) throw "malformed JSON string for JWS Head: " + h;
          }
        };
      }, br.jws.JWS.sign = function (t, e, n, i, o) {
        var s,
            a,
            u,
            c = br,
            h = c.jws.JWS,
            l = h.readSafeJSONString,
            f = h.isSafeJSONString,
            g = c.crypto,
            d = (g.ECDSA, g.Mac),
            p = g.Signature,
            v = JSON;if ("string" != typeof e && "object" != (void 0 === e ? "undefined" : r(e))) throw "spHeader must be JSON string or object: " + e;if ("object" == (void 0 === e ? "undefined" : r(e)) && (a = e, s = v.stringify(a)), "string" == typeof e) {
          if (!f(s = e)) throw "JWS Head is not safe JSON string: " + s;a = l(s);
        }if (u = n, "object" == (void 0 === n ? "undefined" : r(n)) && (u = v.stringify(n)), "" != t && null != t || void 0 === a.alg || (t = a.alg), "" != t && null != t && void 0 === a.alg && (a.alg = t, s = v.stringify(a)), t !== a.alg) throw "alg and sHeader.alg doesn't match: " + t + "!=" + a.alg;var y = null;if (void 0 === h.jwsalg2sigalg[t]) throw "unsupported alg name: " + t;y = h.jwsalg2sigalg[t];var m = wr(s) + "." + wr(u),
            _ = "";if ("Hmac" == y.substr(0, 4)) {
          if (void 0 === i) throw "mac key shall be specified for HS* alg";var S = new d({ alg: y, prov: "cryptojs", pass: i });S.updateString(m), _ = S.doFinal();
        } else if (-1 != y.indexOf("withECDSA")) {
          (w = new p({ alg: y })).init(i, o), w.updateString(m);var b = w.sign();_ = br.crypto.ECDSA.asn1SigToConcatSig(b);
        } else {
          var w;if ("none" != y) (w = new p({ alg: y })).init(i, o), w.updateString(m), _ = w.sign();
        }return m + "." + Rr(_);
      }, br.jws.JWS.verify = function (t, e, n) {
        var i,
            o = br,
            s = o.jws.JWS,
            a = s.readSafeJSONString,
            u = o.crypto,
            c = u.ECDSA,
            h = u.Mac,
            l = u.Signature;void 0 !== r(He) && (i = He);var f = t.split(".");if (3 !== f.length) return !1;var g = f[0] + "." + f[1],
            d = Ir(f[2]),
            p = a(Fr(f[0])),
            v = null,
            y = null;if (void 0 === p.alg) throw "algorithm not specified in header";if ((y = (v = p.alg).substr(0, 2), null != n && "[object Array]" === Object.prototype.toString.call(n) && n.length > 0) && -1 == (":" + n.join(":") + ":").indexOf(":" + v + ":")) throw "algorithm '" + v + "' not accepted in the list";if ("none" != v && null === e) throw "key shall be specified to verify.";if ("string" == typeof e && -1 != e.indexOf("-----BEGIN ") && (e = Zr.getKey(e)), !("RS" != y && "PS" != y || e instanceof i)) throw "key shall be a RSAKey obj for RS* and PS* algs";if ("ES" == y && !(e instanceof c)) throw "key shall be a ECDSA obj for ES* algs";var m = null;if (void 0 === s.jwsalg2sigalg[p.alg]) throw "unsupported alg name: " + v;if ("none" == (m = s.jwsalg2sigalg[v])) throw "not supported";if ("Hmac" == m.substr(0, 4)) {
          if (void 0 === e) throw "hexadecimal key shall be specified for HMAC";var _ = new h({ alg: m, pass: e });return _.updateString(g), d == _.doFinal();
        }if (-1 != m.indexOf("withECDSA")) {
          var S,
              b = null;try {
            b = c.concatSigToASN1Sig(d);
          } catch (t) {
            return !1;
          }return (S = new l({ alg: m })).init(e), S.updateString(g), S.verify(b);
        }return (S = new l({ alg: m })).init(e), S.updateString(g), S.verify(d);
      }, br.jws.JWS.parse = function (t) {
        var e,
            r,
            n,
            i = t.split("."),
            o = {};if (2 != i.length && 3 != i.length) throw "malformed sJWS: wrong number of '.' splitted elements";return e = i[0], r = i[1], 3 == i.length && (n = i[2]), o.headerObj = br.jws.JWS.readSafeJSONString(Fr(e)), o.payloadObj = br.jws.JWS.readSafeJSONString(Fr(r)), o.headerPP = JSON.stringify(o.headerObj, null, "  "), null == o.payloadObj ? o.payloadPP = Fr(r) : o.payloadPP = JSON.stringify(o.payloadObj, null, "  "), void 0 !== n && (o.sigHex = Ir(n)), o;
      }, br.jws.JWS.verifyJWT = function (t, e, n) {
        var i = br.jws,
            o = i.JWS,
            s = o.readSafeJSONString,
            a = o.inArray,
            u = o.includedArray,
            c = t.split("."),
            h = c[0],
            l = c[1],
            f = (Ir(c[2]), s(Fr(h))),
            g = s(Fr(l));if (void 0 === f.alg) return !1;if (void 0 === n.alg) throw "acceptField.alg shall be specified";if (!a(f.alg, n.alg)) return !1;if (void 0 !== g.iss && "object" === r(n.iss) && !a(g.iss, n.iss)) return !1;if (void 0 !== g.sub && "object" === r(n.sub) && !a(g.sub, n.sub)) return !1;if (void 0 !== g.aud && "object" === r(n.aud)) if ("string" == typeof g.aud) {
          if (!a(g.aud, n.aud)) return !1;
        } else if ("object" == r(g.aud) && !u(g.aud, n.aud)) return !1;var d = i.IntDate.getNow();return void 0 !== n.verifyAt && "number" == typeof n.verifyAt && (d = n.verifyAt), void 0 !== n.gracePeriod && "number" == typeof n.gracePeriod || (n.gracePeriod = 0), !(void 0 !== g.exp && "number" == typeof g.exp && g.exp + n.gracePeriod < d) && !(void 0 !== g.nbf && "number" == typeof g.nbf && d < g.nbf - n.gracePeriod) && !(void 0 !== g.iat && "number" == typeof g.iat && d < g.iat - n.gracePeriod) && (void 0 === g.jti || void 0 === n.jti || g.jti === n.jti) && !!o.verify(t, e, n.alg);
      }, br.jws.JWS.includedArray = function (t, e) {
        var n = br.jws.JWS.inArray;if (null === t) return !1;if ("object" !== (void 0 === t ? "undefined" : r(t))) return !1;if ("number" != typeof t.length) return !1;for (var i = 0; i < t.length; i++) {
          if (!n(t[i], e)) return !1;
        }return !0;
      }, br.jws.JWS.inArray = function (t, e) {
        if (null === e) return !1;if ("object" !== (void 0 === e ? "undefined" : r(e))) return !1;if ("number" != typeof e.length) return !1;for (var n = 0; n < e.length; n++) {
          if (e[n] == t) return !0;
        }return !1;
      }, br.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" }, br.jws.JWS.isSafeJSONString = function (t, e, n) {
        var i = null;try {
          return "object" != (void 0 === (i = Sr(t)) ? "undefined" : r(i)) || i.constructor === Array ? 0 : (e && (e[n] = i), 1);
        } catch (t) {
          return 0;
        }
      }, br.jws.JWS.readSafeJSONString = function (t) {
        var e = null;try {
          return "object" != (void 0 === (e = Sr(t)) ? "undefined" : r(e)) || e.constructor === Array ? null : e;
        } catch (t) {
          return null;
        }
      }, br.jws.JWS.getEncodedSignatureValueFromJWS = function (t) {
        var e = t.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (null == e) throw "JWS signature is not a form of 'Head.Payload.SigValue'.";return e[1];
      }, br.jws.JWS.getJWKthumbprint = function (t) {
        if ("RSA" !== t.kty && "EC" !== t.kty && "oct" !== t.kty) throw "unsupported algorithm for JWK Thumprint";var e = "{";if ("RSA" === t.kty) {
          if ("string" != typeof t.n || "string" != typeof t.e) throw "wrong n and e value for RSA key";e += '"e":"' + t.e + '",', e += '"kty":"' + t.kty + '",', e += '"n":"' + t.n + '"}';
        } else if ("EC" === t.kty) {
          if ("string" != typeof t.crv || "string" != typeof t.x || "string" != typeof t.y) throw "wrong crv, x and y value for EC key";e += '"crv":"' + t.crv + '",', e += '"kty":"' + t.kty + '",', e += '"x":"' + t.x + '",', e += '"y":"' + t.y + '"}';
        } else if ("oct" === t.kty) {
          if ("string" != typeof t.k) throw "wrong k value for oct(symmetric) key";e += '"kty":"' + t.kty + '",', e += '"k":"' + t.k + '"}';
        }var r = Ur(e);return Rr(br.crypto.Util.hashHex(r, "sha256"));
      }, br.jws.IntDate = {}, br.jws.IntDate.get = function (t) {
        var e = br.jws.IntDate,
            r = e.getNow,
            n = e.getZulu;if ("now" == t) return r();if ("now + 1hour" == t) return r() + 3600;if ("now + 1day" == t) return r() + 86400;if ("now + 1month" == t) return r() + 2592e3;if ("now + 1year" == t) return r() + 31536e3;if (t.match(/Z$/)) return n(t);if (t.match(/^[0-9]+$/)) return parseInt(t);throw "unsupported format: " + t;
      }, br.jws.IntDate.getZulu = function (t) {
        return Kr(t);
      }, br.jws.IntDate.getNow = function () {
        return ~~(new Date() / 1e3);
      }, br.jws.IntDate.intDate2UTCString = function (t) {
        return new Date(1e3 * t).toUTCString();
      }, br.jws.IntDate.intDate2Zulu = function (t) {
        var e = new Date(1e3 * t);return ("0000" + e.getUTCFullYear()).slice(-4) + ("00" + (e.getUTCMonth() + 1)).slice(-2) + ("00" + e.getUTCDate()).slice(-2) + ("00" + e.getUTCHours()).slice(-2) + ("00" + e.getUTCMinutes()).slice(-2) + ("00" + e.getUTCSeconds()).slice(-2) + "Z";
      }, e.SecureRandom = Oe, e.rng_seed_time = Ie, e.BigInteger = F, e.RSAKey = He;var sn = br.crypto.EDSA;e.EDSA = sn;var an = br.crypto.DSA;e.DSA = an;var un = br.crypto.Signature;e.Signature = un;var cn = br.crypto.MessageDigest;e.MessageDigest = cn;var hn = br.crypto.Mac;e.Mac = hn;var ln = br.crypto.Cipher;e.Cipher = ln, e.KEYUTIL = Zr, e.ASN1HEX = Er, e.X509 = on, e.CryptoJS = y, e.b64tohex = b, e.b64toBA = w, e.stoBA = xr, e.BAtos = kr, e.BAtohex = Ar, e.stohex = Pr, e.stob64 = function fn(t) {
        return S(Pr(t));
      }, e.stob64u = function gn(t) {
        return Cr(S(Pr(t)));
      }, e.b64utos = function dn(t) {
        return kr(w(Tr(t)));
      }, e.b64tob64u = Cr, e.b64utob64 = Tr, e.hex2b64 = S, e.hextob64u = Rr, e.b64utohex = Ir, e.utf8tob64u = wr, e.b64utoutf8 = Fr, e.utf8tob64 = function pn(t) {
        return S(qr(Gr(t)));
      }, e.b64toutf8 = function vn(t) {
        return decodeURIComponent(Jr(b(t)));
      }, e.utf8tohex = Dr, e.hextoutf8 = Lr, e.hextorstr = Nr, e.rstrtohex = Ur, e.hextob64 = Br, e.hextob64nl = Or, e.b64nltohex = jr, e.hextopem = Mr, e.pemtohex = Hr, e.hextoArrayBuffer = function yn(t) {
        if (t.length % 2 != 0) throw "input is not even length";if (null == t.match(/^[0-9A-Fa-f]+$/)) throw "input is not hexadecimal";for (var e = new ArrayBuffer(t.length / 2), r = new DataView(e), n = 0; n < t.length / 2; n++) {
          r.setUint8(n, parseInt(t.substr(2 * n, 2), 16));
        }return e;
      }, e.ArrayBuffertohex = function mn(t) {
        for (var e = "", r = new DataView(t), n = 0; n < t.byteLength; n++) {
          e += ("00" + r.getUint8(n).toString(16)).slice(-2);
        }return e;
      }, e.zulutomsec = Vr, e.zulutosec = Kr, e.zulutodate = function _n(t) {
        return new Date(Vr(t));
      }, e.datetozulu = function Sn(t, e, r) {
        var n,
            i = t.getUTCFullYear();if (e) {
          if (i < 1950 || 2049 < i) throw "not proper year for UTCTime: " + i;n = ("" + i).slice(-2);
        } else n = ("000" + i).slice(-4);if (n += ("0" + (t.getUTCMonth() + 1)).slice(-2), n += ("0" + t.getUTCDate()).slice(-2), n += ("0" + t.getUTCHours()).slice(-2), n += ("0" + t.getUTCMinutes()).slice(-2), n += ("0" + t.getUTCSeconds()).slice(-2), r) {
          var o = t.getUTCMilliseconds();0 !== o && (n += "." + (o = (o = ("00" + o).slice(-3)).replace(/0+$/g, "")));
        }return n += "Z";
      }, e.uricmptohex = qr, e.hextouricmp = Jr, e.ipv6tohex = Wr, e.hextoipv6 = zr, e.hextoip = Yr, e.iptohex = function bn(t) {
        var e = "malformed IP address";if (!(t = t.toLowerCase(t)).match(/^[0-9.]+$/)) {
          if (t.match(/^[0-9a-f:]+$/) && -1 !== t.indexOf(":")) return Wr(t);throw e;
        }var r = t.split(".");if (4 !== r.length) throw e;var n = "";try {
          for (var i = 0; i < 4; i++) {
            n += ("0" + parseInt(r[i]).toString(16)).slice(-2);
          }return n;
        } catch (t) {
          throw e;
        }
      }, e.encodeURIComponentAll = Gr, e.newline_toUnix = function wn(t) {
        return t = t.replace(/\r\n/gm, "\n");
      }, e.newline_toDos = function Fn(t) {
        return t = (t = t.replace(/\r\n/gm, "\n")).replace(/\n/gm, "\r\n");
      }, e.hextoposhex = $r, e.intarystrtohex = function En(t) {
        t = (t = (t = t.replace(/^\s*\[\s*/, "")).replace(/\s*\]\s*$/, "")).replace(/\s*/g, "");try {
          return t.split(/,/).map(function (t, e, r) {
            var n = parseInt(t);if (n < 0 || 255 < n) throw "integer not in range 0-255";return ("00" + n.toString(16)).slice(-2);
          }).join("");
        } catch (t) {
          throw "malformed integer array string: " + t;
        }
      }, e.strdiffidx = function t(e, r) {
        var n = e.length;e.length > r.length && (n = r.length);for (var i = 0; i < n; i++) {
          if (e.charCodeAt(i) != r.charCodeAt(i)) return i;
        }return e.length != r.length ? n : -1;
      }, e.KJUR = br;var xn = br.crypto;e.crypto = xn;var kn = br.asn1;e.asn1 = kn;var An = br.jws;e.jws = An;var Pn = br.lang;e.lang = Pn;
    }).call(this, r(28).Buffer);
  }, function (t, e, r) {
    "use strict";
    (function (t) {
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <http://feross.org>
       * @license  MIT
       */
      var n = r(30),
          i = r(31),
          o = r(32);function s() {
        return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }function a(t, e) {
        if (s() < e) throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t;
      }function u(t, e, r) {
        if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, r);if ("number" == typeof t) {
          if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");return l(this, t);
        }return c(this, t, e, r);
      }function c(t, e, r, n) {
        if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function i(t, e, r, n) {
          if (e.byteLength, r < 0 || e.byteLength < r) throw new RangeError("'offset' is out of bounds");if (e.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");e = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n);u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = f(t, e);return t;
        }(t, e, r, n) : "string" == typeof e ? function s(t, e, r) {
          "string" == typeof r && "" !== r || (r = "utf8");if (!u.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');var n = 0 | d(e, r),
              i = (t = a(t, n)).write(e, r);i !== n && (t = t.slice(0, i));return t;
        }(t, e, r) : function c(t, e) {
          if (u.isBuffer(e)) {
            var r = 0 | g(e.length);return 0 === (t = a(t, r)).length || e.copy(t, 0, 0, r), t;
          }if (e) {
            if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || function n(t) {
              return t != t;
            }(e.length) ? a(t, 0) : f(t, e);if ("Buffer" === e.type && o(e.data)) return f(t, e.data);
          }throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
        }(t, e);
      }function h(t) {
        if ("number" != typeof t) throw new TypeError('"size" argument must be a number');if (t < 0) throw new RangeError('"size" argument must not be negative');
      }function l(t, e) {
        if (h(e), t = a(t, e < 0 ? 0 : 0 | g(e)), !u.TYPED_ARRAY_SUPPORT) for (var r = 0; r < e; ++r) {
          t[r] = 0;
        }return t;
      }function f(t, e) {
        var r = e.length < 0 ? 0 : 0 | g(e.length);t = a(t, r);for (var n = 0; n < r; n += 1) {
          t[n] = 255 & e[n];
        }return t;
      }function g(t) {
        if (t >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");return 0 | t;
      }function d(t, e) {
        if (u.isBuffer(t)) return t.length;if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;"string" != typeof t && (t = "" + t);var r = t.length;if (0 === r) return 0;for (var n = !1;;) {
          switch (e) {case "ascii":case "latin1":case "binary":
              return r;case "utf8":case "utf-8":case void 0:
              return K(t).length;case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":
              return 2 * r;case "hex":
              return r >>> 1;case "base64":
              return q(t).length;default:
              if (n) return K(t).length;e = ("" + e).toLowerCase(), n = !0;}
        }
      }function p(t, e, r) {
        var n = !1;if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";if ((r >>>= 0) <= (e >>>= 0)) return "";for (t || (t = "utf8");;) {
          switch (t) {case "hex":
              return I(this, e, r);case "utf8":case "utf-8":
              return k(this, e, r);case "ascii":
              return T(this, e, r);case "latin1":case "binary":
              return R(this, e, r);case "base64":
              return x(this, e, r);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":
              return D(this, e, r);default:
              if (n) throw new TypeError("Unknown encoding: " + t);t = (t + "").toLowerCase(), n = !0;}
        }
      }function v(t, e, r) {
        var n = t[e];t[e] = t[r], t[r] = n;
      }function y(t, e, r, n, i) {
        if (0 === t.length) return -1;if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
          if (i) return -1;r = t.length - 1;
        } else if (r < 0) {
          if (!i) return -1;r = 0;
        }if ("string" == typeof e && (e = u.from(e, n)), u.isBuffer(e)) return 0 === e.length ? -1 : m(t, e, r, n, i);if ("number" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : m(t, [e], r, n, i);throw new TypeError("val must be string, number or Buffer");
      }function m(t, e, r, n, i) {
        var o,
            s = 1,
            a = t.length,
            u = e.length;if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
          if (t.length < 2 || e.length < 2) return -1;s = 2, a /= 2, u /= 2, r /= 2;
        }function c(t, e) {
          return 1 === s ? t[e] : t.readUInt16BE(e * s);
        }if (i) {
          var h = -1;for (o = r; o < a; o++) {
            if (c(t, o) === c(e, -1 === h ? 0 : o - h)) {
              if (-1 === h && (h = o), o - h + 1 === u) return h * s;
            } else -1 !== h && (o -= o - h), h = -1;
          }
        } else for (r + u > a && (r = a - u), o = r; o >= 0; o--) {
          for (var l = !0, f = 0; f < u; f++) {
            if (c(t, o + f) !== c(e, f)) {
              l = !1;break;
            }
          }if (l) return o;
        }return -1;
      }function _(t, e, r, n) {
        r = Number(r) || 0;var i = t.length - r;n ? (n = Number(n)) > i && (n = i) : n = i;var o = e.length;if (o % 2 != 0) throw new TypeError("Invalid hex string");n > o / 2 && (n = o / 2);for (var s = 0; s < n; ++s) {
          var a = parseInt(e.substr(2 * s, 2), 16);if (isNaN(a)) return s;t[r + s] = a;
        }return s;
      }function S(t, e, r, n) {
        return J(K(e, t.length - r), t, r, n);
      }function b(t, e, r, n) {
        return J(function i(t) {
          for (var e = [], r = 0; r < t.length; ++r) {
            e.push(255 & t.charCodeAt(r));
          }return e;
        }(e), t, r, n);
      }function w(t, e, r, n) {
        return b(t, e, r, n);
      }function F(t, e, r, n) {
        return J(q(e), t, r, n);
      }function E(t, e, r, n) {
        return J(function i(t, e) {
          for (var r, n, i, o = [], s = 0; s < t.length && !((e -= 2) < 0); ++s) {
            n = (r = t.charCodeAt(s)) >> 8, i = r % 256, o.push(i), o.push(n);
          }return o;
        }(e, t.length - r), t, r, n);
      }function x(t, e, r) {
        return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));
      }function k(t, e, r) {
        r = Math.min(t.length, r);for (var n = [], i = e; i < r;) {
          var o,
              s,
              a,
              u,
              c = t[i],
              h = null,
              l = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;if (i + l <= r) switch (l) {case 1:
              c < 128 && (h = c);break;case 2:
              128 == (192 & (o = t[i + 1])) && (u = (31 & c) << 6 | 63 & o) > 127 && (h = u);break;case 3:
              o = t[i + 1], s = t[i + 2], 128 == (192 & o) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (h = u);break;case 4:
              o = t[i + 1], s = t[i + 2], a = t[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (h = u);}null === h ? (h = 65533, l = 1) : h > 65535 && (h -= 65536, n.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), n.push(h), i += l;
        }return function f(t) {
          var e = t.length;if (e <= C) return String.fromCharCode.apply(String, t);var r = "",
              n = 0;for (; n < e;) {
            r += String.fromCharCode.apply(String, t.slice(n, n += C));
          }return r;
        }(n);
      }e.Buffer = u, e.SlowBuffer = function A(t) {
        +t != t && (t = 0);return u.alloc(+t);
      }, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function P() {
        try {
          var t = new Uint8Array(1);return t.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
              return 42;
            } }, 42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength;
        } catch (t) {
          return !1;
        }
      }(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function (t) {
        return t.__proto__ = u.prototype, t;
      }, u.from = function (t, e, r) {
        return c(null, t, e, r);
      }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: !0 })), u.alloc = function (t, e, r) {
        return function n(t, e, r, i) {
          return h(e), e <= 0 ? a(t, e) : void 0 !== r ? "string" == typeof i ? a(t, e).fill(r, i) : a(t, e).fill(r) : a(t, e);
        }(null, t, e, r);
      }, u.allocUnsafe = function (t) {
        return l(null, t);
      }, u.allocUnsafeSlow = function (t) {
        return l(null, t);
      }, u.isBuffer = function t(e) {
        return !(null == e || !e._isBuffer);
      }, u.compare = function t(e, r) {
        if (!u.isBuffer(e) || !u.isBuffer(r)) throw new TypeError("Arguments must be Buffers");if (e === r) return 0;for (var n = e.length, i = r.length, o = 0, s = Math.min(n, i); o < s; ++o) {
          if (e[o] !== r[o]) {
            n = e[o], i = r[o];break;
          }
        }return n < i ? -1 : i < n ? 1 : 0;
      }, u.isEncoding = function t(e) {
        switch (String(e).toLowerCase()) {case "hex":case "utf8":case "utf-8":case "ascii":case "latin1":case "binary":case "base64":case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":
            return !0;default:
            return !1;}
      }, u.concat = function t(e, r) {
        if (!o(e)) throw new TypeError('"list" argument must be an Array of Buffers');if (0 === e.length) return u.alloc(0);var n;if (void 0 === r) for (r = 0, n = 0; n < e.length; ++n) {
          r += e[n].length;
        }var i = u.allocUnsafe(r),
            s = 0;for (n = 0; n < e.length; ++n) {
          var a = e[n];if (!u.isBuffer(a)) throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i, s), s += a.length;
        }return i;
      }, u.byteLength = d, u.prototype._isBuffer = !0, u.prototype.swap16 = function t() {
        var e = this.length;if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");for (var r = 0; r < e; r += 2) {
          v(this, r, r + 1);
        }return this;
      }, u.prototype.swap32 = function t() {
        var e = this.length;if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");for (var r = 0; r < e; r += 4) {
          v(this, r, r + 3), v(this, r + 1, r + 2);
        }return this;
      }, u.prototype.swap64 = function t() {
        var e = this.length;if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");for (var r = 0; r < e; r += 8) {
          v(this, r, r + 7), v(this, r + 1, r + 6), v(this, r + 2, r + 5), v(this, r + 3, r + 4);
        }return this;
      }, u.prototype.toString = function t() {
        var e = 0 | this.length;return 0 === e ? "" : 0 === arguments.length ? k(this, 0, e) : p.apply(this, arguments);
      }, u.prototype.equals = function t(e) {
        if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");return this === e || 0 === u.compare(this, e);
      }, u.prototype.inspect = function t() {
        var r = "",
            n = e.INSPECT_MAX_BYTES;return this.length > 0 && (r = this.toString("hex", 0, n).match(/.{2}/g).join(" "), this.length > n && (r += " ... ")), "<Buffer " + r + ">";
      }, u.prototype.compare = function t(e, r, n, i, o) {
        if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");if (void 0 === r && (r = 0), void 0 === n && (n = e ? e.length : 0), void 0 === i && (i = 0), void 0 === o && (o = this.length), r < 0 || n > e.length || i < 0 || o > this.length) throw new RangeError("out of range index");if (i >= o && r >= n) return 0;if (i >= o) return -1;if (r >= n) return 1;if (this === e) return 0;for (var s = (o >>>= 0) - (i >>>= 0), a = (n >>>= 0) - (r >>>= 0), c = Math.min(s, a), h = this.slice(i, o), l = e.slice(r, n), f = 0; f < c; ++f) {
          if (h[f] !== l[f]) {
            s = h[f], a = l[f];break;
          }
        }return s < a ? -1 : a < s ? 1 : 0;
      }, u.prototype.includes = function t(e, r, n) {
        return -1 !== this.indexOf(e, r, n);
      }, u.prototype.indexOf = function t(e, r, n) {
        return y(this, e, r, n, !0);
      }, u.prototype.lastIndexOf = function t(e, r, n) {
        return y(this, e, r, n, !1);
      }, u.prototype.write = function t(e, r, n, i) {
        if (void 0 === r) i = "utf8", n = this.length, r = 0;else if (void 0 === n && "string" == typeof r) i = r, n = this.length, r = 0;else {
          if (!isFinite(r)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r |= 0, isFinite(n) ? (n |= 0, void 0 === i && (i = "utf8")) : (i = n, n = void 0);
        }var o = this.length - r;if ((void 0 === n || n > o) && (n = o), e.length > 0 && (n < 0 || r < 0) || r > this.length) throw new RangeError("Attempt to write outside buffer bounds");i || (i = "utf8");for (var s = !1;;) {
          switch (i) {case "hex":
              return _(this, e, r, n);case "utf8":case "utf-8":
              return S(this, e, r, n);case "ascii":
              return b(this, e, r, n);case "latin1":case "binary":
              return w(this, e, r, n);case "base64":
              return F(this, e, r, n);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":
              return E(this, e, r, n);default:
              if (s) throw new TypeError("Unknown encoding: " + i);i = ("" + i).toLowerCase(), s = !0;}
        }
      }, u.prototype.toJSON = function t() {
        return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
      };var C = 4096;function T(t, e, r) {
        var n = "";r = Math.min(t.length, r);for (var i = e; i < r; ++i) {
          n += String.fromCharCode(127 & t[i]);
        }return n;
      }function R(t, e, r) {
        var n = "";r = Math.min(t.length, r);for (var i = e; i < r; ++i) {
          n += String.fromCharCode(t[i]);
        }return n;
      }function I(t, e, r) {
        var n = t.length;(!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);for (var i = "", o = e; o < r; ++o) {
          i += V(t[o]);
        }return i;
      }function D(t, e, r) {
        for (var n = t.slice(e, r), i = "", o = 0; o < n.length; o += 2) {
          i += String.fromCharCode(n[o] + 256 * n[o + 1]);
        }return i;
      }function L(t, e, r) {
        if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
      }function N(t, e, r, n, i, o) {
        if (!u.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');if (r + n > t.length) throw new RangeError("Index out of range");
      }function U(t, e, r, n) {
        e < 0 && (e = 65535 + e + 1);for (var i = 0, o = Math.min(t.length - r, 2); i < o; ++i) {
          t[r + i] = (e & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
        }
      }function B(t, e, r, n) {
        e < 0 && (e = 4294967295 + e + 1);for (var i = 0, o = Math.min(t.length - r, 4); i < o; ++i) {
          t[r + i] = e >>> 8 * (n ? i : 3 - i) & 255;
        }
      }function O(t, e, r, n, i, o) {
        if (r + n > t.length) throw new RangeError("Index out of range");if (r < 0) throw new RangeError("Index out of range");
      }function j(t, e, r, n, o) {
        return o || O(t, 0, r, 4), i.write(t, e, r, n, 23, 4), r + 4;
      }function M(t, e, r, n, o) {
        return o || O(t, 0, r, 8), i.write(t, e, r, n, 52, 8), r + 8;
      }u.prototype.slice = function t(e, r) {
        var n,
            i = this.length;if ((e = ~~e) < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i), (r = void 0 === r ? i : ~~r) < 0 ? (r += i) < 0 && (r = 0) : r > i && (r = i), r < e && (r = e), u.TYPED_ARRAY_SUPPORT) (n = this.subarray(e, r)).__proto__ = u.prototype;else {
          var o = r - e;n = new u(o, void 0);for (var s = 0; s < o; ++s) {
            n[s] = this[s + e];
          }
        }return n;
      }, u.prototype.readUIntLE = function t(e, r, n) {
        e |= 0, r |= 0, n || L(e, r, this.length);for (var i = this[e], o = 1, s = 0; ++s < r && (o *= 256);) {
          i += this[e + s] * o;
        }return i;
      }, u.prototype.readUIntBE = function t(e, r, n) {
        e |= 0, r |= 0, n || L(e, r, this.length);for (var i = this[e + --r], o = 1; r > 0 && (o *= 256);) {
          i += this[e + --r] * o;
        }return i;
      }, u.prototype.readUInt8 = function t(e, r) {
        return r || L(e, 1, this.length), this[e];
      }, u.prototype.readUInt16LE = function t(e, r) {
        return r || L(e, 2, this.length), this[e] | this[e + 1] << 8;
      }, u.prototype.readUInt16BE = function t(e, r) {
        return r || L(e, 2, this.length), this[e] << 8 | this[e + 1];
      }, u.prototype.readUInt32LE = function t(e, r) {
        return r || L(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
      }, u.prototype.readUInt32BE = function t(e, r) {
        return r || L(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
      }, u.prototype.readIntLE = function t(e, r, n) {
        e |= 0, r |= 0, n || L(e, r, this.length);for (var i = this[e], o = 1, s = 0; ++s < r && (o *= 256);) {
          i += this[e + s] * o;
        }return i >= (o *= 128) && (i -= Math.pow(2, 8 * r)), i;
      }, u.prototype.readIntBE = function t(e, r, n) {
        e |= 0, r |= 0, n || L(e, r, this.length);for (var i = r, o = 1, s = this[e + --i]; i > 0 && (o *= 256);) {
          s += this[e + --i] * o;
        }return s >= (o *= 128) && (s -= Math.pow(2, 8 * r)), s;
      }, u.prototype.readInt8 = function t(e, r) {
        return r || L(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
      }, u.prototype.readInt16LE = function t(e, r) {
        r || L(e, 2, this.length);var n = this[e] | this[e + 1] << 8;return 32768 & n ? 4294901760 | n : n;
      }, u.prototype.readInt16BE = function t(e, r) {
        r || L(e, 2, this.length);var n = this[e + 1] | this[e] << 8;return 32768 & n ? 4294901760 | n : n;
      }, u.prototype.readInt32LE = function t(e, r) {
        return r || L(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
      }, u.prototype.readInt32BE = function t(e, r) {
        return r || L(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
      }, u.prototype.readFloatLE = function t(e, r) {
        return r || L(e, 4, this.length), i.read(this, e, !0, 23, 4);
      }, u.prototype.readFloatBE = function t(e, r) {
        return r || L(e, 4, this.length), i.read(this, e, !1, 23, 4);
      }, u.prototype.readDoubleLE = function t(e, r) {
        return r || L(e, 8, this.length), i.read(this, e, !0, 52, 8);
      }, u.prototype.readDoubleBE = function t(e, r) {
        return r || L(e, 8, this.length), i.read(this, e, !1, 52, 8);
      }, u.prototype.writeUIntLE = function t(e, r, n, i) {
        (e = +e, r |= 0, n |= 0, i) || N(this, e, r, n, Math.pow(2, 8 * n) - 1, 0);var o = 1,
            s = 0;for (this[r] = 255 & e; ++s < n && (o *= 256);) {
          this[r + s] = e / o & 255;
        }return r + n;
      }, u.prototype.writeUIntBE = function t(e, r, n, i) {
        (e = +e, r |= 0, n |= 0, i) || N(this, e, r, n, Math.pow(2, 8 * n) - 1, 0);var o = n - 1,
            s = 1;for (this[r + o] = 255 & e; --o >= 0 && (s *= 256);) {
          this[r + o] = e / s & 255;
        }return r + n;
      }, u.prototype.writeUInt8 = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[r] = 255 & e, r + 1;
      }, u.prototype.writeUInt16LE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8) : U(this, e, r, !0), r + 2;
      }, u.prototype.writeUInt16BE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = 255 & e) : U(this, e, r, !1), r + 2;
      }, u.prototype.writeUInt32LE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = 255 & e) : B(this, e, r, !0), r + 4;
      }, u.prototype.writeUInt32BE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = 255 & e) : B(this, e, r, !1), r + 4;
      }, u.prototype.writeIntLE = function t(e, r, n, i) {
        if (e = +e, r |= 0, !i) {
          var o = Math.pow(2, 8 * n - 1);N(this, e, r, n, o - 1, -o);
        }var s = 0,
            a = 1,
            u = 0;for (this[r] = 255 & e; ++s < n && (a *= 256);) {
          e < 0 && 0 === u && 0 !== this[r + s - 1] && (u = 1), this[r + s] = (e / a >> 0) - u & 255;
        }return r + n;
      }, u.prototype.writeIntBE = function t(e, r, n, i) {
        if (e = +e, r |= 0, !i) {
          var o = Math.pow(2, 8 * n - 1);N(this, e, r, n, o - 1, -o);
        }var s = n - 1,
            a = 1,
            u = 0;for (this[r + s] = 255 & e; --s >= 0 && (a *= 256);) {
          e < 0 && 0 === u && 0 !== this[r + s + 1] && (u = 1), this[r + s] = (e / a >> 0) - u & 255;
        }return r + n;
      }, u.prototype.writeInt8 = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[r] = 255 & e, r + 1;
      }, u.prototype.writeInt16LE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8) : U(this, e, r, !0), r + 2;
      }, u.prototype.writeInt16BE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = 255 & e) : U(this, e, r, !1), r + 2;
      }, u.prototype.writeInt32LE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24) : B(this, e, r, !0), r + 4;
      }, u.prototype.writeInt32BE = function t(e, r, n) {
        return e = +e, r |= 0, n || N(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = 255 & e) : B(this, e, r, !1), r + 4;
      }, u.prototype.writeFloatLE = function t(e, r, n) {
        return j(this, e, r, !0, n);
      }, u.prototype.writeFloatBE = function t(e, r, n) {
        return j(this, e, r, !1, n);
      }, u.prototype.writeDoubleLE = function t(e, r, n) {
        return M(this, e, r, !0, n);
      }, u.prototype.writeDoubleBE = function t(e, r, n) {
        return M(this, e, r, !1, n);
      }, u.prototype.copy = function t(e, r, n, i) {
        if (n || (n = 0), i || 0 === i || (i = this.length), r >= e.length && (r = e.length), r || (r = 0), i > 0 && i < n && (i = n), i === n) return 0;if (0 === e.length || 0 === this.length) return 0;if (r < 0) throw new RangeError("targetStart out of bounds");if (n < 0 || n >= this.length) throw new RangeError("sourceStart out of bounds");if (i < 0) throw new RangeError("sourceEnd out of bounds");i > this.length && (i = this.length), e.length - r < i - n && (i = e.length - r + n);var o,
            s = i - n;if (this === e && n < r && r < i) for (o = s - 1; o >= 0; --o) {
          e[o + r] = this[o + n];
        } else if (s < 1e3 || !u.TYPED_ARRAY_SUPPORT) for (o = 0; o < s; ++o) {
          e[o + r] = this[o + n];
        } else Uint8Array.prototype.set.call(e, this.subarray(n, n + s), r);return s;
      }, u.prototype.fill = function t(e, r, n, i) {
        if ("string" == typeof e) {
          if ("string" == typeof r ? (i = r, r = 0, n = this.length) : "string" == typeof n && (i = n, n = this.length), 1 === e.length) {
            var o = e.charCodeAt(0);o < 256 && (e = o);
          }if (void 0 !== i && "string" != typeof i) throw new TypeError("encoding must be a string");if ("string" == typeof i && !u.isEncoding(i)) throw new TypeError("Unknown encoding: " + i);
        } else "number" == typeof e && (e &= 255);if (r < 0 || this.length < r || this.length < n) throw new RangeError("Out of range index");if (n <= r) return this;var s;if (r >>>= 0, n = void 0 === n ? this.length : n >>> 0, e || (e = 0), "number" == typeof e) for (s = r; s < n; ++s) {
          this[s] = e;
        } else {
          var a = u.isBuffer(e) ? e : K(new u(e, i).toString()),
              c = a.length;for (s = 0; s < n - r; ++s) {
            this[s + r] = a[s % c];
          }
        }return this;
      };var H = /[^+\/0-9A-Za-z-_]/g;function V(t) {
        return t < 16 ? "0" + t.toString(16) : t.toString(16);
      }function K(t, e) {
        var r;e = e || 1 / 0;for (var n = t.length, i = null, o = [], s = 0; s < n; ++s) {
          if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {
            if (!i) {
              if (r > 56319) {
                (e -= 3) > -1 && o.push(239, 191, 189);continue;
              }if (s + 1 === n) {
                (e -= 3) > -1 && o.push(239, 191, 189);continue;
              }i = r;continue;
            }if (r < 56320) {
              (e -= 3) > -1 && o.push(239, 191, 189), i = r;continue;
            }r = 65536 + (i - 55296 << 10 | r - 56320);
          } else i && (e -= 3) > -1 && o.push(239, 191, 189);if (i = null, r < 128) {
            if ((e -= 1) < 0) break;o.push(r);
          } else if (r < 2048) {
            if ((e -= 2) < 0) break;o.push(r >> 6 | 192, 63 & r | 128);
          } else if (r < 65536) {
            if ((e -= 3) < 0) break;o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
          } else {
            if (!(r < 1114112)) throw new Error("Invalid code point");if ((e -= 4) < 0) break;o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
          }
        }return o;
      }function q(t) {
        return n.toByteArray(function e(t) {
          if ((t = function e(t) {
            return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
          }(t).replace(H, "")).length < 2) return "";for (; t.length % 4 != 0;) {
            t += "=";
          }return t;
        }(t));
      }function J(t, e, r, n) {
        for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) {
          e[i + r] = t[i];
        }return i;
      }
    }).call(this, r(29));
  }, function (t, e) {
    var r;r = function () {
      return this;
    }();try {
      r = r || new Function("return this")();
    } catch (t) {
      "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (r = window);
    }t.exports = r;
  }, function (t, e, r) {
    "use strict";
    e.byteLength = function n(t) {
      var e = f(t),
          r = e[0],
          n = e[1];return 3 * (r + n) / 4 - n;
    }, e.toByteArray = function i(t) {
      var e,
          r,
          n = f(t),
          i = n[0],
          o = n[1],
          s = new u(function c(t, e, r) {
        return 3 * (e + r) / 4 - r;
      }(0, i, o)),
          h = 0,
          l = o > 0 ? i - 4 : i;for (r = 0; r < l; r += 4) {
        e = a[t.charCodeAt(r)] << 18 | a[t.charCodeAt(r + 1)] << 12 | a[t.charCodeAt(r + 2)] << 6 | a[t.charCodeAt(r + 3)], s[h++] = e >> 16 & 255, s[h++] = e >> 8 & 255, s[h++] = 255 & e;
      }2 === o && (e = a[t.charCodeAt(r)] << 2 | a[t.charCodeAt(r + 1)] >> 4, s[h++] = 255 & e);1 === o && (e = a[t.charCodeAt(r)] << 10 | a[t.charCodeAt(r + 1)] << 4 | a[t.charCodeAt(r + 2)] >> 2, s[h++] = e >> 8 & 255, s[h++] = 255 & e);return s;
    }, e.fromByteArray = function o(t) {
      for (var e, r = t.length, n = r % 3, i = [], o = 16383, a = 0, u = r - n; a < u; a += o) {
        i.push(g(t, a, a + o > u ? u : a + o));
      }1 === n ? (e = t[r - 1], i.push(s[e >> 2] + s[e << 4 & 63] + "==")) : 2 === n && (e = (t[r - 2] << 8) + t[r - 1], i.push(s[e >> 10] + s[e >> 4 & 63] + s[e << 2 & 63] + "="));return i.join("");
    };for (var s = [], a = [], u = "undefined" != typeof Uint8Array ? Uint8Array : Array, c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", h = 0, l = c.length; h < l; ++h) {
      s[h] = c[h], a[c.charCodeAt(h)] = h;
    }function f(t) {
      var e = t.length;if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");var r = t.indexOf("=");return -1 === r && (r = e), [r, r === e ? 0 : 4 - r % 4];
    }function g(t, e, r) {
      for (var n, i, o = [], a = e; a < r; a += 3) {
        n = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), o.push(s[(i = n) >> 18 & 63] + s[i >> 12 & 63] + s[i >> 6 & 63] + s[63 & i]);
      }return o.join("");
    }a["-".charCodeAt(0)] = 62, a["_".charCodeAt(0)] = 63;
  }, function (t, e) {
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    e.read = function (t, e, r, n, i) {
      var o,
          s,
          a = 8 * i - n - 1,
          u = (1 << a) - 1,
          c = u >> 1,
          h = -7,
          l = r ? i - 1 : 0,
          f = r ? -1 : 1,
          g = t[e + l];for (l += f, o = g & (1 << -h) - 1, g >>= -h, h += a; h > 0; o = 256 * o + t[e + l], l += f, h -= 8) {}for (s = o & (1 << -h) - 1, o >>= -h, h += n; h > 0; s = 256 * s + t[e + l], l += f, h -= 8) {}if (0 === o) o = 1 - c;else {
        if (o === u) return s ? NaN : 1 / 0 * (g ? -1 : 1);s += Math.pow(2, n), o -= c;
      }return (g ? -1 : 1) * s * Math.pow(2, o - n);
    }, e.write = function (t, e, r, n, i, o) {
      var s,
          a,
          u,
          c = 8 * o - i - 1,
          h = (1 << c) - 1,
          l = h >> 1,
          f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          g = n ? 0 : o - 1,
          d = n ? 1 : -1,
          p = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = h) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + l >= 1 ? f / u : f * Math.pow(2, 1 - l)) * u >= 2 && (s++, u /= 2), s + l >= h ? (a = 0, s = h) : s + l >= 1 ? (a = (e * u - 1) * Math.pow(2, i), s += l) : (a = e * Math.pow(2, l - 1) * Math.pow(2, i), s = 0)); i >= 8; t[r + g] = 255 & a, g += d, a /= 256, i -= 8) {}for (s = s << i | a, c += i; c > 0; t[r + g] = 255 & s, g += d, s /= 256, c -= 8) {}t[r + g - d] |= 128 * p;
    };
  }, function (t, e) {
    var r = {}.toString;t.exports = Array.isArray || function (t) {
      return "[object Array]" == r.call(t);
    };
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = function n(t) {
      var e = t.jws,
          r = t.KeyUtil,
          n = t.X509,
          o = t.crypto,
          s = t.hextob64u,
          a = t.b64tohex,
          u = t.AllowedSigningAlgs;return function () {
        function t() {
          !function e(t, r) {
            if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
          }(this, t);
        }return t.parseJwt = function t(r) {
          i.Log.debug("JoseUtil.parseJwt");try {
            var n = e.JWS.parse(r);return { header: n.headerObj, payload: n.payloadObj };
          } catch (t) {
            i.Log.error(t);
          }
        }, t.validateJwt = function e(o, s, u, c, h, l, f) {
          i.Log.debug("JoseUtil.validateJwt");try {
            if ("RSA" === s.kty) {
              if (s.e && s.n) s = r.getKey(s);else {
                if (!s.x5c || !s.x5c.length) return i.Log.error("JoseUtil.validateJwt: RSA key missing key material", s), Promise.reject(new Error("RSA key missing key material"));var g = a(s.x5c[0]);s = n.getPublicKeyFromCertHex(g);
              }
            } else {
              if ("EC" !== s.kty) return i.Log.error("JoseUtil.validateJwt: Unsupported key type", s && s.kty), Promise.reject(new Error(s.kty));if (!(s.crv && s.x && s.y)) return i.Log.error("JoseUtil.validateJwt: EC key missing key material", s), Promise.reject(new Error("EC key missing key material"));s = r.getKey(s);
            }return t._validateJwt(o, s, u, c, h, l, f);
          } catch (t) {
            return i.Log.error(t && t.message || t), Promise.reject("JWT validation failed");
          }
        }, t.validateJwtAttributes = function e(r, n, o, s, a, u) {
          s || (s = 0), a || (a = parseInt(Date.now() / 1e3));var c = t.parseJwt(r).payload;if (!c.iss) return i.Log.error("JoseUtil._validateJwt: issuer was not provided"), Promise.reject(new Error("issuer was not provided"));if (c.iss !== n) return i.Log.error("JoseUtil._validateJwt: Invalid issuer in token", c.iss), Promise.reject(new Error("Invalid issuer in token: " + c.iss));if (!c.aud) return i.Log.error("JoseUtil._validateJwt: aud was not provided"), Promise.reject(new Error("aud was not provided"));if (!(c.aud === o || Array.isArray(c.aud) && c.aud.indexOf(o) >= 0)) return i.Log.error("JoseUtil._validateJwt: Invalid audience in token", c.aud), Promise.reject(new Error("Invalid audience in token: " + c.aud));if (c.azp && c.azp !== o) return i.Log.error("JoseUtil._validateJwt: Invalid azp in token", c.azp), Promise.reject(new Error("Invalid azp in token: " + c.azp));if (!u) {
            var h = a + s,
                l = a - s;if (!c.iat) return i.Log.error("JoseUtil._validateJwt: iat was not provided"), Promise.reject(new Error("iat was not provided"));if (h < c.iat) return i.Log.error("JoseUtil._validateJwt: iat is in the future", c.iat), Promise.reject(new Error("iat is in the future: " + c.iat));if (c.nbf && h < c.nbf) return i.Log.error("JoseUtil._validateJwt: nbf is in the future", c.nbf), Promise.reject(new Error("nbf is in the future: " + c.nbf));if (!c.exp) return i.Log.error("JoseUtil._validateJwt: exp was not provided"), Promise.reject(new Error("exp was not provided"));if (c.exp < l) return i.Log.error("JoseUtil._validateJwt: exp is in the past", c.exp), Promise.reject(new Error("exp is in the past:" + c.exp));
          }return Promise.resolve(c);
        }, t._validateJwt = function r(n, o, s, a, c, h, l) {
          return t.validateJwtAttributes(n, s, a, c, h, l).then(function (t) {
            try {
              return e.JWS.verify(n, o, u) ? t : (i.Log.error("JoseUtil._validateJwt: signature validation failed"), Promise.reject(new Error("signature validation failed")));
            } catch (t) {
              return i.Log.error(t && t.message || t), Promise.reject(new Error("signature validation failed"));
            }
          });
        }, t.hashString = function t(e, r) {
          try {
            return o.Util.hashString(e, r);
          } catch (t) {
            i.Log.error(t);
          }
        }, t.hexToBase64Url = function t(e) {
          try {
            return s(e);
          } catch (t) {
            i.Log.error(t);
          }
        }, t;
      }();
    };var i = r(0);t.exports = e.default;
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SigninResponse = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(3);function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }e.SigninResponse = function () {
      function t(e) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#";o(this, t);var n = i.UrlUtility.parseUrlFragment(e, r);this.error = n.error, this.error_description = n.error_description, this.error_uri = n.error_uri, this.code = n.code, this.state = n.state, this.id_token = n.id_token, this.session_state = n.session_state, this.access_token = n.access_token, this.token_type = n.token_type, this.scope = n.scope, this.profile = void 0, this.expires_in = n.expires_in;
      }return n(t, [{ key: "expires_in", get: function t() {
          if (this.expires_at) {
            var e = parseInt(Date.now() / 1e3);return this.expires_at - e;
          }
        }, set: function t(e) {
          var r = parseInt(e);if ("number" == typeof r && r > 0) {
            var n = parseInt(Date.now() / 1e3);this.expires_at = n + r;
          }
        } }, { key: "expired", get: function t() {
          var e = this.expires_in;if (void 0 !== e) return e <= 0;
        } }, { key: "scopes", get: function t() {
          return (this.scope || "").split(" ");
        } }, { key: "isOpenIdConnect", get: function t() {
          return this.scopes.indexOf("openid") >= 0 || !!this.id_token;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SignoutRequest = void 0;var n = r(0),
        i = r(3),
        o = r(9);e.SignoutRequest = function t(e) {
      var r = e.url,
          s = e.id_token_hint,
          a = e.post_logout_redirect_uri,
          u = e.data,
          c = e.extraQueryParams,
          h = e.request_type;if (function l(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }(this, t), !r) throw n.Log.error("SignoutRequest.ctor: No url passed"), new Error("url");for (var f in s && (r = i.UrlUtility.addQueryParam(r, "id_token_hint", s)), a && (r = i.UrlUtility.addQueryParam(r, "post_logout_redirect_uri", a), u && (this.state = new o.State({ data: u, request_type: h }), r = i.UrlUtility.addQueryParam(r, "state", this.state.id))), c) {
        r = i.UrlUtility.addQueryParam(r, f, c[f]);
      }this.url = r;
    };
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SignoutResponse = void 0;var n = r(3);e.SignoutResponse = function t(e) {
      !function r(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }(this, t);var i = n.UrlUtility.parseUrlFragment(e, "?");this.error = i.error, this.error_description = i.error_description, this.error_uri = i.error_uri, this.state = i.state;
    };
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.InMemoryWebStorage = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0);e.InMemoryWebStorage = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._data = {};
      }return t.prototype.getItem = function t(e) {
        return i.Log.debug("InMemoryWebStorage.getItem", e), this._data[e];
      }, t.prototype.setItem = function t(e, r) {
        i.Log.debug("InMemoryWebStorage.setItem", e), this._data[e] = r;
      }, t.prototype.removeItem = function t(e) {
        i.Log.debug("InMemoryWebStorage.removeItem", e), delete this._data[e];
      }, t.prototype.key = function t(e) {
        return Object.getOwnPropertyNames(this._data)[e];
      }, n(t, [{ key: "length", get: function t() {
          return Object.getOwnPropertyNames(this._data).length;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.UserManager = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(11),
        s = r(39),
        a = r(16),
        u = r(45),
        c = r(47),
        h = r(19),
        l = r(8),
        f = r(21),
        g = r(12),
        d = r(5);function p(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }function v(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
    }e.UserManager = function (t) {
      function e() {
        var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : c.SilentRenewService,
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : h.SessionMonitor,
            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : f.TokenRevocationClient,
            l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : g.TokenClient,
            y = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : d.JoseUtil;p(this, e), r instanceof s.UserManagerSettings || (r = new s.UserManagerSettings(r));var m = v(this, t.call(this, r));return m._events = new u.UserManagerEvents(r), m._silentRenewService = new n(m), m.settings.automaticSilentRenew && (i.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew"), m.startSilentRenew()), m.settings.monitorSession && (i.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor"), m._sessionMonitor = new o(m)), m._tokenRevocationClient = new a(m._settings), m._tokenClient = new l(m._settings), m._joseUtil = y, m;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), e.prototype.getUser = function t() {
        var e = this;return this._loadUser().then(function (t) {
          return t ? (i.Log.info("UserManager.getUser: user loaded"), e._events.load(t, !1), t) : (i.Log.info("UserManager.getUser: user not found in storage"), null);
        });
      }, e.prototype.removeUser = function t() {
        var e = this;return this.storeUser(null).then(function () {
          i.Log.info("UserManager.removeUser: user removed from storage"), e._events.unload();
        });
      }, e.prototype.signinRedirect = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(e = Object.assign({}, e)).request_type = "si:r";var r = { useReplaceToNavigate: e.useReplaceToNavigate };return this._signinStart(e, this._redirectNavigator, r).then(function () {
          i.Log.info("UserManager.signinRedirect: successful");
        });
      }, e.prototype.signinRedirectCallback = function t(e) {
        return this._signinEnd(e || this._redirectNavigator.url).then(function (t) {
          return t.profile && t.profile.sub ? i.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinRedirectCallback: no sub"), t;
        });
      }, e.prototype.signinPopup = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(e = Object.assign({}, e)).request_type = "si:p";var r = e.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;return r ? (e.redirect_uri = r, e.display = "popup", this._signin(e, this._popupNavigator, { startUrl: r, popupWindowFeatures: e.popupWindowFeatures || this.settings.popupWindowFeatures, popupWindowTarget: e.popupWindowTarget || this.settings.popupWindowTarget }).then(function (t) {
          return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinPopup: no sub")), t;
        })) : (i.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured"), Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured")));
      }, e.prototype.signinPopupCallback = function t(e) {
        return this._signinCallback(e, this._popupNavigator).then(function (t) {
          return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinPopupCallback: no sub")), t;
        }).catch(function (t) {
          i.Log.error(t.message);
        });
      }, e.prototype.signinSilent = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = arguments[1];return r = Object.assign({}, r), this._loadUser().then(function (t) {
          return t && t.refresh_token ? (r.refresh_token = t.refresh_token, e._useRefreshToken(r)) : (r.request_type = "si:s", r.id_token_hint = r.id_token_hint || e.settings.includeIdTokenInSilentRenew && t && t.id_token, t && "client_credentials" !== r.grant_type && e._settings.validateSubOnSilentRenew && (i.Log.debug("UserManager.signinSilent, subject prior to silent renew: ", t.profile.sub), r.current_sub = t.profile.sub), e._signinSilentIframe(r, n));
        });
      }, e.prototype.signinClientCredentials = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = arguments[1];return e.grant_type = "client_credentials", this.signinSilent(e, r);
      }, e.prototype.apiGet = function t(e) {
        var r = this,
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};return this.getUser().then(function (t) {
          if (t && t.access_token) return r._callApi(t.access_token, e, n);if (t) return signinClientCredentials(n).then(function (t) {
            return r._callApi(t.access_token, e, n);
          });throw new Error("user is not logged in");
        });
      }, e.prototype._callApi = function t(e, r) {
        var n = this,
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            s = new Oidc.JsonService();return s.getJson(settings.authority + "/" + r, e).then(function (t) {
          return i.Log.debug("api call result", t), t;
        }).catch(function (t) {
          if (401 === t.status) return n.signinClientCredentials(o).then(function (t) {
            return n._callApi(t.access_token);
          });throw i.Log.error(t), t;
        });
      }, e.prototype._useRefreshToken = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return this._tokenClient.exchangeRefreshToken(r).then(function (t) {
          return t ? t.access_token ? e._loadUser().then(function (r) {
            if (r) {
              var n = Promise.resolve();return t.id_token && (n = e._validateIdTokenFromTokenRefreshToken(r.profile, t.id_token)), n.then(function () {
                return i.Log.debug("UserManager._useRefreshToken: refresh token response success"), r.id_token = t.id_token || r.id_token, r.access_token = t.access_token, r.refresh_token = t.refresh_token || r.refresh_token, r.expires_in = t.expires_in, e.storeUser(r).then(function () {
                  return e._events.load(r), r;
                });
              });
            }return null;
          }) : (i.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint"), Promise.reject("No access token returned from token endpoint")) : (i.Log.error("UserManager._useRefreshToken: No response returned from token endpoint"), Promise.reject("No response returned from token endpoint"));
        });
      }, e.prototype._validateIdTokenFromTokenRefreshToken = function t(e, r) {
        var n = this;return this._metadataService.getIssuer().then(function (t) {
          return n.settings.getEpochTime().then(function (o) {
            return n._joseUtil.validateJwtAttributes(r, t, n._settings.client_id, n._settings.clockSkew, o).then(function (t) {
              return t ? t.sub !== e.sub ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub"), Promise.reject(new Error("sub in id_token does not match current sub"))) : t.auth_time && t.auth_time !== e.auth_time ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time"), Promise.reject(new Error("auth_time in id_token does not match original auth_time"))) : t.azp && t.azp !== e.azp ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp"), Promise.reject(new Error("azp in id_token does not match original azp"))) : !t.azp && e.azp ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token"), Promise.reject(new Error("azp not in id_token, but present in original id_token"))) : void 0 : (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token"), Promise.reject(new Error("Failed to validate id_token")));
            });
          });
        });
      }, e.prototype._signinSilentIframe = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = arguments[1],
            n = e.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;return n ? (e.redirect_uri = n, e.prompt = e.prompt || "none", this._signin(e, this._iframeNavigator, { startUrl: n, silentRequestTimeout: e.silentRequestTimeout || this.settings.silentRequestTimeout }, r).then(function (t) {
          return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinSilent: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinSilent: no sub")), t;
        })) : (i.Log.error("UserManager.signinSilent: No silent_redirect_uri configured"), Promise.reject(new Error("No silent_redirect_uri configured")));
      }, e.prototype.signinSilentCallback = function t(e) {
        return this._signinCallback(e, this._iframeNavigator).then(function (t) {
          return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinSilentCallback: no sub")), t;
        });
      }, e.prototype.signinCallback = function t(e) {
        var r = this;return this.readSigninResponseState(e).then(function (t) {
          var n = t.state;t.response;return "si:r" === n.request_type ? r.signinRedirectCallback(e) : "si:p" === n.request_type ? r.signinPopupCallback(e) : "si:s" === n.request_type ? r.signinSilentCallback(e) : Promise.reject(new Error("invalid response_type in state"));
        });
      }, e.prototype.signoutCallback = function t(e, r) {
        var n = this;return this.readSignoutResponseState(e).then(function (t) {
          var i = t.state,
              o = t.response;return i ? "so:r" === i.request_type ? n.signoutRedirectCallback(e) : "so:p" === i.request_type ? n.signoutPopupCallback(e, r) : Promise.reject(new Error("invalid response_type in state")) : o;
        });
      }, e.prototype.querySessionStatus = function t() {
        var e = this,
            r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = arguments[1];(r = Object.assign({}, r)).request_type = "si:s";var o = r.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;return o ? (r.redirect_uri = o, r.prompt = "none", r.response_type = r.response_type || this.settings.query_status_response_type, r.scope = r.scope || "openid", r.skipUserInfo = !0, this._signinStart(r, this._iframeNavigator, { startUrl: o, silentRequestTimeout: r.silentRequestTimeout || this.settings.silentRequestTimeout }).then(function (t) {
          return e.processSigninResponse(t.url, n).then(function (t) {
            if (i.Log.debug("UserManager.querySessionStatus: got signin response"), t.session_state && t.profile.sub) return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", t.profile.sub), { session_state: t.session_state, sub: t.profile.sub, sid: t.profile.sid };i.Log.info("querySessionStatus successful, user not authenticated");
          }).catch(function (t) {
            if (t.session_state && e.settings.monitorAnonymousSession && ("login_required" == t.message || "consent_required" == t.message || "interaction_required" == t.message || "account_selection_required" == t.message)) return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user"), { session_state: t.session_state };throw t;
          });
        })) : (i.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured"), Promise.reject(new Error("No silent_redirect_uri configured")));
      }, e.prototype._signin = function t(e, r) {
        var n = this,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;return this._signinStart(e, r, i).then(function (t) {
          return n._signinEnd(t.url, e, o);
        });
      }, e.prototype._signinStart = function t(e, r) {
        var n = this,
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};return r.prepare(o).then(function (t) {
          return i.Log.debug("UserManager._signinStart: got navigator window handle"), n.createSigninRequest(e).then(function (r) {
            return i.Log.debug("UserManager._signinStart: got signin request"), o.url = r.url, o.id = r.state.id, "client_credentials" === e.grant_type ? o : t.navigate(o);
          }).catch(function (e) {
            throw t.close && (i.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window"), t.close()), e;
          });
        });
      }, e.prototype._signinEnd = function t(e) {
        var r = this,
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;return this.processSigninResponse(e, null, o).then(function (t) {
          i.Log.debug("UserManager._signinEnd: got signin response");var e = new a.User(t);if (n.current_sub) {
            if (n.current_sub !== e.profile.sub) return i.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ", e.profile.sub), Promise.reject(new Error("login_required"));i.Log.debug("UserManager._signinEnd: current user matches user returned from signin");
          }return r.storeUser(e).then(function () {
            return i.Log.debug("UserManager._signinEnd: user stored"), r._events.load(e), e;
          });
        });
      }, e.prototype._signinCallback = function t(e, r) {
        i.Log.debug("UserManager._signinCallback");var n = "query" === this._settings.response_mode || !this._settings.response_mode && l.SigninRequest.isCode(this._settings.response_type) ? "?" : "#";return r.callback(e, void 0, n);
      }, e.prototype.signoutRedirect = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(e = Object.assign({}, e)).request_type = "so:r";var r = e.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;r && (e.post_logout_redirect_uri = r);var n = { useReplaceToNavigate: e.useReplaceToNavigate };return this._signoutStart(e, this._redirectNavigator, n).then(function () {
          i.Log.info("UserManager.signoutRedirect: successful");
        });
      }, e.prototype.signoutRedirectCallback = function t(e) {
        return this._signoutEnd(e || this._redirectNavigator.url).then(function (t) {
          return i.Log.info("UserManager.signoutRedirectCallback: successful"), t;
        });
      }, e.prototype.signoutPopup = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};(e = Object.assign({}, e)).request_type = "so:p";var r = e.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;return e.post_logout_redirect_uri = r, e.display = "popup", e.post_logout_redirect_uri && (e.state = e.state || {}), this._signout(e, this._popupNavigator, { startUrl: r, popupWindowFeatures: e.popupWindowFeatures || this.settings.popupWindowFeatures, popupWindowTarget: e.popupWindowTarget || this.settings.popupWindowTarget }).then(function () {
          i.Log.info("UserManager.signoutPopup: successful");
        });
      }, e.prototype.signoutPopupCallback = function t(e, r) {
        void 0 === r && "boolean" == typeof e && (r = e, e = null);return this._popupNavigator.callback(e, r, "?").then(function () {
          i.Log.info("UserManager.signoutPopupCallback: successful");
        });
      }, e.prototype._signout = function t(e, r) {
        var n = this,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};return this._signoutStart(e, r, i).then(function (t) {
          return n._signoutEnd(t.url);
        });
      }, e.prototype._signoutStart = function t() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            r = this,
            n = arguments[1],
            o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};return n.prepare(o).then(function (t) {
          return i.Log.debug("UserManager._signoutStart: got navigator window handle"), r._loadUser().then(function (n) {
            return i.Log.debug("UserManager._signoutStart: loaded current user from storage"), (r._settings.revokeAccessTokenOnSignout ? r._revokeInternal(n) : Promise.resolve()).then(function () {
              var s = e.id_token_hint || n && n.id_token;return s && (i.Log.debug("UserManager._signoutStart: Setting id_token into signout request"), e.id_token_hint = s), r.removeUser().then(function () {
                return i.Log.debug("UserManager._signoutStart: user removed, creating signout request"), r.createSignoutRequest(e).then(function (e) {
                  return i.Log.debug("UserManager._signoutStart: got signout request"), o.url = e.url, e.state && (o.id = e.state.id), t.navigate(o);
                });
              });
            });
          }).catch(function (e) {
            throw t.close && (i.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window"), t.close()), e;
          });
        });
      }, e.prototype._signoutEnd = function t(e) {
        return this.processSignoutResponse(e).then(function (t) {
          return i.Log.debug("UserManager._signoutEnd: got signout response"), t;
        });
      }, e.prototype.revokeAccessToken = function t() {
        var e = this;return this._loadUser().then(function (t) {
          return e._revokeInternal(t, !0).then(function (r) {
            if (r) return i.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing"), t.access_token = null, t.refresh_token = null, t.expires_at = null, t.token_type = null, e.storeUser(t).then(function () {
              i.Log.debug("UserManager.revokeAccessToken: user stored"), e._events.load(t);
            });
          });
        }).then(function () {
          i.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
        });
      }, e.prototype._revokeInternal = function t(e, r) {
        var n = this;if (e) {
          var o = e.access_token,
              s = e.refresh_token;return this._revokeAccessTokenInternal(o, r).then(function (t) {
            return n._revokeRefreshTokenInternal(s, r).then(function (e) {
              return t || e || i.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format"), t || e;
            });
          });
        }return Promise.resolve(!1);
      }, e.prototype._revokeAccessTokenInternal = function t(e, r) {
        return !e || e.indexOf(".") >= 0 ? Promise.resolve(!1) : this._tokenRevocationClient.revoke(e, r).then(function () {
          return !0;
        });
      }, e.prototype._revokeRefreshTokenInternal = function t(e, r) {
        return e ? this._tokenRevocationClient.revoke(e, r, "refresh_token").then(function () {
          return !0;
        }) : Promise.resolve(!1);
      }, e.prototype.startSilentRenew = function t() {
        this._silentRenewService.start();
      }, e.prototype.stopSilentRenew = function t() {
        this._silentRenewService.stop();
      }, e.prototype._loadUser = function t() {
        return this._userStore.get(this._userStoreKey).then(function (t) {
          return t ? (i.Log.debug("UserManager._loadUser: user storageString loaded"), a.User.fromStorageString(t)) : (i.Log.debug("UserManager._loadUser: no user storageString"), null);
        });
      }, e.prototype.storeUser = function t(e) {
        if (e) {
          i.Log.debug("UserManager.storeUser: storing user");var r = e.toStorageString();return this._userStore.set(this._userStoreKey, r);
        }return i.Log.debug("storeUser.storeUser: removing user"), this._userStore.remove(this._userStoreKey);
      }, n(e, [{ key: "_redirectNavigator", get: function t() {
          return this.settings.redirectNavigator;
        } }, { key: "_popupNavigator", get: function t() {
          return this.settings.popupNavigator;
        } }, { key: "_iframeNavigator", get: function t() {
          return this.settings.iframeNavigator;
        } }, { key: "_userStore", get: function t() {
          return this.settings.userStore;
        } }, { key: "events", get: function t() {
          return this._events;
        } }, { key: "_userStoreKey", get: function t() {
          return "user:" + this.settings.authority + ":" + this.settings.client_id;
        } }]), e;
    }(o.OidcClient);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.UserManagerSettings = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = (r(0), r(6)),
        o = r(40),
        s = r(41),
        a = r(43),
        u = r(7),
        c = r(1),
        h = r(8);function l(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }function f(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
    }e.UserManagerSettings = function (t) {
      function e() {
        var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = r.popup_redirect_uri,
            i = r.popup_post_logout_redirect_uri,
            g = r.popupWindowFeatures,
            d = r.popupWindowTarget,
            p = r.silent_redirect_uri,
            v = r.silentRequestTimeout,
            y = r.automaticSilentRenew,
            m = void 0 !== y && y,
            _ = r.validateSubOnSilentRenew,
            S = void 0 !== _ && _,
            b = r.includeIdTokenInSilentRenew,
            w = void 0 === b || b,
            F = r.monitorSession,
            E = void 0 === F || F,
            x = r.monitorAnonymousSession,
            k = void 0 !== x && x,
            A = r.checkSessionInterval,
            P = void 0 === A ? 2e3 : A,
            C = r.stopCheckSessionOnError,
            T = void 0 === C || C,
            R = r.query_status_response_type,
            I = r.revokeAccessTokenOnSignout,
            D = void 0 !== I && I,
            L = r.accessTokenExpiringNotificationTime,
            N = void 0 === L ? 60 : L,
            U = r.redirectNavigator,
            B = void 0 === U ? new o.RedirectNavigator() : U,
            O = r.popupNavigator,
            j = void 0 === O ? new s.PopupNavigator() : O,
            M = r.iframeNavigator,
            H = void 0 === M ? new a.IFrameNavigator() : M,
            V = r.userStore,
            K = void 0 === V ? new u.WebStorageStateStore({ store: c.Global.sessionStorage }) : V;l(this, e);var q = f(this, t.call(this, arguments[0]));return q._popup_redirect_uri = n, q._popup_post_logout_redirect_uri = i, q._popupWindowFeatures = g, q._popupWindowTarget = d, q._silent_redirect_uri = p, q._silentRequestTimeout = v, q._automaticSilentRenew = m, q._validateSubOnSilentRenew = S, q._includeIdTokenInSilentRenew = w, q._accessTokenExpiringNotificationTime = N, q._monitorSession = E, q._monitorAnonymousSession = k, q._checkSessionInterval = P, q._stopCheckSessionOnError = T, R ? q._query_status_response_type = R : arguments[0] && arguments[0].response_type ? q._query_status_response_type = h.SigninRequest.isOidc(arguments[0].response_type) ? "id_token" : "code" : q._query_status_response_type = "id_token", q._revokeAccessTokenOnSignout = D, q._redirectNavigator = B, q._popupNavigator = j, q._iframeNavigator = H, q._userStore = K, q;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), n(e, [{ key: "popup_redirect_uri", get: function t() {
          return this._popup_redirect_uri;
        } }, { key: "popup_post_logout_redirect_uri", get: function t() {
          return this._popup_post_logout_redirect_uri;
        } }, { key: "popupWindowFeatures", get: function t() {
          return this._popupWindowFeatures;
        } }, { key: "popupWindowTarget", get: function t() {
          return this._popupWindowTarget;
        } }, { key: "silent_redirect_uri", get: function t() {
          return this._silent_redirect_uri;
        } }, { key: "silentRequestTimeout", get: function t() {
          return this._silentRequestTimeout;
        } }, { key: "automaticSilentRenew", get: function t() {
          return this._automaticSilentRenew;
        } }, { key: "validateSubOnSilentRenew", get: function t() {
          return this._validateSubOnSilentRenew;
        } }, { key: "includeIdTokenInSilentRenew", get: function t() {
          return this._includeIdTokenInSilentRenew;
        } }, { key: "accessTokenExpiringNotificationTime", get: function t() {
          return this._accessTokenExpiringNotificationTime;
        } }, { key: "monitorSession", get: function t() {
          return this._monitorSession;
        } }, { key: "monitorAnonymousSession", get: function t() {
          return this._monitorAnonymousSession;
        } }, { key: "checkSessionInterval", get: function t() {
          return this._checkSessionInterval;
        } }, { key: "stopCheckSessionOnError", get: function t() {
          return this._stopCheckSessionOnError;
        } }, { key: "query_status_response_type", get: function t() {
          return this._query_status_response_type;
        } }, { key: "revokeAccessTokenOnSignout", get: function t() {
          return this._revokeAccessTokenOnSignout;
        } }, { key: "redirectNavigator", get: function t() {
          return this._redirectNavigator;
        } }, { key: "popupNavigator", get: function t() {
          return this._popupNavigator;
        } }, { key: "iframeNavigator", get: function t() {
          return this._iframeNavigator;
        } }, { key: "userStore", get: function t() {
          return this._userStore;
        } }]), e;
    }(i.OidcClientSettings);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.RedirectNavigator = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0);e.RedirectNavigator = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.prepare = function t() {
        return Promise.resolve(this);
      }, t.prototype.navigate = function t(e) {
        return e && e.url ? (e.useReplaceToNavigate ? window.location.replace(e.url) : window.location = e.url, Promise.resolve()) : (i.Log.error("RedirectNavigator.navigate: No url provided"), Promise.reject(new Error("No url provided")));
      }, n(t, [{ key: "url", get: function t() {
          return window.location.href;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.PopupNavigator = void 0;var n = r(0),
        i = r(42);e.PopupNavigator = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.prepare = function t(e) {
        var r = new i.PopupWindow(e);return Promise.resolve(r);
      }, t.prototype.callback = function t(e, r, o) {
        n.Log.debug("PopupNavigator.callback");try {
          return i.PopupWindow.notifyOpener(e, r, o), Promise.resolve();
        } catch (t) {
          return Promise.reject(t);
        }
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.PopupWindow = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(3);e.PopupWindow = function () {
      function t(e) {
        var r = this;!function n(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._promise = new Promise(function (t, e) {
          r._resolve = t, r._reject = e;
        });var o = e.popupWindowTarget || "_blank",
            s = e.popupWindowFeatures || "location=no,toolbar=no,width=500,height=500,left=100,top=100;";this._popup = window.open("", o, s), this._popup && (i.Log.debug("PopupWindow.ctor: popup successfully created"), this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), 500));
      }return t.prototype.navigate = function t(e) {
        return this._popup ? e && e.url ? (i.Log.debug("PopupWindow.navigate: Setting URL in popup"), this._id = e.id, this._id && (window["popupCallback_" + e.id] = this._callback.bind(this)), this._popup.focus(), this._popup.window.location = e.url) : (this._error("PopupWindow.navigate: no url provided"), this._error("No url provided")) : this._error("PopupWindow.navigate: Error opening popup window"), this.promise;
      }, t.prototype._success = function t(e) {
        i.Log.debug("PopupWindow.callback: Successful response from popup window"), this._cleanup(), this._resolve(e);
      }, t.prototype._error = function t(e) {
        i.Log.error("PopupWindow.error: ", e), this._cleanup(), this._reject(new Error(e));
      }, t.prototype.close = function t() {
        this._cleanup(!1);
      }, t.prototype._cleanup = function t(e) {
        i.Log.debug("PopupWindow.cleanup"), window.clearInterval(this._checkForPopupClosedTimer), this._checkForPopupClosedTimer = null, delete window["popupCallback_" + this._id], this._popup && !e && this._popup.close(), this._popup = null;
      }, t.prototype._checkForPopupClosed = function t() {
        this._popup && !this._popup.closed || this._error("Popup window closed");
      }, t.prototype._callback = function t(e, r) {
        this._cleanup(r), e ? (i.Log.debug("PopupWindow.callback success"), this._success({ url: e })) : (i.Log.debug("PopupWindow.callback: Invalid response from popup"), this._error("Invalid response from popup"));
      }, t.notifyOpener = function t(e, r, n) {
        if (window.opener) {
          if (e = e || window.location.href) {
            var s = o.UrlUtility.parseUrlFragment(e, n);if (s.state) {
              var a = "popupCallback_" + s.state,
                  u = window.opener[a];u ? (i.Log.debug("PopupWindow.notifyOpener: passing url message to opener"), u(e, r)) : i.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
            } else i.Log.warn("PopupWindow.notifyOpener: no state found in response url");
          }
        } else i.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
      }, n(t, [{ key: "promise", get: function t() {
          return this._promise;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.IFrameNavigator = void 0;var n = r(0),
        i = r(44);e.IFrameNavigator = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.prepare = function t(e) {
        var r = new i.IFrameWindow(e);return Promise.resolve(r);
      }, t.prototype.callback = function t(e) {
        n.Log.debug("IFrameNavigator.callback");try {
          return i.IFrameWindow.notifyParent(e), Promise.resolve();
        } catch (t) {
          return Promise.reject(t);
        }
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.IFrameWindow = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0);e.IFrameWindow = function () {
      function t(e) {
        var r = this;!function n(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._promise = new Promise(function (t, e) {
          r._resolve = t, r._reject = e;
        }), this._boundMessageEvent = this._message.bind(this), window.addEventListener("message", this._boundMessageEvent, !1), this._frame = window.document.createElement("iframe"), this._frame.style.visibility = "hidden", this._frame.style.position = "absolute", this._frame.width = 0, this._frame.height = 0, window.document.body.appendChild(this._frame);
      }return t.prototype.navigate = function t(e) {
        if (e && e.url) {
          var r = e.silentRequestTimeout || 1e4;i.Log.debug("IFrameWindow.navigate: Using timeout of:", r), this._timer = window.setTimeout(this._timeout.bind(this), r), this._frame.src = e.url;
        } else this._error("No url provided");return this.promise;
      }, t.prototype._success = function t(e) {
        this._cleanup(), i.Log.debug("IFrameWindow: Successful response from frame window"), this._resolve(e);
      }, t.prototype._error = function t(e) {
        this._cleanup(), i.Log.error(e), this._reject(new Error(e));
      }, t.prototype.close = function t() {
        this._cleanup();
      }, t.prototype._cleanup = function t() {
        this._frame && (i.Log.debug("IFrameWindow: cleanup"), window.removeEventListener("message", this._boundMessageEvent, !1), window.clearTimeout(this._timer), window.document.body.removeChild(this._frame), this._timer = null, this._frame = null, this._boundMessageEvent = null);
      }, t.prototype._timeout = function t() {
        i.Log.debug("IFrameWindow.timeout"), this._error("Frame window timed out");
      }, t.prototype._message = function t(e) {
        if (i.Log.debug("IFrameWindow.message"), this._timer && e.origin === this._origin && e.source === this._frame.contentWindow && "string" == typeof e.data && (e.data.startsWith("http://") || e.data.startsWith("https://"))) {
          var r = e.data;r ? this._success({ url: r }) : this._error("Invalid response from frame");
        }
      }, t.notifyParent = function t(e) {
        i.Log.debug("IFrameWindow.notifyParent"), (e = e || window.location.href) && (i.Log.debug("IFrameWindow.notifyParent: posting url message to parent"), window.parent.postMessage(e, location.protocol + "//" + location.host));
      }, n(t, [{ key: "promise", get: function t() {
          return this._promise;
        } }, { key: "_origin", get: function t() {
          return location.protocol + "//" + location.host;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.UserManagerEvents = void 0;var n = r(0),
        i = r(17),
        o = r(18);e.UserManagerEvents = function (t) {
      function e(r) {
        !function n(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, e);var i = function s(t, e) {
          if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
        }(this, t.call(this, r));return i._userLoaded = new o.Event("User loaded"), i._userUnloaded = new o.Event("User unloaded"), i._silentRenewError = new o.Event("Silent renew error"), i._userSignedIn = new o.Event("User signed in"), i._userSignedOut = new o.Event("User signed out"), i._userSessionChanged = new o.Event("User session changed"), i;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), e.prototype.load = function e(r) {
        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];n.Log.debug("UserManagerEvents.load"), t.prototype.load.call(this, r), i && this._userLoaded.raise(r);
      }, e.prototype.unload = function e() {
        n.Log.debug("UserManagerEvents.unload"), t.prototype.unload.call(this), this._userUnloaded.raise();
      }, e.prototype.addUserLoaded = function t(e) {
        this._userLoaded.addHandler(e);
      }, e.prototype.removeUserLoaded = function t(e) {
        this._userLoaded.removeHandler(e);
      }, e.prototype.addUserUnloaded = function t(e) {
        this._userUnloaded.addHandler(e);
      }, e.prototype.removeUserUnloaded = function t(e) {
        this._userUnloaded.removeHandler(e);
      }, e.prototype.addSilentRenewError = function t(e) {
        this._silentRenewError.addHandler(e);
      }, e.prototype.removeSilentRenewError = function t(e) {
        this._silentRenewError.removeHandler(e);
      }, e.prototype._raiseSilentRenewError = function t(e) {
        n.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message), this._silentRenewError.raise(e);
      }, e.prototype.addUserSignedIn = function t(e) {
        this._userSignedIn.addHandler(e);
      }, e.prototype.removeUserSignedIn = function t(e) {
        this._userSignedIn.removeHandler(e);
      }, e.prototype._raiseUserSignedIn = function t() {
        n.Log.debug("UserManagerEvents._raiseUserSignedIn"), this._userSignedIn.raise();
      }, e.prototype.addUserSignedOut = function t(e) {
        this._userSignedOut.addHandler(e);
      }, e.prototype.removeUserSignedOut = function t(e) {
        this._userSignedOut.removeHandler(e);
      }, e.prototype._raiseUserSignedOut = function t() {
        n.Log.debug("UserManagerEvents._raiseUserSignedOut"), this._userSignedOut.raise();
      }, e.prototype.addUserSessionChanged = function t(e) {
        this._userSessionChanged.addHandler(e);
      }, e.prototype.removeUserSessionChanged = function t(e) {
        this._userSessionChanged.removeHandler(e);
      }, e.prototype._raiseUserSessionChanged = function t() {
        n.Log.debug("UserManagerEvents._raiseUserSessionChanged"), this._userSessionChanged.raise();
      }, e;
    }(i.AccessTokenEvents);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.Timer = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(0),
        o = r(1),
        s = r(18);function a(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }function u(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
    }e.Timer = function (t) {
      function e(r) {
        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.Global.timer,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;a(this, e);var s = u(this, t.call(this, r));return s._timer = n, s._nowFunc = i || function () {
          return Date.now() / 1e3;
        }, s;
      }return function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
      }(e, t), e.prototype.init = function t(e) {
        e <= 0 && (e = 1), e = parseInt(e);var r = this.now + e;if (this.expiration === r && this._timerHandle) i.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);else {
          this.cancel(), i.Log.debug("Timer.init timer " + this._name + " for duration:", e), this._expiration = r;var n = 5;e < n && (n = e), this._timerHandle = this._timer.setInterval(this._callback.bind(this), 1e3 * n);
        }
      }, e.prototype.cancel = function t() {
        this._timerHandle && (i.Log.debug("Timer.cancel: ", this._name), this._timer.clearInterval(this._timerHandle), this._timerHandle = null);
      }, e.prototype._callback = function e() {
        var r = this._expiration - this.now;i.Log.debug("Timer.callback; " + this._name + " timer expires in:", r), this._expiration <= this.now && (this.cancel(), t.prototype.raise.call(this));
      }, n(e, [{ key: "now", get: function t() {
          return parseInt(this._nowFunc());
        } }, { key: "expiration", get: function t() {
          return this._expiration;
        } }]), e;
    }(s.Event);
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.SilentRenewService = void 0;var n = r(0);e.SilentRenewService = function () {
      function t(e) {
        !function r(t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this._userManager = e;
      }return t.prototype.start = function t() {
        this._callback || (this._callback = this._tokenExpiring.bind(this), this._userManager.events.addAccessTokenExpiring(this._callback), this._userManager.getUser().then(function (t) {}).catch(function (t) {
          n.Log.error("SilentRenewService.start: Error from getUser:", t.message);
        }));
      }, t.prototype.stop = function t() {
        this._callback && (this._userManager.events.removeAccessTokenExpiring(this._callback), delete this._callback);
      }, t.prototype._tokenExpiring = function t() {
        var e = this;this._userManager.signinSilent().then(function (t) {
          n.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
        }, function (t) {
          n.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", t.message), e._userManager.events._raiseSilentRenewError(t);
        });
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.CordovaPopupNavigator = void 0;var n = r(22);e.CordovaPopupNavigator = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.prepare = function t(e) {
        var r = new n.CordovaPopupWindow(e);return Promise.resolve(r);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.CordovaIFrameNavigator = void 0;var n = r(22);e.CordovaIFrameNavigator = function () {
      function t() {
        !function e(t, r) {
          if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
        }(this, t);
      }return t.prototype.prepare = function t(e) {
        e.popupWindowFeatures = "hidden=yes";var r = new n.CordovaPopupWindow(e);return Promise.resolve(r);
      }, t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.IdentityAuthService = e.AuthService = void 0;var n = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        i = r(10);function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }var s = e.AuthService = function () {
      function t(e, r) {
        o(this, t), this.settings = e, this.extraHeaders = r, this.userManager = new i.UserManager(e);
      }return t.prototype.requestOrRenewToken = function t(e) {
        return this.userManager.signinClientCredentials({ state: e }, this.extraHeaders);
      }, t.prototype.getUser = function t() {
        return this.userManager.getUser().then(function (t) {
          return t ? Promise.resolve(t) : Promise.reject("User is not authenticated");
        });
      }, t;
    }();e.IdentityAuthService = function () {
      function t() {
        o(this, t);
      }return n(t, null, [{ key: "settings", get: function t() {
          return this._settings;
        }, set: function t(e) {
          this._settings = e;
        } }, { key: "extraHeaders", get: function t() {
          return this._extraHeaders;
        }, set: function t(e) {
          this._extraHeaders = e;
        } }, { key: "instance", get: function t() {
          return this.authService || (this.authService = new s(this._settings, this._extraHeaders)), this.authService;
        } }]), t;
    }();
  }, function (t, e, r) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });e.Version = "1.11.5";
  }]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/AccessTokenEvents.js":
/*!**********************************!*\
  !*** ./src/AccessTokenEvents.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccessTokenEvents = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Timer = __webpack_require__(/*! ./Timer.js */ "./src/Timer.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60; // seconds

var AccessTokenEvents = exports.AccessTokenEvents = function () {
    function AccessTokenEvents() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
            accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer.Timer("Access token expiring") : _ref$accessTokenExpir2,
            _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
            accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer.Timer("Access token expired") : _ref$accessTokenExpir3;

        _classCallCheck(this, AccessTokenEvents);

        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        this._accessTokenExpiring = accessTokenExpiringTimer;
        this._accessTokenExpired = accessTokenExpiredTimer;
    }

    AccessTokenEvents.prototype.load = function load(container) {
        // only register events if there's an access token and it has an expiration
        if (container.access_token && container.expires_in !== undefined) {
            var duration = container.expires_in;
            _Log.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", duration);

            if (duration > 0) {
                // only register expiring if we still have time
                var expiring = duration - this._accessTokenExpiringNotificationTime;
                if (expiring <= 0) {
                    expiring = 1;
                }

                _Log.Log.debug("AccessTokenEvents.load: registering expiring timer in:", expiring);
                this._accessTokenExpiring.init(expiring);
            } else {
                _Log.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration.");
                this._accessTokenExpiring.cancel();
            }

            // if it's negative, it will still fire
            var expired = duration + 1;
            _Log.Log.debug("AccessTokenEvents.load: registering expired timer in:", expired);
            this._accessTokenExpired.init(expired);
        } else {
            this._accessTokenExpiring.cancel();
            this._accessTokenExpired.cancel();
        }
    };

    AccessTokenEvents.prototype.unload = function unload() {
        _Log.Log.debug("AccessTokenEvents.unload: canceling existing access token timers");
        this._accessTokenExpiring.cancel();
        this._accessTokenExpired.cancel();
    };

    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
        this._accessTokenExpiring.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
        this._accessTokenExpiring.removeHandler(cb);
    };

    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
        this._accessTokenExpired.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
        this._accessTokenExpired.removeHandler(cb);
    };

    return AccessTokenEvents;
}();

/***/ }),

/***/ "./src/CheckSessionIFrame.js":
/*!***********************************!*\
  !*** ./src/CheckSessionIFrame.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckSessionIFrame = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultInterval = 2000;

var CheckSessionIFrame = exports.CheckSessionIFrame = function () {
    function CheckSessionIFrame(callback, client_id, url, interval) {
        var stopOnError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        _classCallCheck(this, CheckSessionIFrame);

        this._callback = callback;
        this._client_id = client_id;
        this._url = url;
        this._interval = interval || DefaultInterval;
        this._stopOnError = stopOnError;

        var idx = url.indexOf("/", url.indexOf("//") + 2);
        this._frame_origin = url.substr(0, idx);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.style.display = "none";
        this._frame.width = 0;
        this._frame.height = 0;

        this._frame.src = url;
    }

    CheckSessionIFrame.prototype.load = function load() {
        var _this = this;

        return new Promise(function (resolve) {
            _this._frame.onload = function () {
                resolve();
            };

            window.document.body.appendChild(_this._frame);
            _this._boundMessageEvent = _this._message.bind(_this);
            window.addEventListener("message", _this._boundMessageEvent, false);
        });
    };

    CheckSessionIFrame.prototype._message = function _message(e) {
        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
            if (e.data === "error") {
                _Log.Log.error("CheckSessionIFrame: error message from check session op iframe");
                if (this._stopOnError) {
                    this.stop();
                }
            } else if (e.data === "changed") {
                _Log.Log.debug("CheckSessionIFrame: changed message from check session op iframe");
                this.stop();
                this._callback();
            } else {
                _Log.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe");
            }
        }
    };

    CheckSessionIFrame.prototype.start = function start(session_state) {
        var _this2 = this;

        if (this._session_state !== session_state) {
            _Log.Log.debug("CheckSessionIFrame.start");

            this.stop();

            this._session_state = session_state;

            var send = function send() {
                _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
            };

            // trigger now
            send();

            // and setup timer
            this._timer = window.setInterval(send, this._interval);
        }
    };

    CheckSessionIFrame.prototype.stop = function stop() {
        this._session_state = null;

        if (this._timer) {
            _Log.Log.debug("CheckSessionIFrame.stop");

            window.clearInterval(this._timer);
            this._timer = null;
        }
    };

    return CheckSessionIFrame;
}();

/***/ }),

/***/ "./src/ClockService.js":
/*!*****************************!*\
  !*** ./src/ClockService.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ClockService = exports.ClockService = function () {
    function ClockService() {
        _classCallCheck(this, ClockService);
    }

    ClockService.prototype.getEpochTime = function getEpochTime() {
        return Promise.resolve(Date.now() / 1000 | 0);
    };

    return ClockService;
}();

/***/ }),

/***/ "./src/CordovaIFrameNavigator.js":
/*!***************************************!*\
  !*** ./src/CordovaIFrameNavigator.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaIFrameNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = function () {
    function CordovaIFrameNavigator() {
        _classCallCheck(this, CordovaIFrameNavigator);
    }

    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
        params.popupWindowFeatures = 'hidden=yes';
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaIFrameNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupNavigator.js":
/*!**************************************!*\
  !*** ./src/CordovaPopupNavigator.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaPopupNavigator = exports.CordovaPopupNavigator = function () {
    function CordovaPopupNavigator() {
        _classCallCheck(this, CordovaPopupNavigator);
    }

    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaPopupNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupWindow.js":
/*!***********************************!*\
  !*** ./src/CordovaPopupWindow.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
var DefaultPopupTarget = "_blank";

var CordovaPopupWindow = exports.CordovaPopupWindow = function () {
    function CordovaPopupWindow(params) {
        var _this = this;

        _classCallCheck(this, CordovaPopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
        this.target = params.popupWindowTarget || DefaultPopupTarget;

        this.redirect_uri = params.startUrl;
        _Log.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
    }

    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
            return cordovaMetadata.hasOwnProperty(name);
        });
    };

    CordovaPopupWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            if (!window.cordova) {
                return this._error("cordova is undefined");
            }

            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
                return this._error("InAppBrowser plugin not found");
            }
            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
            if (this._popup) {
                _Log.Log.debug("CordovaPopupWindow.navigate: popup successfully created");

                this._exitCallbackEvent = this._exitCallback.bind(this);
                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);

                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
            } else {
                this._error("Error opening popup window");
            }
        }
        return this.promise;
    };

    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
        if (event.url.indexOf(this.redirect_uri) === 0) {
            this._success({ url: event.url });
        }
    };

    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
        this._error(message);
    };

    CordovaPopupWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("CordovaPopupWindow: Successful response from cordova popup window");
        this._resolve(data);
    };

    CordovaPopupWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    CordovaPopupWindow.prototype.close = function close() {
        this._cleanup();
    };

    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
        if (this._popup) {
            _Log.Log.debug("CordovaPopupWindow: cleaning up popup");
            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
            this._popup.close();
        }
        this._popup = null;
    };

    _createClass(CordovaPopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return CordovaPopupWindow;
}();

/***/ }),

/***/ "./src/ErrorResponse.js":
/*!******************************!*\
  !*** ./src/ErrorResponse.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.ErrorResponse = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ErrorResponse = exports.ErrorResponse = function (_Error) {
        _inherits(ErrorResponse, _Error);

        function ErrorResponse() {
                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    error = _ref.error,
                    error_description = _ref.error_description,
                    error_uri = _ref.error_uri,
                    state = _ref.state,
                    session_state = _ref.session_state;

                _classCallCheck(this, ErrorResponse);

                if (!error) {
                        _Log.Log.error("No error passed to ErrorResponse");
                        throw new Error("error");
                }

                var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));

                _this.name = "ErrorResponse";

                _this.error = error;
                _this.error_description = error_description;
                _this.error_uri = error_uri;

                _this.state = state;
                _this.session_state = session_state;
                return _this;
        }

        return ErrorResponse;
}(Error);

/***/ }),

/***/ "./src/Event.js":
/*!**********************!*\
  !*** ./src/Event.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Event = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var Event = exports.Event = function () {
    function Event(name) {
        _classCallCheck(this, Event);

        this._name = name;
        this._callbacks = [];
    }

    Event.prototype.addHandler = function addHandler(cb) {
        this._callbacks.push(cb);
    };

    Event.prototype.removeHandler = function removeHandler(cb) {
        var idx = this._callbacks.findIndex(function (item) {
            return item === cb;
        });
        if (idx >= 0) {
            this._callbacks.splice(idx, 1);
        }
    };

    Event.prototype.raise = function raise() {
        _Log.Log.debug("Event: Raising event: " + this._name);
        for (var i = 0; i < this._callbacks.length; i++) {
            var _callbacks;

            (_callbacks = this._callbacks)[i].apply(_callbacks, arguments);
        }
    };

    return Event;
}();

/***/ }),

/***/ "./src/Global.js":
/*!***********************!*\
  !*** ./src/Global.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var timer = {
    setInterval: function (_setInterval) {
        function setInterval(_x, _x2) {
            return _setInterval.apply(this, arguments);
        }

        setInterval.toString = function () {
            return _setInterval.toString();
        };

        return setInterval;
    }(function (cb, duration) {
        return setInterval(cb, duration);
    }),
    clearInterval: function (_clearInterval) {
        function clearInterval(_x3) {
            return _clearInterval.apply(this, arguments);
        }

        clearInterval.toString = function () {
            return _clearInterval.toString();
        };

        return clearInterval;
    }(function (handle) {
        return clearInterval(handle);
    })
};

var testing = false;
var request = null;

var Global = exports.Global = function () {
    function Global() {
        _classCallCheck(this, Global);
    }

    Global._testing = function _testing() {
        testing = true;
    };

    Global.setXMLHttpRequest = function setXMLHttpRequest(newRequest) {
        request = newRequest;
    };

    _createClass(Global, null, [{
        key: 'location',
        get: function get() {
            if (!testing) {
                return location;
            }
        }
    }, {
        key: 'localStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return localStorage;
            }
        }
    }, {
        key: 'sessionStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return sessionStorage;
            }
        }
    }, {
        key: 'XMLHttpRequest',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return request || XMLHttpRequest;
            }
        }
    }, {
        key: 'timer',
        get: function get() {
            if (!testing) {
                return timer;
            }
        }
    }]);

    return Global;
}();

/***/ }),

/***/ "./src/IFrameNavigator.js":
/*!********************************!*\
  !*** ./src/IFrameNavigator.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameNavigator = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _IFrameWindow = __webpack_require__(/*! ./IFrameWindow.js */ "./src/IFrameWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var IFrameNavigator = exports.IFrameNavigator = function () {
    function IFrameNavigator() {
        _classCallCheck(this, IFrameNavigator);
    }

    IFrameNavigator.prototype.prepare = function prepare(params) {
        var frame = new _IFrameWindow.IFrameWindow(params);
        return Promise.resolve(frame);
    };

    IFrameNavigator.prototype.callback = function callback(url) {
        _Log.Log.debug("IFrameNavigator.callback");

        try {
            _IFrameWindow.IFrameWindow.notifyParent(url);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return IFrameNavigator;
}();

/***/ }),

/***/ "./src/IFrameWindow.js":
/*!*****************************!*\
  !*** ./src/IFrameWindow.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultTimeout = 10000;

var IFrameWindow = exports.IFrameWindow = function () {
    function IFrameWindow(params) {
        var _this = this;

        _classCallCheck(this, IFrameWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this._boundMessageEvent = this._message.bind(this);
        window.addEventListener("message", this._boundMessageEvent, false);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.width = 0;
        this._frame.height = 0;

        window.document.body.appendChild(this._frame);
    }

    IFrameWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            var timeout = params.silentRequestTimeout || DefaultTimeout;
            _Log.Log.debug("IFrameWindow.navigate: Using timeout of:", timeout);
            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
            this._frame.src = params.url;
        }

        return this.promise;
    };

    IFrameWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("IFrameWindow: Successful response from frame window");
        this._resolve(data);
    };

    IFrameWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    IFrameWindow.prototype.close = function close() {
        this._cleanup();
    };

    IFrameWindow.prototype._cleanup = function _cleanup() {
        if (this._frame) {
            _Log.Log.debug("IFrameWindow: cleanup");

            window.removeEventListener("message", this._boundMessageEvent, false);
            window.clearTimeout(this._timer);
            window.document.body.removeChild(this._frame);

            this._timer = null;
            this._frame = null;
            this._boundMessageEvent = null;
        }
    };

    IFrameWindow.prototype._timeout = function _timeout() {
        _Log.Log.debug("IFrameWindow.timeout");
        this._error("Frame window timed out");
    };

    IFrameWindow.prototype._message = function _message(e) {
        _Log.Log.debug("IFrameWindow.message");

        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow && typeof e.data === 'string' && (e.data.startsWith('http://') || e.data.startsWith('https://'))) {
            var url = e.data;
            if (url) {
                this._success({ url: url });
            } else {
                this._error("Invalid response from frame");
            }
        }
    };

    IFrameWindow.notifyParent = function notifyParent(url) {
        _Log.Log.debug("IFrameWindow.notifyParent");
        url = url || window.location.href;
        if (url) {
            _Log.Log.debug("IFrameWindow.notifyParent: posting url message to parent");
            window.parent.postMessage(url, location.protocol + "//" + location.host);
        }
    };

    _createClass(IFrameWindow, [{
        key: "promise",
        get: function get() {
            return this._promise;
        }
    }, {
        key: "_origin",
        get: function get() {
            return location.protocol + "//" + location.host;
        }
    }]);

    return IFrameWindow;
}();

/***/ }),

/***/ "./src/InMemoryWebStorage.js":
/*!***********************************!*\
  !*** ./src/InMemoryWebStorage.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InMemoryWebStorage = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InMemoryWebStorage = exports.InMemoryWebStorage = function () {
    function InMemoryWebStorage() {
        _classCallCheck(this, InMemoryWebStorage);

        this._data = {};
    }

    InMemoryWebStorage.prototype.getItem = function getItem(key) {
        _Log.Log.debug("InMemoryWebStorage.getItem", key);
        return this._data[key];
    };

    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
        _Log.Log.debug("InMemoryWebStorage.setItem", key);
        this._data[key] = value;
    };

    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
        _Log.Log.debug("InMemoryWebStorage.removeItem", key);
        delete this._data[key];
    };

    InMemoryWebStorage.prototype.key = function key(index) {
        return Object.getOwnPropertyNames(this._data)[index];
    };

    _createClass(InMemoryWebStorage, [{
        key: "length",
        get: function get() {
            return Object.getOwnPropertyNames(this._data).length;
        }
    }]);

    return InMemoryWebStorage;
}();

/***/ }),

/***/ "./src/JoseUtil.js":
/*!*************************!*\
  !*** ./src/JoseUtil.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JoseUtil = undefined;

var _jsrsasign = __webpack_require__(/*! ./crypto/jsrsasign */ "./src/crypto/jsrsasign.js");

var _JoseUtilImpl = __webpack_require__(/*! ./JoseUtilImpl */ "./src/JoseUtilImpl.js");

var _JoseUtilImpl2 = _interopRequireDefault(_JoseUtilImpl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JoseUtil = exports.JoseUtil = (0, _JoseUtilImpl2.default)({ jws: _jsrsasign.jws, KeyUtil: _jsrsasign.KeyUtil, X509: _jsrsasign.X509, crypto: _jsrsasign.crypto, hextob64u: _jsrsasign.hextob64u, b64tohex: _jsrsasign.b64tohex, AllowedSigningAlgs: _jsrsasign.AllowedSigningAlgs });

/***/ }),

/***/ "./src/JoseUtilImpl.js":
/*!*****************************!*\
  !*** ./src/JoseUtilImpl.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getJoseUtil;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

function getJoseUtil(_ref) {
    var jws = _ref.jws,
        KeyUtil = _ref.KeyUtil,
        X509 = _ref.X509,
        crypto = _ref.crypto,
        hextob64u = _ref.hextob64u,
        b64tohex = _ref.b64tohex,
        AllowedSigningAlgs = _ref.AllowedSigningAlgs;

    return function () {
        function JoseUtil() {
            _classCallCheck(this, JoseUtil);
        }

        JoseUtil.parseJwt = function parseJwt(jwt) {
            _Log.Log.debug("JoseUtil.parseJwt");
            try {
                var token = jws.JWS.parse(jwt);
                return {
                    header: token.headerObj,
                    payload: token.payloadObj
                };
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {
            _Log.Log.debug("JoseUtil.validateJwt");

            try {
                if (key.kty === "RSA") {
                    if (key.e && key.n) {
                        key = KeyUtil.getKey(key);
                    } else if (key.x5c && key.x5c.length) {
                        var hex = b64tohex(key.x5c[0]);
                        key = X509.getPublicKeyFromCertHex(hex);
                    } else {
                        _Log.Log.error("JoseUtil.validateJwt: RSA key missing key material", key);
                        return Promise.reject(new Error("RSA key missing key material"));
                    }
                } else if (key.kty === "EC") {
                    if (key.crv && key.x && key.y) {
                        key = KeyUtil.getKey(key);
                    } else {
                        _Log.Log.error("JoseUtil.validateJwt: EC key missing key material", key);
                        return Promise.reject(new Error("EC key missing key material"));
                    }
                } else {
                    _Log.Log.error("JoseUtil.validateJwt: Unsupported key type", key && key.kty);
                    return Promise.reject(new Error( true && key.kty));
                }

                return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive);
            } catch (e) {
                _Log.Log.error(e && e.message || e);
                return Promise.reject("JWT validation failed");
            }
        };

        JoseUtil.validateJwtAttributes = function validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive) {
            if (!clockSkew) {
                clockSkew = 0;
            }

            if (!now) {
                now = parseInt(Date.now() / 1000);
            }

            var payload = JoseUtil.parseJwt(jwt).payload;

            if (!payload.iss) {
                _Log.Log.error("JoseUtil._validateJwt: issuer was not provided");
                return Promise.reject(new Error("issuer was not provided"));
            }
            if (payload.iss !== issuer) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid issuer in token", payload.iss);
                return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
            }

            if (!payload.aud) {
                _Log.Log.error("JoseUtil._validateJwt: aud was not provided");
                return Promise.reject(new Error("aud was not provided"));
            }
            var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;
            if (!validAudience) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid audience in token", payload.aud);
                return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
            }
            if (payload.azp && payload.azp !== audience) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid azp in token", payload.azp);
                return Promise.reject(new Error("Invalid azp in token: " + payload.azp));
            }

            if (!timeInsensitive) {
                var lowerNow = now + clockSkew;
                var upperNow = now - clockSkew;

                if (!payload.iat) {
                    _Log.Log.error("JoseUtil._validateJwt: iat was not provided");
                    return Promise.reject(new Error("iat was not provided"));
                }
                if (lowerNow < payload.iat) {
                    _Log.Log.error("JoseUtil._validateJwt: iat is in the future", payload.iat);
                    return Promise.reject(new Error("iat is in the future: " + payload.iat));
                }

                if (payload.nbf && lowerNow < payload.nbf) {
                    _Log.Log.error("JoseUtil._validateJwt: nbf is in the future", payload.nbf);
                    return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
                }

                if (!payload.exp) {
                    _Log.Log.error("JoseUtil._validateJwt: exp was not provided");
                    return Promise.reject(new Error("exp was not provided"));
                }
                if (payload.exp < upperNow) {
                    _Log.Log.error("JoseUtil._validateJwt: exp is in the past", payload.exp);
                    return Promise.reject(new Error("exp is in the past:" + payload.exp));
                }
            }

            return Promise.resolve(payload);
        };

        JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {

            return JoseUtil.validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive).then(function (payload) {
                try {
                    if (!jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
                        _Log.Log.error("JoseUtil._validateJwt: signature validation failed");
                        return Promise.reject(new Error("signature validation failed"));
                    }

                    return payload;
                } catch (e) {
                    _Log.Log.error(e && e.message || e);
                    return Promise.reject(new Error("signature validation failed"));
                }
            });
        };

        JoseUtil.hashString = function hashString(value, alg) {
            try {
                return crypto.Util.hashString(value, alg);
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
            try {
                return hextob64u(value);
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        return JoseUtil;
    }();
}
module.exports = exports["default"];

/***/ }),

/***/ "./src/JsonService.js":
/*!****************************!*\
  !*** ./src/JsonService.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JsonService = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var JsonService = exports.JsonService = function () {
    function JsonService() {
        var additionalContentTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
        var jwtHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, JsonService);

        if (additionalContentTypes && Array.isArray(additionalContentTypes)) {
            this._contentTypes = additionalContentTypes.slice();
        } else {
            this._contentTypes = [];
        }
        this._contentTypes.push('application/json');
        if (jwtHandler) {
            this._contentTypes.push('application/jwt');
        }

        this._XMLHttpRequest = XMLHttpRequestCtor;
        this._jwtHandler = jwtHandler;
    }

    JsonService.prototype.getJson = function getJson(url, token) {
        var _this = this;

        if (!url) {
            _Log.Log.error("JsonService.getJson: No url passed");
            throw new Error("url");
        }

        _Log.Log.debug("JsonService.getJson, url: ", url);

        return new Promise(function (resolve, reject) {

            var req = new _this._XMLHttpRequest();
            req.open('GET', url);

            var allowedContentTypes = _this._contentTypes;
            var jwtHandler = _this._jwtHandler;

            req.onload = function () {
                _Log.Log.debug("JsonService.getJson: HTTP response received, status", req.status);

                if (req.status === 200) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found == "application/jwt") {
                            jwtHandler(req).then(resolve, reject);
                            return;
                        }

                        if (found) {
                            try {
                                resolve(JSON.parse(req.responseText));
                                return;
                            } catch (e) {
                                _Log.Log.error("JsonService.getJson: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }

                    reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
                } else {
                    reject(Error(req.statusText + " (" + req.status + ")"));
                }
            };

            req.onerror = function () {
                _Log.Log.error("JsonService.getJson: network error");
                reject(Error("Network Error"));
            };

            if (token) {
                _Log.Log.debug("JsonService.getJson: token passed, setting Authorization header");
                req.setRequestHeader("Authorization", "Bearer " + token);
            }

            req.send();
        });
    };

    JsonService.prototype.postForm = function postForm(url, payload, basicAuth, extraHeaders) {
        var _this2 = this;

        if (!url) {
            _Log.Log.error("JsonService.postForm: No url passed");
            throw new Error("url");
        }

        _Log.Log.debug("JsonService.postForm, url: ", url);

        return new Promise(function (resolve, reject) {

            var req = new _this2._XMLHttpRequest();
            req.open('POST', url);

            var allowedContentTypes = _this2._contentTypes;

            req.onload = function () {
                _Log.Log.debug("JsonService.postForm: HTTP response received, status", req.status);

                if (req.status === 200) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found) {
                            try {
                                resolve(JSON.parse(req.responseText));
                                return;
                            } catch (e) {
                                _Log.Log.error("JsonService.postForm: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }

                    reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
                    return;
                }

                if (req.status === 400) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found) {
                            try {
                                var payload = JSON.parse(req.responseText);
                                if (payload && payload.error) {
                                    _Log.Log.error("JsonService.postForm: Error from server: ", payload.error);
                                    reject(new Error(payload.error));
                                    return;
                                }
                            } catch (e) {
                                _Log.Log.error("JsonService.postForm: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }
                }

                reject(Error(req.statusText + " (" + req.status + ")"));
            };

            req.onerror = function () {
                _Log.Log.error("JsonService.postForm: network error");
                reject(Error("Network Error"));
            };

            var body = "";
            for (var _key in payload) {

                var _value = payload[_key];

                if (_value) {

                    if (body.length > 0) {
                        body += "&";
                    }

                    body += encodeURIComponent(_key);
                    body += "=";
                    body += encodeURIComponent(_value);
                }
            }

            req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            if (basicAuth !== undefined) {
                req.setRequestHeader("Authorization", "Basic " + btoa(basicAuth));
            }

            if (extraHeaders !== undefined) {
                for (var key in extraHeaders) {
                    var value = extraHeaders[key];
                    req.setRequestHeader(key, value);
                }
            }

            req.send(body);
        });
    };

    return JsonService;
}();

/***/ }),

/***/ "./src/Log.js":
/*!********************!*\
  !*** ./src/Log.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var nopLogger = {
    debug: function debug() {},
    info: function info() {},
    warn: function warn() {},
    error: function error() {}
};

var NONE = 0;
var ERROR = 1;
var WARN = 2;
var INFO = 3;
var DEBUG = 4;

var logger = void 0;
var level = void 0;

var Log = exports.Log = function () {
    function Log() {
        _classCallCheck(this, Log);
    }

    Log.reset = function reset() {
        level = INFO;
        logger = nopLogger;
    };

    Log.debug = function debug() {
        if (level >= DEBUG) {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            logger.debug.apply(logger, Array.from(args));
        }
    };

    Log.info = function info() {
        if (level >= INFO) {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            logger.info.apply(logger, Array.from(args));
        }
    };

    Log.warn = function warn() {
        if (level >= WARN) {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            logger.warn.apply(logger, Array.from(args));
        }
    };

    Log.error = function error() {
        if (level >= ERROR) {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            logger.error.apply(logger, Array.from(args));
        }
    };

    _createClass(Log, null, [{
        key: "NONE",
        get: function get() {
            return NONE;
        }
    }, {
        key: "ERROR",
        get: function get() {
            return ERROR;
        }
    }, {
        key: "WARN",
        get: function get() {
            return WARN;
        }
    }, {
        key: "INFO",
        get: function get() {
            return INFO;
        }
    }, {
        key: "DEBUG",
        get: function get() {
            return DEBUG;
        }
    }, {
        key: "level",
        get: function get() {
            return level;
        },
        set: function set(value) {
            if (NONE <= value && value <= DEBUG) {
                level = value;
            } else {
                throw new Error("Invalid log level");
            }
        }
    }, {
        key: "logger",
        get: function get() {
            return logger;
        },
        set: function set(value) {
            if (!value.debug && value.info) {
                // just to stay backwards compat. can remove in 2.0
                value.debug = value.info;
            }

            if (value.debug && value.info && value.warn && value.error) {
                logger = value;
            } else {
                throw new Error("Invalid logger");
            }
        }
    }]);

    return Log;
}();

Log.reset();

/***/ }),

/***/ "./src/MetadataService.js":
/*!********************************!*\
  !*** ./src/MetadataService.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MetadataService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var MetadataService = exports.MetadataService = function () {
    function MetadataService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;

        _classCallCheck(this, MetadataService);

        if (!settings) {
            _Log.Log.error("MetadataService: No settings passed to MetadataService");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor(['application/jwk-set+json']);
    }

    MetadataService.prototype.resetSigningKeys = function resetSigningKeys() {
        this._settings = this._settings || {};
        this._settings.signingKeys = undefined;
    };

    MetadataService.prototype.getMetadata = function getMetadata() {
        var _this = this;

        if (this._settings.metadata) {
            _Log.Log.debug("MetadataService.getMetadata: Returning metadata from settings");
            return Promise.resolve(this._settings.metadata);
        }

        if (!this.metadataUrl) {
            _Log.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings");
            return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
        }

        _Log.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl);

        return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadata: json received");

            var seed = _this._settings.metadataSeed || {};
            _this._settings.metadata = Object.assign({}, seed, metadata);
            return _this._settings.metadata;
        });
    };

    MetadataService.prototype.getIssuer = function getIssuer() {
        return this._getMetadataProperty("issuer");
    };

    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
        return this._getMetadataProperty("authorization_endpoint");
    };

    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
        return this._getMetadataProperty("userinfo_endpoint");
    };

    MetadataService.prototype.getTokenEndpoint = function getTokenEndpoint() {
        var optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        return this._getMetadataProperty("token_endpoint", optional);
    };

    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
        return this._getMetadataProperty("check_session_iframe", true);
    };

    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
        return this._getMetadataProperty("end_session_endpoint", true);
    };

    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
        return this._getMetadataProperty("revocation_endpoint", true);
    };

    MetadataService.prototype.getKeysEndpoint = function getKeysEndpoint() {
        return this._getMetadataProperty("jwks_uri", true);
    };

    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _Log.Log.debug("MetadataService.getMetadataProperty for: " + name);

        return this.getMetadata().then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadataProperty: metadata recieved");

            if (metadata[name] === undefined) {

                if (optional === true) {
                    _Log.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + name);
                    return undefined;
                } else {
                    _Log.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + name);
                    throw new Error("Metadata does not contain property " + name);
                }
            }

            return metadata[name];
        });
    };

    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
        var _this2 = this;

        if (this._settings.signingKeys) {
            _Log.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings");
            return Promise.resolve(this._settings.signingKeys);
        }

        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
            _Log.Log.debug("MetadataService.getSigningKeys: jwks_uri received", jwks_uri);

            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
                _Log.Log.debug("MetadataService.getSigningKeys: key set received", keySet);

                if (!keySet.keys) {
                    _Log.Log.error("MetadataService.getSigningKeys: Missing keys on keyset");
                    throw new Error("Missing keys on keyset");
                }

                _this2._settings.signingKeys = keySet.keys;
                return _this2._settings.signingKeys;
            });
        });
    };

    _createClass(MetadataService, [{
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                if (this._settings.metadataUrl) {
                    this._metadataUrl = this._settings.metadataUrl;
                } else {
                    this._metadataUrl = this._settings.authority;

                    if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                        if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                            this._metadataUrl += '/';
                        }
                        this._metadataUrl += OidcMetadataUrlPath;
                    }
                }
            }

            return this._metadataUrl;
        }
    }]);

    return MetadataService;
}();

/***/ }),

/***/ "./src/OidcClient.js":
/*!***************************!*\
  !*** ./src/OidcClient.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClientSettings = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _ErrorResponse = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");

var _SigninResponse = __webpack_require__(/*! ./SigninResponse.js */ "./src/SigninResponse.js");

var _SignoutRequest = __webpack_require__(/*! ./SignoutRequest.js */ "./src/SignoutRequest.js");

var _SignoutResponse = __webpack_require__(/*! ./SignoutResponse.js */ "./src/SignoutResponse.js");

var _SigninState = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");

var _State = __webpack_require__(/*! ./State.js */ "./src/State.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcClient = exports.OidcClient = function () {
    function OidcClient() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, OidcClient);

        if (settings instanceof _OidcClientSettings.OidcClientSettings) {
            this._settings = settings;
        } else {
            this._settings = new _OidcClientSettings.OidcClientSettings(settings);
        }
    }

    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
        var _this = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            response_type = _ref.response_type,
            scope = _ref.scope,
            redirect_uri = _ref.redirect_uri,
            grant_type = _ref.grant_type,
            data = _ref.data,
            state = _ref.state,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            request = _ref.request,
            request_uri = _ref.request_uri,
            response_mode = _ref.response_mode,
            extraQueryParams = _ref.extraQueryParams,
            extraTokenParams = _ref.extraTokenParams,
            request_type = _ref.request_type,
            skipUserInfo = _ref.skipUserInfo;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSigninRequest");

        var client_id = this._settings.client_id;

        // New
        grant_type = grant_type || this._settings.grant_type;

        var isClientCredentials = _SigninRequest.SigninRequest.isClientCredentials(grant_type);

        response_type = isClientCredentials ? undefined : response_type || this._settings.response_type;
        scope = scope || this._settings.scope;
        redirect_uri = !isClientCredentials ? undefined : redirect_uri || this._settings.redirect_uri;

        // id_token_hint, login_hint aren't allowed on _settings
        prompt = isClientCredentials ? undefined : prompt || this._settings.prompt;
        display = display || this._settings.display;
        max_age = max_age || this._settings.max_age;
        ui_locales = ui_locales || this._settings.ui_locales;
        acr_values = acr_values || this._settings.acr_values;
        resource = resource || this._settings.resource;
        response_mode = response_mode || this._settings.response_mode;
        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
        extraTokenParams = extraTokenParams || this._settings.extraTokenParams;

        var authority = this._settings.authority;

        if (_SigninRequest.SigninRequest.isCode(response_type) && response_type !== "code") {
            return Promise.reject(new Error("OpenID Connect hybrid flow is not supported"));
        }

        if (isClientCredentials) {
            return this._metadataService.getTokenEndpoint().then(function (url) {
                _Log.Log.debug("OidcClient.createSigninRequest: Received token endpoint", url);

                var signinRequest = new _SigninRequest.SigninRequest({
                    url: url,
                    client_id: client_id,
                    redirect_uri: redirect_uri,
                    response_type: response_type,
                    scope: scope,
                    data: data || state,
                    authority: authority,
                    grant_type: grant_type,
                    prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
                    resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams, extraTokenParams: extraTokenParams, request_type: request_type, response_mode: response_mode,
                    client_secret: _this._settings.client_secret,
                    skipUserInfo: skipUserInfo
                });

                var signinState = signinRequest.state;
                stateStore = stateStore || _this._stateStore;

                return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
                    return signinRequest;
                });
            });
        }

        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
            _Log.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", url);

            var signinRequest = new _SigninRequest.SigninRequest({
                url: url,
                client_id: client_id,
                redirect_uri: redirect_uri,
                response_type: response_type,
                scope: scope,
                data: data || state,
                authority: authority,
                grant_type: grant_type,
                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
                resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams, extraTokenParams: extraTokenParams, request_type: request_type, response_mode: response_mode,
                client_secret: _this._settings.client_secret,
                skipUserInfo: skipUserInfo
            });

            var signinState = signinRequest.state;
            stateStore = stateStore || _this._stateStore;

            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
                return signinRequest;
            });
        });
    };

    OidcClient.prototype.readSigninResponseState = function readSigninResponseState(url, stateStore) {
        var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _Log.Log.debug("OidcClient.readSigninResponseState");

        var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest.SigninRequest.isCode(this._settings.response_type);
        var delimiter = useQuery ? "?" : "#";

        var response = new _SigninResponse.SigninResponse(url, delimiter);

        if (!response.state) {
            _Log.Log.error("OidcClient.readSigninResponseState: No state in response");
            return Promise.reject(new Error("No state in response"));
        }

        stateStore = stateStore || this._stateStore;

        var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);

        return stateApi(response.state).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.readSigninResponseState: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _SigninState.SigninState.fromStorageString(storedStateString);
            return { state: state, response: response };
        });
    };

    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore, extraHeaders) {
        var _this2 = this;

        _Log.Log.debug("OidcClient.processSigninResponse");

        return this.readSigninResponseState(url, stateStore, true).then(function (_ref2) {
            var state = _ref2.state,
                response = _ref2.response;

            _Log.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response");
            return _this2._validator.validateSigninResponse(state, response, extraHeaders);
        });
    };

    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
        var _this3 = this;

        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id_token_hint = _ref3.id_token_hint,
            data = _ref3.data,
            state = _ref3.state,
            post_logout_redirect_uri = _ref3.post_logout_redirect_uri,
            extraQueryParams = _ref3.extraQueryParams,
            request_type = _ref3.request_type;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSignoutRequest");

        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;

        return this._metadataService.getEndSessionEndpoint().then(function (url) {
            if (!url) {
                _Log.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned");
                throw new Error("no end session endpoint");
            }

            _Log.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", url);

            var request = new _SignoutRequest.SignoutRequest({
                url: url,
                id_token_hint: id_token_hint,
                post_logout_redirect_uri: post_logout_redirect_uri,
                data: data || state,
                extraQueryParams: extraQueryParams,
                request_type: request_type
            });

            var signoutState = request.state;
            if (signoutState) {
                _Log.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist");

                stateStore = stateStore || _this3._stateStore;
                stateStore.set(signoutState.id, signoutState.toStorageString());
            }

            return request;
        });
    };

    OidcClient.prototype.readSignoutResponseState = function readSignoutResponseState(url, stateStore) {
        var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _Log.Log.debug("OidcClient.readSignoutResponseState");

        var response = new _SignoutResponse.SignoutResponse(url);
        if (!response.state) {
            _Log.Log.debug("OidcClient.readSignoutResponseState: No state in response");

            if (response.error) {
                _Log.Log.warn("OidcClient.readSignoutResponseState: Response was error: ", response.error);
                return Promise.reject(new _ErrorResponse.ErrorResponse(response));
            }

            return Promise.resolve({ state: undefined, response: response });
        }

        var stateKey = response.state;

        stateStore = stateStore || this._stateStore;

        var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);
        return stateApi(stateKey).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _State.State.fromStorageString(storedStateString);

            return { state: state, response: response };
        });
    };

    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
        var _this4 = this;

        _Log.Log.debug("OidcClient.processSignoutResponse");

        return this.readSignoutResponseState(url, stateStore, true).then(function (_ref4) {
            var state = _ref4.state,
                response = _ref4.response;

            if (state) {
                _Log.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response");
                return _this4._validator.validateSignoutResponse(state, response);
            } else {
                _Log.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response");
                return response;
            }
        });
    };

    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
        _Log.Log.debug("OidcClient.clearStaleState");

        stateStore = stateStore || this._stateStore;

        return _State.State.clearStaleState(stateStore, this.settings.staleStateAge);
    };

    _createClass(OidcClient, [{
        key: '_stateStore',
        get: function get() {
            return this.settings.stateStore;
        }
    }, {
        key: '_validator',
        get: function get() {
            return this.settings.validator;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this.settings.metadataService;
        }
    }, {
        key: 'settings',
        get: function get() {
            return this._settings;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }
    }]);

    return OidcClient;
}();

/***/ }),

/***/ "./src/OidcClientSettings.js":
/*!***********************************!*\
  !*** ./src/OidcClientSettings.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClientSettings = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _ClockService = __webpack_require__(/*! ./ClockService.js */ "./src/ClockService.js");

var _WebStorageStateStore = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _ResponseValidator = __webpack_require__(/*! ./ResponseValidator.js */ "./src/ResponseValidator.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var DefaultResponseType = "id_token";
var DefaultScope = "openid";
var DefaultClientAuthentication = "client_secret_post"; // The default value must be client_secret_basic, as explained in https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
var DefaultStaleStateAge = 60 * 15; // seconds
var DefaultClockSkewInSeconds = 60 * 5;

// New
var DefaultGrantType = "implicit";

var OidcClientSettings = exports.OidcClientSettings = function () {
    function OidcClientSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            authority = _ref.authority,
            metadataUrl = _ref.metadataUrl,
            metadata = _ref.metadata,
            signingKeys = _ref.signingKeys,
            metadataSeed = _ref.metadataSeed,
            client_id = _ref.client_id,
            client_secret = _ref.client_secret,
            _ref$response_type = _ref.response_type,
            response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type,
            _ref$scope = _ref.scope,
            scope = _ref$scope === undefined ? DefaultScope : _ref$scope,
            redirect_uri = _ref.redirect_uri,
            post_logout_redirect_uri = _ref.post_logout_redirect_uri,
            _ref$client_authentic = _ref.client_authentication,
            client_authentication = _ref$client_authentic === undefined ? DefaultClientAuthentication : _ref$client_authentic,
            _ref$grant_type = _ref.grant_type,
            grant_type = _ref$grant_type === undefined ? DefaultGrantType : _ref$grant_type,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            response_mode = _ref.response_mode,
            _ref$filterProtocolCl = _ref.filterProtocolClaims,
            filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl,
            _ref$loadUserInfo = _ref.loadUserInfo,
            loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo,
            _ref$staleStateAge = _ref.staleStateAge,
            staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge,
            _ref$clockSkew = _ref.clockSkew,
            clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew,
            _ref$clockService = _ref.clockService,
            clockService = _ref$clockService === undefined ? new _ClockService.ClockService() : _ref$clockService,
            _ref$userInfoJwtIssue = _ref.userInfoJwtIssuer,
            userInfoJwtIssuer = _ref$userInfoJwtIssue === undefined ? 'OP' : _ref$userInfoJwtIssue,
            _ref$mergeClaims = _ref.mergeClaims,
            mergeClaims = _ref$mergeClaims === undefined ? false : _ref$mergeClaims,
            _ref$stateStore = _ref.stateStore,
            stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore.WebStorageStateStore() : _ref$stateStore,
            _ref$ResponseValidato = _ref.ResponseValidatorCtor,
            ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator.ResponseValidator : _ref$ResponseValidato,
            _ref$MetadataServiceC = _ref.MetadataServiceCtor,
            MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService.MetadataService : _ref$MetadataServiceC,
            _ref$extraQueryParams = _ref.extraQueryParams,
            extraQueryParams = _ref$extraQueryParams === undefined ? {} : _ref$extraQueryParams,
            _ref$extraTokenParams = _ref.extraTokenParams,
            extraTokenParams = _ref$extraTokenParams === undefined ? {} : _ref$extraTokenParams;

        _classCallCheck(this, OidcClientSettings);

        this._authority = authority;
        this._metadataUrl = metadataUrl;
        this._metadata = metadata;
        this._metadataSeed = metadataSeed;
        this._signingKeys = signingKeys;

        this._client_id = client_id;
        this._client_secret = client_secret;
        this._response_type = response_type;
        this._scope = scope;
        this._redirect_uri = redirect_uri;
        this._post_logout_redirect_uri = post_logout_redirect_uri;
        this._client_authentication = client_authentication;

        // New
        this._grant_type = grant_type;

        // New
        this._grant_type = grant_type;

        this._prompt = prompt;
        this._display = display;
        this._max_age = max_age;
        this._ui_locales = ui_locales;
        this._acr_values = acr_values;
        this._resource = resource;
        this._response_mode = response_mode;

        this._filterProtocolClaims = !!filterProtocolClaims;
        this._loadUserInfo = !!loadUserInfo;
        this._staleStateAge = staleStateAge;
        this._clockSkew = clockSkew;
        this._clockService = clockService;
        this._userInfoJwtIssuer = userInfoJwtIssuer;
        this._mergeClaims = !!mergeClaims;

        this._stateStore = stateStore;
        this._validator = new ResponseValidatorCtor(this);
        this._metadataService = new MetadataServiceCtor(this);

        this._extraQueryParams = (typeof extraQueryParams === 'undefined' ? 'undefined' : _typeof(extraQueryParams)) === 'object' ? extraQueryParams : {};
        this._extraTokenParams = (typeof extraTokenParams === 'undefined' ? 'undefined' : _typeof(extraTokenParams)) === 'object' ? extraTokenParams : {};
    }

    // client config


    // get the time
    OidcClientSettings.prototype.getEpochTime = function getEpochTime() {
        return this._clockService.getEpochTime();
    };

    _createClass(OidcClientSettings, [{
        key: 'client_id',
        get: function get() {
            return this._client_id;
        },
        set: function set(value) {
            if (!this._client_id) {
                // one-time set only
                this._client_id = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned.");
                throw new Error("client_id has already been assigned.");
            }
        }
    }, {
        key: 'client_secret',
        get: function get() {
            return this._client_secret;
        }
    }, {
        key: 'response_type',
        get: function get() {
            return this._response_type;
        }
    }, {
        key: 'scope',
        get: function get() {
            return this._scope;
        }
    }, {
        key: 'redirect_uri',
        get: function get() {
            return this._redirect_uri;
        }
    }, {
        key: 'post_logout_redirect_uri',
        get: function get() {
            return this._post_logout_redirect_uri;
        }
    }, {
        key: 'client_authentication',
        get: function get() {
            return this._client_authentication;
        }

        // New

    }, {
        key: 'grant_type',
        get: function get() {
            return this._grant_type;
        }

        // optional protocol params

    }, {
        key: 'prompt',
        get: function get() {
            return this._prompt;
        }
    }, {
        key: 'display',
        get: function get() {
            return this._display;
        }
    }, {
        key: 'max_age',
        get: function get() {
            return this._max_age;
        }
    }, {
        key: 'ui_locales',
        get: function get() {
            return this._ui_locales;
        }
    }, {
        key: 'acr_values',
        get: function get() {
            return this._acr_values;
        }
    }, {
        key: 'resource',
        get: function get() {
            return this._resource;
        }
    }, {
        key: 'response_mode',
        get: function get() {
            return this._response_mode;
        }

        // metadata

    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        },
        set: function set(value) {
            if (!this._authority) {
                // one-time set only
                this._authority = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_authority: authority has already been assigned.");
                throw new Error("authority has already been assigned.");
            }
        }
    }, {
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                this._metadataUrl = this.authority;

                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                        this._metadataUrl += '/';
                    }
                    this._metadataUrl += OidcMetadataUrlPath;
                }
            }

            return this._metadataUrl;
        }

        // settable/cachable metadata values

    }, {
        key: 'metadata',
        get: function get() {
            return this._metadata;
        },
        set: function set(value) {
            this._metadata = value;
        }
    }, {
        key: 'metadataSeed',
        get: function get() {
            return this._metadataSeed;
        },
        set: function set(value) {
            this._metadataSeed = value;
        }
    }, {
        key: 'signingKeys',
        get: function get() {
            return this._signingKeys;
        },
        set: function set(value) {
            this._signingKeys = value;
        }

        // behavior flags

    }, {
        key: 'filterProtocolClaims',
        get: function get() {
            return this._filterProtocolClaims;
        }
    }, {
        key: 'loadUserInfo',
        get: function get() {
            return this._loadUserInfo;
        }
    }, {
        key: 'staleStateAge',
        get: function get() {
            return this._staleStateAge;
        }
    }, {
        key: 'clockSkew',
        get: function get() {
            return this._clockSkew;
        }
    }, {
        key: 'userInfoJwtIssuer',
        get: function get() {
            return this._userInfoJwtIssuer;
        }
    }, {
        key: 'mergeClaims',
        get: function get() {
            return this._mergeClaims;
        }
    }, {
        key: 'stateStore',
        get: function get() {
            return this._stateStore;
        }
    }, {
        key: 'validator',
        get: function get() {
            return this._validator;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }

        // extra query params

    }, {
        key: 'extraQueryParams',
        get: function get() {
            return this._extraQueryParams;
        },
        set: function set(value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                this._extraQueryParams = value;
            } else {
                this._extraQueryParams = {};
            }
        }

        // extra token params

    }, {
        key: 'extraTokenParams',
        get: function get() {
            return this._extraTokenParams;
        },
        set: function set(value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                this._extraTokenParams = value;
            } else {
                this._extraTokenParams = {};
            }
        }
    }]);

    return OidcClientSettings;
}();

/***/ }),

/***/ "./src/PopupNavigator.js":
/*!*******************************!*\
  !*** ./src/PopupNavigator.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupNavigator = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _PopupWindow = __webpack_require__(/*! ./PopupWindow.js */ "./src/PopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var PopupNavigator = exports.PopupNavigator = function () {
    function PopupNavigator() {
        _classCallCheck(this, PopupNavigator);
    }

    PopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _PopupWindow.PopupWindow(params);
        return Promise.resolve(popup);
    };

    PopupNavigator.prototype.callback = function callback(url, keepOpen, delimiter) {
        _Log.Log.debug("PopupNavigator.callback");

        try {
            _PopupWindow.PopupWindow.notifyOpener(url, keepOpen, delimiter);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return PopupNavigator;
}();

/***/ }),

/***/ "./src/PopupWindow.js":
/*!****************************!*\
  !*** ./src/PopupWindow.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CheckForPopupClosedInterval = 500;
var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;';
//const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';

var DefaultPopupTarget = "_blank";

var PopupWindow = exports.PopupWindow = function () {
    function PopupWindow(params) {
        var _this = this;

        _classCallCheck(this, PopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        var target = params.popupWindowTarget || DefaultPopupTarget;
        var features = params.popupWindowFeatures || DefaultPopupFeatures;

        this._popup = window.open('', target, features);
        if (this._popup) {
            _Log.Log.debug("PopupWindow.ctor: popup successfully created");
            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
        }
    }

    PopupWindow.prototype.navigate = function navigate(params) {
        if (!this._popup) {
            this._error("PopupWindow.navigate: Error opening popup window");
        } else if (!params || !params.url) {
            this._error("PopupWindow.navigate: no url provided");
            this._error("No url provided");
        } else {
            _Log.Log.debug("PopupWindow.navigate: Setting URL in popup");

            this._id = params.id;
            if (this._id) {
                window["popupCallback_" + params.id] = this._callback.bind(this);
            }

            this._popup.focus();
            this._popup.window.location = params.url;
        }

        return this.promise;
    };

    PopupWindow.prototype._success = function _success(data) {
        _Log.Log.debug("PopupWindow.callback: Successful response from popup window");

        this._cleanup();
        this._resolve(data);
    };

    PopupWindow.prototype._error = function _error(message) {
        _Log.Log.error("PopupWindow.error: ", message);

        this._cleanup();
        this._reject(new Error(message));
    };

    PopupWindow.prototype.close = function close() {
        this._cleanup(false);
    };

    PopupWindow.prototype._cleanup = function _cleanup(keepOpen) {
        _Log.Log.debug("PopupWindow.cleanup");

        window.clearInterval(this._checkForPopupClosedTimer);
        this._checkForPopupClosedTimer = null;

        delete window["popupCallback_" + this._id];

        if (this._popup && !keepOpen) {
            this._popup.close();
        }
        this._popup = null;
    };

    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
        if (!this._popup || this._popup.closed) {
            this._error("Popup window closed");
        }
    };

    PopupWindow.prototype._callback = function _callback(url, keepOpen) {
        this._cleanup(keepOpen);

        if (url) {
            _Log.Log.debug("PopupWindow.callback success");
            this._success({ url: url });
        } else {
            _Log.Log.debug("PopupWindow.callback: Invalid response from popup");
            this._error("Invalid response from popup");
        }
    };

    PopupWindow.notifyOpener = function notifyOpener(url, keepOpen, delimiter) {
        if (window.opener) {
            url = url || window.location.href;
            if (url) {
                var data = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);

                if (data.state) {
                    var name = "popupCallback_" + data.state;
                    var callback = window.opener[name];
                    if (callback) {
                        _Log.Log.debug("PopupWindow.notifyOpener: passing url message to opener");
                        callback(url, keepOpen);
                    } else {
                        _Log.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
                    }
                } else {
                    _Log.Log.warn("PopupWindow.notifyOpener: no state found in response url");
                }
            }
        } else {
            _Log.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
        }
    };

    _createClass(PopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return PopupWindow;
}();

/***/ }),

/***/ "./src/RedirectNavigator.js":
/*!**********************************!*\
  !*** ./src/RedirectNavigator.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RedirectNavigator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RedirectNavigator = exports.RedirectNavigator = function () {
    function RedirectNavigator() {
        _classCallCheck(this, RedirectNavigator);
    }

    RedirectNavigator.prototype.prepare = function prepare() {
        return Promise.resolve(this);
    };

    RedirectNavigator.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            _Log.Log.error("RedirectNavigator.navigate: No url provided");
            return Promise.reject(new Error("No url provided"));
        }

        if (params.useReplaceToNavigate) {
            window.location.replace(params.url);
        } else {
            window.location = params.url;
        }

        return Promise.resolve();
    };

    _createClass(RedirectNavigator, [{
        key: "url",
        get: function get() {
            return window.location.href;
        }
    }]);

    return RedirectNavigator;
}();

/***/ }),

/***/ "./src/ResponseValidator.js":
/*!**********************************!*\
  !*** ./src/ResponseValidator.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResponseValidator = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _UserInfoService = __webpack_require__(/*! ./UserInfoService.js */ "./src/UserInfoService.js");

var _TokenClient = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");

var _ErrorResponse = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];

var ResponseValidator = exports.ResponseValidator = function () {
    function ResponseValidator(settings) {
        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService.MetadataService;
        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService.UserInfoService;
        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;
        var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient.TokenClient;

        _classCallCheck(this, ResponseValidator);

        if (!settings) {
            _Log.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator");
            throw new Error("settings");
        }

        this._settings = settings;
        this._metadataService = new MetadataServiceCtor(this._settings);
        this._userInfoService = new UserInfoServiceCtor(this._settings);
        this._joseUtil = joseUtil;
        this._tokenClient = new TokenClientCtor(this._settings);
    }

    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response, extraHeaders) {
        var _this = this;

        _Log.Log.debug("ResponseValidator.validateSigninResponse");

        return this._processSigninParams(state, response).then(function (response) {
            _Log.Log.debug("ResponseValidator.validateSigninResponse: state processed");
            return _this._validateTokens(state, response, extraHeaders).then(function (response) {
                _Log.Log.debug("ResponseValidator.validateSigninResponse: tokens validated");
                return _this._processClaims(state, response).then(function (response) {
                    _Log.Log.debug("ResponseValidator.validateSigninResponse: claims processed");
                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator.validateSignoutResponse: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator.validateSignoutResponse: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator._processSigninParams: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        if (!state.client_id) {
            _Log.Log.error("ResponseValidator._processSigninParams: No client_id on state");
            return Promise.reject(new Error("No client_id on state"));
        }

        if (!state.authority) {
            _Log.Log.error("ResponseValidator._processSigninParams: No authority on state");
            return Promise.reject(new Error("No authority on state"));
        }

        // this allows the authority to be loaded from the signin state
        if (!this._settings.authority) {
            this._settings.authority = state.authority;
        }
        // ensure we're using the correct authority if the authority is not loaded from signin state
        else if (this._settings.authority && this._settings.authority !== state.authority) {
                _Log.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state");
                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
            }
        // this allows the client_id to be loaded from the signin state
        if (!this._settings.client_id) {
            this._settings.client_id = state.client_id;
        }
        // ensure we're using the correct client_id if the client_id is not loaded from signin state
        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
                _Log.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state");
                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
            }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator._processSigninParams: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator._processSigninParams: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        if (this._settings.grant_type !== 'client_credentials' && state.nonce && !response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response");
            return Promise.reject(new Error("No id_token in response"));
        }

        if (!state.nonce && response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response");
            return Promise.reject(new Error("Unexpected id_token in response"));
        }

        if (this._settings.grant_type === 'client_credentials') {
            response.grant_type = this._settings.grant_type;
        } else if (state.code_verifier && !response.code) {
            _Log.Log.error("ResponseValidator._processSigninParams: Expecting code in response");
            return Promise.reject(new Error("No code in response"));
        }

        if (!state.code_verifier && response.code) {
            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting code in response");
            return Promise.reject(new Error("Unexpected code in response"));
        }

        if (!response.scope) {
            // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request
            response.scope = state.scope;
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processClaims = function _processClaims(state, response) {
        var _this2 = this;

        if (response.isOpenIdConnect) {
            _Log.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims");

            response.profile = this._filterProtocolClaims(response.profile);

            if (state.skipUserInfo !== true && this._settings.loadUserInfo && response.access_token) {
                _Log.Log.debug("ResponseValidator._processClaims: loading user info");

                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint");

                    if (claims.sub !== response.profile.sub) {
                        _Log.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token");
                        return Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"));
                    }

                    response.profile = _this2._mergeClaims(response.profile, claims);
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", response.profile);

                    return response;
                });
            } else {
                _Log.Log.debug("ResponseValidator._processClaims: not loading user info");
            }
        } else {
            _Log.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
        var result = Object.assign({}, claims1);

        for (var name in claims2) {
            var values = claims2[name];
            if (!Array.isArray(values)) {
                values = [values];
            }

            for (var i = 0; i < values.length; i++) {
                var value = values[i];
                if (!result[name]) {
                    result[name] = value;
                } else if (Array.isArray(result[name])) {
                    if (result[name].indexOf(value) < 0) {
                        result[name].push(value);
                    }
                } else if (result[name] !== value) {
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && this._settings.mergeClaims) {
                        result[name] = this._mergeClaims(result[name], value);
                    } else {
                        result[name] = [result[name], value];
                    }
                }
            }
        }

        return result;
    };

    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
        _Log.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);

        var result = Object.assign({}, claims);

        if (this._settings._filterProtocolClaims) {
            ProtocolClaims.forEach(function (type) {
                delete result[type];
            });

            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", result);
        } else {
            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered");
        }

        return result;
    };

    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response, extraHeaders) {
        if (response.code) {
            _Log.Log.debug("ResponseValidator._validateTokens: Validating code");
            return this._processCode(state, response);
        }

        if (response.grant_type === 'client_credentials') {
            _Log.Log.debug("ResponseValidator._validateTokens: Validating client credentials");
            return this._processClientCredentials(state, response, extraHeaders);
        }

        if (response.id_token) {
            if (response.access_token) {
                _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token");
                return this._validateIdTokenAndAccessToken(state, response);
            }

            _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token");
            return this._validateIdToken(state, response);
        }

        _Log.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate");
        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processCode = function _processCode(state, response) {
        var _this3 = this;

        var request = {
            client_id: state.client_id,
            client_secret: state.client_secret,
            code: response.code,
            redirect_uri: state.redirect_uri,
            code_verifier: state.code_verifier
        };

        if (state.extraTokenParams && _typeof(state.extraTokenParams) === 'object') {
            Object.assign(request, state.extraTokenParams);
        }

        return this._tokenClient.exchangeCode(request).then(function (tokenResponse) {

            for (var key in tokenResponse) {
                response[key] = tokenResponse[key];
            }

            if (response.id_token) {
                _Log.Log.debug("ResponseValidator._processCode: token response successful, processing id_token");
                return _this3._validateIdTokenAttributes(state, response);
            } else {
                _Log.Log.debug("ResponseValidator._processCode: token response successful, returning response");
            }

            return response;
        });
    };

    ResponseValidator.prototype._processClientCredentials = function _processClientCredentials(state, response, extraHeaders) {
        var _this4 = this;

        var request = {
            client_id: state.client_id,
            client_secret: state.client_secret
        };

        if (state.extraTokenParams && _typeof(state.extraTokenParams) === 'object') {
            Object.assign(request, state.extraTokenParams);
        }

        return this._tokenClient.exchangeClientCredentialsToken(request, extraHeaders).then(function (tokenResponse) {

            for (var key in tokenResponse) {
                response[key] = tokenResponse[key];
            }

            if (response.id_token) {
                _Log.Log.debug("ResponseValidator._processClientCredentials: token response successful, processing id_token");
                return _this4._validateIdTokenAttributes(state, response);
            } else {
                _Log.Log.debug("ResponseValidator._processClientCredentials: token response successful, returning response");
            }

            return response;
        });
    };

    ResponseValidator.prototype._validateIdTokenAttributes = function _validateIdTokenAttributes(state, response) {
        var _this5 = this;

        return this._metadataService.getIssuer().then(function (issuer) {

            var audience = state.client_id;
            var clockSkewInSeconds = _this5._settings.clockSkew;
            _Log.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ", clockSkewInSeconds);

            return _this5._settings.getEpochTime().then(function (now) {
                return _this5._joseUtil.validateJwtAttributes(response.id_token, issuer, audience, clockSkewInSeconds, now).then(function (payload) {

                    if (state.nonce && state.nonce !== payload.nonce) {
                        _Log.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token");
                        return Promise.reject(new Error("Invalid nonce in id_token"));
                    }

                    if (!payload.sub) {
                        _Log.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token");
                        return Promise.reject(new Error("No sub present in id_token"));
                    }

                    response.profile = payload;
                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
        var _this6 = this;

        return this._validateIdToken(state, response).then(function (response) {
            return _this6._validateAccessToken(response);
        });
    };

    ResponseValidator.prototype._getSigningKeyForJwt = function _getSigningKeyForJwt(jwt) {
        var _this7 = this;

        return this._metadataService.getSigningKeys().then(function (keys) {
            var kid = jwt.header.kid;
            if (!keys) {
                _Log.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata");
                return Promise.reject(new Error("No signing keys from metadata"));
            }

            _Log.Log.debug("ResponseValidator._validateIdToken: Received signing keys");
            var key = void 0;
            if (!kid) {
                keys = _this7._filterByAlg(keys, jwt.header.alg);

                if (keys.length > 1) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata");
                    return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                } else {
                    // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                    // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                    key = keys[0];
                }
            } else {
                key = keys.filter(function (key) {
                    return key.kid === kid;
                })[0];
            }
            return Promise.resolve(key);
        });
    };

    ResponseValidator.prototype._getSigningKeyForJwtWithSingleRetry = function _getSigningKeyForJwtWithSingleRetry(jwt) {
        var _this8 = this;

        return this._getSigningKeyForJwt(jwt).then(function (key) {
            // Refreshing signingKeys if no suitable verification key is present for given jwt header.
            if (!key) {
                // set to undefined, to trigger network call to jwks_uri.
                _this8._metadataService.resetSigningKeys();
                return _this8._getSigningKeyForJwt(jwt);
            } else {
                return Promise.resolve(key);
            }
        });
    };

    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
        var _this9 = this;

        if (!state.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: No nonce on state");
            return Promise.reject(new Error("No nonce on state"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header || !jwt.payload) {
            _Log.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        if (state.nonce !== jwt.payload.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token");
            return Promise.reject(new Error("Invalid nonce in id_token"));
        }

        return this._metadataService.getIssuer().then(function (issuer) {
            _Log.Log.debug("ResponseValidator._validateIdToken: Received issuer");
            return _this9._getSigningKeyForJwtWithSingleRetry(jwt).then(function (key) {
                if (!key) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys");
                    return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                }

                var audience = state.client_id;

                var clockSkewInSeconds = _this9._settings.clockSkew;
                _Log.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);

                return _this9._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
                    _Log.Log.debug("ResponseValidator._validateIdToken: JWT validation successful");

                    if (!jwt.payload.sub) {
                        _Log.Log.error("ResponseValidator._validateIdToken: No sub present in id_token");
                        return Promise.reject(new Error("No sub present in id_token"));
                    }

                    response.profile = jwt.payload;

                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype._filterByAlg = function _filterByAlg(keys, alg) {
        var kty = null;
        if (alg.startsWith("RS")) {
            kty = "RSA";
        } else if (alg.startsWith("PS")) {
            kty = "PS";
        } else if (alg.startsWith("ES")) {
            kty = "EC";
        } else {
            _Log.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", alg);
            return [];
        }

        _Log.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", kty);

        keys = keys.filter(function (key) {
            return key.kty === kty;
        });

        _Log.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", kty, keys.length);

        return keys;
    };

    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
        if (!response.profile) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token");
            return Promise.reject(new Error("No profile loaded from id_token"));
        }

        if (!response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token");
            return Promise.reject(new Error("No at_hash in id_token"));
        }

        if (!response.id_token) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No id_token");
            return Promise.reject(new Error("No id_token"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        var hashAlg = jwt.header.alg;
        if (!hashAlg || hashAlg.length !== 5) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var hashBits = hashAlg.substr(2, 3);
        if (!hashBits) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        hashBits = parseInt(hashBits);
        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var sha = "sha" + hashBits;
        var hash = this._joseUtil.hashString(response.access_token, sha);
        if (!hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", sha);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        var left = hash.substr(0, hash.length / 2);
        var left_b64u = this._joseUtil.hexToBase64Url(left);
        if (left_b64u !== response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", left_b64u, response.profile.at_hash);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        _Log.Log.debug("ResponseValidator._validateAccessToken: success");

        return Promise.resolve(response);
    };

    return ResponseValidator;
}();

/***/ }),

/***/ "./src/SessionMonitor.js":
/*!*******************************!*\
  !*** ./src/SessionMonitor.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionMonitor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _CheckSessionIFrame = __webpack_require__(/*! ./CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SessionMonitor = exports.SessionMonitor = function () {
    function SessionMonitor(userManager) {
        var _this = this;

        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame.CheckSessionIFrame;
        var timer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global.timer;

        _classCallCheck(this, SessionMonitor);

        if (!userManager) {
            _Log.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor");
            throw new Error("userManager");
        }

        this._userManager = userManager;
        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
        this._timer = timer;

        this._userManager.events.addUserLoaded(this._start.bind(this));
        this._userManager.events.addUserUnloaded(this._stop.bind(this));

        Promise.resolve(this._userManager.getUser().then(function (user) {
            // doing this manually here since calling getUser 
            // doesn't trigger load event.
            if (user) {
                _this._start(user);
            } else if (_this._settings.monitorAnonymousSession) {
                _this._userManager.querySessionStatus().then(function (session) {
                    var tmpUser = {
                        session_state: session.session_state
                    };
                    if (session.sub && session.sid) {
                        tmpUser.profile = {
                            sub: session.sub,
                            sid: session.sid
                        };
                    }
                    _this._start(tmpUser);
                }).catch(function (err) {
                    // catch to suppress errors since we're in a ctor
                    _Log.Log.error("SessionMonitor ctor: error from querySessionStatus:", err.message);
                });
            }
        }).catch(function (err) {
            // catch to suppress errors since we're in a ctor
            _Log.Log.error("SessionMonitor ctor: error from getUser:", err.message);
        }));
    }

    SessionMonitor.prototype._start = function _start(user) {
        var _this2 = this;

        var session_state = user.session_state;

        if (session_state) {
            if (user.profile) {
                this._sub = user.profile.sub;
                this._sid = user.profile.sid;
                _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", sub:", this._sub);
            } else {
                this._sub = undefined;
                this._sid = undefined;
                _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", anonymous user");
            }

            if (!this._checkSessionIFrame) {
                this._metadataService.getCheckSessionIframe().then(function (url) {
                    if (url) {
                        _Log.Log.debug("SessionMonitor._start: Initializing check session iframe");

                        var client_id = _this2._client_id;
                        var interval = _this2._checkSessionInterval;
                        var stopOnError = _this2._stopCheckSessionOnError;

                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval, stopOnError);
                        _this2._checkSessionIFrame.load().then(function () {
                            _this2._checkSessionIFrame.start(session_state);
                        });
                    } else {
                        _Log.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
                    }
                }).catch(function (err) {
                    // catch to suppress errors since we're in non-promise callback
                    _Log.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", err.message);
                });
            } else {
                this._checkSessionIFrame.start(session_state);
            }
        }
    };

    SessionMonitor.prototype._stop = function _stop() {
        var _this3 = this;

        this._sub = undefined;
        this._sid = undefined;

        if (this._checkSessionIFrame) {
            _Log.Log.debug("SessionMonitor._stop");
            this._checkSessionIFrame.stop();
        }

        if (this._settings.monitorAnonymousSession) {
            // using a timer to delay re-initialization to avoid race conditions during signout
            var timerHandle = this._timer.setInterval(function () {
                _this3._timer.clearInterval(timerHandle);

                _this3._userManager.querySessionStatus().then(function (session) {
                    var tmpUser = {
                        session_state: session.session_state
                    };
                    if (session.sub && session.sid) {
                        tmpUser.profile = {
                            sub: session.sub,
                            sid: session.sid
                        };
                    }
                    _this3._start(tmpUser);
                }).catch(function (err) {
                    // catch to suppress errors since we're in a callback
                    _Log.Log.error("SessionMonitor: error from querySessionStatus:", err.message);
                });
            }, 1000);
        }
    };

    SessionMonitor.prototype._callback = function _callback() {
        var _this4 = this;

        this._userManager.querySessionStatus().then(function (session) {
            var raiseEvent = true;

            if (session) {
                if (session.sub === _this4._sub) {
                    raiseEvent = false;
                    _this4._checkSessionIFrame.start(session.session_state);

                    if (session.sid === _this4._sid) {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
                    } else {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
                        _this4._userManager.events._raiseUserSessionChanged();
                    }
                } else {
                    _Log.Log.debug("SessionMonitor._callback: Different subject signed into OP:", session.sub);
                }
            } else {
                _Log.Log.debug("SessionMonitor._callback: Subject no longer signed into OP");
            }

            if (raiseEvent) {
                if (_this4._sub) {
                    _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event");
                    _this4._userManager.events._raiseUserSignedOut();
                } else {
                    _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event");
                    _this4._userManager.events._raiseUserSignedIn();
                }
            }
        }).catch(function (err) {
            if (_this4._sub) {
                _Log.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", err.message);
                _this4._userManager.events._raiseUserSignedOut();
            }
        });
    };

    _createClass(SessionMonitor, [{
        key: '_settings',
        get: function get() {
            return this._userManager.settings;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this._userManager.metadataService;
        }
    }, {
        key: '_client_id',
        get: function get() {
            return this._settings.client_id;
        }
    }, {
        key: '_checkSessionInterval',
        get: function get() {
            return this._settings.checkSessionInterval;
        }
    }, {
        key: '_stopCheckSessionOnError',
        get: function get() {
            return this._settings.stopCheckSessionOnError;
        }
    }]);

    return SessionMonitor;
}();

/***/ }),

/***/ "./src/SigninRequest.js":
/*!******************************!*\
  !*** ./src/SigninRequest.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninRequest = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

var _SigninState = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninRequest = exports.SigninRequest = function () {
    function SigninRequest(_ref) {
        var url = _ref.url,
            client_id = _ref.client_id,
            redirect_uri = _ref.redirect_uri,
            response_type = _ref.response_type,
            scope = _ref.scope,
            authority = _ref.authority,
            grant_type = _ref.grant_type,
            data = _ref.data,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            response_mode = _ref.response_mode,
            request = _ref.request,
            request_uri = _ref.request_uri,
            extraQueryParams = _ref.extraQueryParams,
            request_type = _ref.request_type,
            client_secret = _ref.client_secret,
            extraTokenParams = _ref.extraTokenParams,
            skipUserInfo = _ref.skipUserInfo;

        _classCallCheck(this, SigninRequest);

        if (!url) {
            _Log.Log.error("SigninRequest.ctor: No url passed");
            throw new Error("url");
        }
        if (!client_id) {
            _Log.Log.error("SigninRequest.ctor: No client_id passed");
            throw new Error("client_id");
        }
        if (!redirect_uri) {
            _Log.Log.error("SigninRequest.ctor: No redirect_uri passed");
            throw new Error("redirect_uri");
        }
        if (!response_type && grant_type !== 'client_credentials') {
            _Log.Log.error("SigninRequest.ctor: No response_type passed");
            throw new Error("response_type");
        }
        if (!scope) {
            _Log.Log.error("SigninRequest.ctor: No scope passed");
            throw new Error("scope");
        }
        if (!authority) {
            _Log.Log.error("SigninRequest.ctor: No authority passed");
            throw new Error("authority");
        }

        var oidc = SigninRequest.isOidc(response_type);
        var code = SigninRequest.isCode(response_type);

        if (!response_mode) {
            response_mode = SigninRequest.isCode(response_type) ? "query" : null;
        }

        this.state = new _SigninState.SigninState({ nonce: oidc,
            data: data, client_id: client_id, authority: authority, redirect_uri: redirect_uri,
            code_verifier: code,
            request_type: request_type, response_mode: response_mode,
            client_secret: client_secret, scope: scope, extraTokenParams: extraTokenParams, skipUserInfo: skipUserInfo });

        url = _UrlUtility.UrlUtility.addQueryParam(url, "client_id", client_id);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "redirect_uri", redirect_uri);

        // Custom
        url = _UrlUtility.UrlUtility.addQueryParam(url, "grant_type", grant_type);

        if (response_type) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "response_type", response_type);
        }

        url = _UrlUtility.UrlUtility.addQueryParam(url, "scope", scope);

        url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        if (oidc) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "nonce", this.state.nonce);
        }
        if (code) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "code_challenge", this.state.code_challenge);
            url = _UrlUtility.UrlUtility.addQueryParam(url, "code_challenge_method", "S256");
        }

        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource, request: request, request_uri: request_uri, response_mode: response_mode };
        for (var key in optional) {
            if (optional[key]) {
                url = _UrlUtility.UrlUtility.addQueryParam(url, key, optional[key]);
            }
        }

        for (var _key in extraQueryParams) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, _key, extraQueryParams[_key]);
        }

        this.url = url;
    }

    SigninRequest.isOidc = function isOidc(response_type) {
        if (!response_type) return false;

        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "id_token";
        });
        return !!result[0];
    };

    SigninRequest.isOAuth = function isOAuth(response_type) {
        if (!response_type) return false;

        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "token";
        });
        return !!result[0];
    };

    SigninRequest.isCode = function isCode(response_type) {
        if (!response_type) return false;

        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "code";
        });
        return !!result[0];
    };

    SigninRequest.isClientCredentials = function isClientCredentials(grant_type) {
        if (!grant_type) return false;

        var result = grant_type.split(/\s+/g).filter(function (item) {
            return item === "client_credentials";
        });
        return !!result[0];
    };

    return SigninRequest;
}();

/***/ }),

/***/ "./src/SigninResponse.js":
/*!*******************************!*\
  !*** ./src/SigninResponse.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcScope = "openid";

var SigninResponse = exports.SigninResponse = function () {
    function SigninResponse(url) {
        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";

        _classCallCheck(this, SigninResponse);

        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);

        this.error = values.error;
        this.error_description = values.error_description;
        this.error_uri = values.error_uri;

        this.code = values.code;
        this.state = values.state;
        this.id_token = values.id_token;
        this.session_state = values.session_state;
        this.access_token = values.access_token;
        this.token_type = values.token_type;
        this.scope = values.scope;
        this.profile = undefined; // will be set from ResponseValidator

        this.expires_in = values.expires_in;
    }

    _createClass(SigninResponse, [{
        key: "expires_in",
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        },
        set: function set(value) {
            var expires_in = parseInt(value);
            if (typeof expires_in === 'number' && expires_in > 0) {
                var now = parseInt(Date.now() / 1000);
                this.expires_at = now + expires_in;
            }
        }
    }, {
        key: "expired",
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: "scopes",
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }, {
        key: "isOpenIdConnect",
        get: function get() {
            return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
        }
    }]);

    return SigninResponse;
}();

/***/ }),

/***/ "./src/SigninState.js":
/*!****************************!*\
  !*** ./src/SigninState.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninState = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _State2 = __webpack_require__(/*! ./State.js */ "./src/State.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

var _random = __webpack_require__(/*! ./random.js */ "./src/random.js");

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninState = exports.SigninState = function (_State) {
    _inherits(SigninState, _State);

    function SigninState() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            nonce = _ref.nonce,
            authority = _ref.authority,
            client_id = _ref.client_id,
            redirect_uri = _ref.redirect_uri,
            code_verifier = _ref.code_verifier,
            response_mode = _ref.response_mode,
            client_secret = _ref.client_secret,
            scope = _ref.scope,
            extraTokenParams = _ref.extraTokenParams,
            skipUserInfo = _ref.skipUserInfo;

        _classCallCheck(this, SigninState);

        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));

        if (nonce === true) {
            _this._nonce = (0, _random2.default)();
        } else if (nonce) {
            _this._nonce = nonce;
        }

        if (code_verifier === true) {
            // random() produces 32 length
            _this._code_verifier = (0, _random2.default)() + (0, _random2.default)() + (0, _random2.default)();
        } else if (code_verifier) {
            _this._code_verifier = code_verifier;
        }

        if (_this.code_verifier) {
            var hash = _JoseUtil.JoseUtil.hashString(_this.code_verifier, "SHA256");
            _this._code_challenge = _JoseUtil.JoseUtil.hexToBase64Url(hash);
        }

        _this._redirect_uri = redirect_uri;
        _this._authority = authority;
        _this._client_id = client_id;
        _this._response_mode = response_mode;
        _this._client_secret = client_secret;
        _this._scope = scope;
        _this._extraTokenParams = extraTokenParams;
        _this._skipUserInfo = skipUserInfo;
        return _this;
    }

    SigninState.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("SigninState.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created,
            request_type: this.request_type,
            nonce: this.nonce,
            code_verifier: this.code_verifier,
            redirect_uri: this.redirect_uri,
            authority: this.authority,
            client_id: this.client_id,
            response_mode: this.response_mode,
            client_secret: this.client_secret,
            scope: this.scope,
            extraTokenParams: this.extraTokenParams,
            skipUserInfo: this.skipUserInfo
        });
    };

    SigninState.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("SigninState.fromStorageString");
        var data = JSON.parse(storageString);
        return new SigninState(data);
    };

    _createClass(SigninState, [{
        key: 'nonce',
        get: function get() {
            return this._nonce;
        }
    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        }
    }, {
        key: 'client_id',
        get: function get() {
            return this._client_id;
        }
    }, {
        key: 'redirect_uri',
        get: function get() {
            return this._redirect_uri;
        }
    }, {
        key: 'code_verifier',
        get: function get() {
            return this._code_verifier;
        }
    }, {
        key: 'code_challenge',
        get: function get() {
            return this._code_challenge;
        }
    }, {
        key: 'response_mode',
        get: function get() {
            return this._response_mode;
        }
    }, {
        key: 'client_secret',
        get: function get() {
            return this._client_secret;
        }
    }, {
        key: 'scope',
        get: function get() {
            return this._scope;
        }
    }, {
        key: 'extraTokenParams',
        get: function get() {
            return this._extraTokenParams;
        }
    }, {
        key: 'skipUserInfo',
        get: function get() {
            return this._skipUserInfo;
        }
    }]);

    return SigninState;
}(_State2.State);

/***/ }),

/***/ "./src/SignoutRequest.js":
/*!*******************************!*\
  !*** ./src/SignoutRequest.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignoutRequest = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

var _State = __webpack_require__(/*! ./State.js */ "./src/State.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutRequest = exports.SignoutRequest = function SignoutRequest(_ref) {
    var url = _ref.url,
        id_token_hint = _ref.id_token_hint,
        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
        data = _ref.data,
        extraQueryParams = _ref.extraQueryParams,
        request_type = _ref.request_type;

    _classCallCheck(this, SignoutRequest);

    if (!url) {
        _Log.Log.error("SignoutRequest.ctor: No url passed");
        throw new Error("url");
    }

    if (id_token_hint) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "id_token_hint", id_token_hint);
    }

    if (post_logout_redirect_uri) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);

        if (data) {
            this.state = new _State.State({ data: data, request_type: request_type });

            url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        }
    }

    for (var key in extraQueryParams) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, key, extraQueryParams[key]);
    }

    this.url = url;
};

/***/ }),

/***/ "./src/SignoutResponse.js":
/*!********************************!*\
  !*** ./src/SignoutResponse.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.SignoutResponse = undefined;

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutResponse = exports.SignoutResponse = function SignoutResponse(url) {
        _classCallCheck(this, SignoutResponse);

        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "?");

        this.error = values.error;
        this.error_description = values.error_description;
        this.error_uri = values.error_uri;

        this.state = values.state;
};

/***/ }),

/***/ "./src/SilentRenewService.js":
/*!***********************************!*\
  !*** ./src/SilentRenewService.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SilentRenewService = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SilentRenewService = exports.SilentRenewService = function () {
    function SilentRenewService(userManager) {
        _classCallCheck(this, SilentRenewService);

        this._userManager = userManager;
    }

    SilentRenewService.prototype.start = function start() {
        if (!this._callback) {
            this._callback = this._tokenExpiring.bind(this);
            this._userManager.events.addAccessTokenExpiring(this._callback);

            // this will trigger loading of the user so the expiring events can be initialized
            this._userManager.getUser().then(function (user) {
                // deliberate nop
            }).catch(function (err) {
                // catch to suppress errors since we're in a ctor
                _Log.Log.error("SilentRenewService.start: Error from getUser:", err.message);
            });
        }
    };

    SilentRenewService.prototype.stop = function stop() {
        if (this._callback) {
            this._userManager.events.removeAccessTokenExpiring(this._callback);
            delete this._callback;
        }
    };

    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
        var _this = this;

        this._userManager.signinSilent().then(function (user) {
            _Log.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
        }, function (err) {
            _Log.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", err.message);
            _this._userManager.events._raiseSilentRenewError(err);
        });
    };

    return SilentRenewService;
}();

/***/ }),

/***/ "./src/State.js":
/*!**********************!*\
  !*** ./src/State.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.State = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _random = __webpack_require__(/*! ./random.js */ "./src/random.js");

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var State = exports.State = function () {
    function State() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref.id,
            data = _ref.data,
            created = _ref.created,
            request_type = _ref.request_type;

        _classCallCheck(this, State);

        this._id = id || (0, _random2.default)();
        this._data = data;

        if (typeof created === 'number' && created > 0) {
            this._created = created;
        } else {
            this._created = parseInt(Date.now() / 1000);
        }
        this._request_type = request_type;
    }

    State.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("State.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created,
            request_type: this.request_type
        });
    };

    State.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("State.fromStorageString");
        return new State(JSON.parse(storageString));
    };

    State.clearStaleState = function clearStaleState(storage, age) {

        var cutoff = Date.now() / 1000 - age;

        return storage.getAllKeys().then(function (keys) {
            _Log.Log.debug("State.clearStaleState: got keys", keys);

            var promises = [];

            var _loop = function _loop(i) {
                var key = keys[i];
                p = storage.get(key).then(function (item) {
                    var remove = false;

                    if (item) {
                        try {
                            var state = State.fromStorageString(item);

                            _Log.Log.debug("State.clearStaleState: got item from key: ", key, state.created);

                            if (state.created <= cutoff) {
                                remove = true;
                            }
                        } catch (e) {
                            _Log.Log.error("State.clearStaleState: Error parsing state for key", key, e.message);
                            remove = true;
                        }
                    } else {
                        _Log.Log.debug("State.clearStaleState: no item in storage for key: ", key);
                        remove = true;
                    }

                    if (remove) {
                        _Log.Log.debug("State.clearStaleState: removed item for key: ", key);
                        return storage.remove(key);
                    }
                });


                promises.push(p);
            };

            for (var i = 0; i < keys.length; i++) {
                var p;

                _loop(i);
            }

            _Log.Log.debug("State.clearStaleState: waiting on promise count:", promises.length);
            return Promise.all(promises);
        });
    };

    _createClass(State, [{
        key: 'id',
        get: function get() {
            return this._id;
        }
    }, {
        key: 'data',
        get: function get() {
            return this._data;
        }
    }, {
        key: 'created',
        get: function get() {
            return this._created;
        }
    }, {
        key: 'request_type',
        get: function get() {
            return this._request_type;
        }
    }]);

    return State;
}();

/***/ }),

/***/ "./src/Timer.js":
/*!**********************!*\
  !*** ./src/Timer.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Timer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

var _Event2 = __webpack_require__(/*! ./Event.js */ "./src/Event.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var TimerDuration = 5; // seconds

var Timer = exports.Timer = function (_Event) {
    _inherits(Timer, _Event);

    function Timer(name) {
        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.timer;
        var nowFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        _classCallCheck(this, Timer);

        var _this = _possibleConstructorReturn(this, _Event.call(this, name));

        _this._timer = timer;

        if (nowFunc) {
            _this._nowFunc = nowFunc;
        } else {
            _this._nowFunc = function () {
                return Date.now() / 1000;
            };
        }
        return _this;
    }

    Timer.prototype.init = function init(duration) {
        if (duration <= 0) {
            duration = 1;
        }
        duration = parseInt(duration);

        var expiration = this.now + duration;
        if (this.expiration === expiration && this._timerHandle) {
            // no need to reinitialize to same expiration, so bail out
            _Log.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
            return;
        }

        this.cancel();

        _Log.Log.debug("Timer.init timer " + this._name + " for duration:", duration);
        this._expiration = expiration;

        // we're using a fairly short timer and then checking the expiration in the
        // callback to handle scenarios where the browser device sleeps, and then
        // the timers end up getting delayed.
        var timerDuration = TimerDuration;
        if (duration < timerDuration) {
            timerDuration = duration;
        }
        this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
    };

    Timer.prototype.cancel = function cancel() {
        if (this._timerHandle) {
            _Log.Log.debug("Timer.cancel: ", this._name);
            this._timer.clearInterval(this._timerHandle);
            this._timerHandle = null;
        }
    };

    Timer.prototype._callback = function _callback() {
        var diff = this._expiration - this.now;
        _Log.Log.debug("Timer.callback; " + this._name + " timer expires in:", diff);

        if (this._expiration <= this.now) {
            this.cancel();
            _Event.prototype.raise.call(this);
        }
    };

    _createClass(Timer, [{
        key: 'now',
        get: function get() {
            return parseInt(this._nowFunc());
        }
    }, {
        key: 'expiration',
        get: function get() {
            return this._expiration;
        }
    }]);

    return Timer;
}(_Event2.Event);

/***/ }),

/***/ "./src/TokenClient.js":
/*!****************************!*\
  !*** ./src/TokenClient.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenClient = undefined;

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var TokenClient = exports.TokenClient = function () {
    function TokenClient(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, TokenClient);

        if (!settings) {
            _Log.Log.error("TokenClient.ctor: No settings passed");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor();
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    TokenClient.prototype.exchangeCode = function exchangeCode() {
        var _this = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.grant_type = args.grant_type || "authorization_code";
        args.client_id = args.client_id || this._settings.client_id;
        args.client_secret = args.client_secret || this._settings.client_secret;
        args.redirect_uri = args.redirect_uri || this._settings.redirect_uri;

        var basicAuth = undefined;
        var client_authentication = args._client_authentication || this._settings._client_authentication;
        delete args._client_authentication;

        if (!args.code) {
            _Log.Log.error("TokenClient.exchangeCode: No code passed");
            return Promise.reject(new Error("A code is required"));
        }
        if (!args.redirect_uri) {
            _Log.Log.error("TokenClient.exchangeCode: No redirect_uri passed");
            return Promise.reject(new Error("A redirect_uri is required"));
        }
        if (!args.code_verifier) {
            _Log.Log.error("TokenClient.exchangeCode: No code_verifier passed");
            return Promise.reject(new Error("A code_verifier is required"));
        }
        if (!args.client_id) {
            _Log.Log.error("TokenClient.exchangeCode: No client_id passed");
            return Promise.reject(new Error("A client_id is required"));
        }
        if (!args.client_secret && client_authentication == "client_secret_basic") {
            _Log.Log.error("TokenClient.exchangeCode: No client_secret passed");
            return Promise.reject(new Error("A client_secret is required"));
        }

        // Sending the client credentials using the Basic Auth method
        if (client_authentication == "client_secret_basic") {
            basicAuth = args.client_id + ':' + args.client_secret;
            delete args.client_id;
            delete args.client_secret;
        }

        return this._metadataService.getTokenEndpoint(false).then(function (url) {
            _Log.Log.debug("TokenClient.exchangeCode: Received token endpoint");
            return _this._jsonService.postForm(url, args, basicAuth).then(function (response) {
                _Log.Log.debug("TokenClient.exchangeCode: response received");
                return response;
            });
        });
    };

    TokenClient.prototype.exchangeRefreshToken = function exchangeRefreshToken() {
        var _this2 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.grant_type = args.grant_type || "refresh_token";
        args.client_id = args.client_id || this._settings.client_id;
        args.client_secret = args.client_secret || this._settings.client_secret;

        var basicAuth = undefined;
        var client_authentication = args._client_authentication || this._settings._client_authentication;
        delete args._client_authentication;

        if (!args.refresh_token) {
            _Log.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed");
            return Promise.reject(new Error("A refresh_token is required"));
        }
        if (!args.client_id) {
            _Log.Log.error("TokenClient.exchangeRefreshToken: No client_id passed");
            return Promise.reject(new Error("A client_id is required"));
        }

        // Sending the client credentials using the Basic Auth method
        if (client_authentication == "client_secret_basic") {
            basicAuth = args.client_id + ':' + args.client_secret;
            delete args.client_id;
            delete args.client_secret;
        }

        return this._metadataService.getTokenEndpoint(false).then(function (url) {
            _Log.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint");

            return _this2._jsonService.postForm(url, args, basicAuth).then(function (response) {
                _Log.Log.debug("TokenClient.exchangeRefreshToken: response received");
                return response;
            });
        });
    };

    TokenClient.prototype.exchangeClientCredentialsToken = function exchangeClientCredentialsToken() {
        var _this3 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var extraHeaders = arguments[1];

        args = Object.assign({}, args);

        args.grant_type = args.grant_type || "client_credentials";
        args.client_id = args.client_id || this._settings.client_id;
        args.client_secret = args.client_secret || this._settings.client_secret;
        args.scope = args.scope || this._settings.scope;

        if (!args.client_id) {
            _Log.Log.error("TokenClient.exchangeClientCredentialsToken: No client_id passed");
            return Promise.reject(new Error("A client_id is required"));
        }

        var basicAuth = args.client_id + ":" + args.client_secret;

        return this._metadataService.getTokenEndpoint(false).then(function (url) {
            _Log.Log.debug("TokenClient.exchangeCredentialsToken: Received token endpoint");

            return _this3._jsonService.postForm(url, args, basicAuth, extraHeaders).then(function (response) {
                _Log.Log.debug("TokenClient.exchangeCredentialsToken: response received");
                return response;
            });
        });
    };

    return TokenClient;
}();

/***/ }),

/***/ "./src/TokenRevocationClient.js":
/*!**************************************!*\
  !*** ./src/TokenRevocationClient.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRevocationClient = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var AccessTokenTypeHint = "access_token";
var RefreshTokenTypeHint = "refresh_token";

var TokenRevocationClient = exports.TokenRevocationClient = function () {
    function TokenRevocationClient(settings) {
        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, TokenRevocationClient);

        if (!settings) {
            _Log.Log.error("TokenRevocationClient.ctor: No settings provided");
            throw new Error("No settings provided.");
        }

        this._settings = settings;
        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    TokenRevocationClient.prototype.revoke = function revoke(token, required) {
        var _this = this;

        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "access_token";

        if (!token) {
            _Log.Log.error("TokenRevocationClient.revoke: No token provided");
            throw new Error("No token provided.");
        }

        if (type !== AccessTokenTypeHint && type != RefreshTokenTypeHint) {
            _Log.Log.error("TokenRevocationClient.revoke: Invalid token type");
            throw new Error("Invalid token type.");
        }

        return this._metadataService.getRevocationEndpoint().then(function (url) {
            if (!url) {
                if (required) {
                    _Log.Log.error("TokenRevocationClient.revoke: Revocation not supported");
                    throw new Error("Revocation not supported");
                }

                // not required, so don't error and just return
                return;
            }

            _Log.Log.debug("TokenRevocationClient.revoke: Revoking " + type);
            var client_id = _this._settings.client_id;
            var client_secret = _this._settings.client_secret;
            return _this._revoke(url, client_id, client_secret, token, type);
        });
    };

    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, client_secret, token, type) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {

            var xhr = new _this2._XMLHttpRequestCtor();
            xhr.open("POST", url);

            xhr.onload = function () {
                _Log.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", xhr.status);

                if (xhr.status === 200) {
                    resolve();
                } else {
                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
                }
            };
            xhr.onerror = function () {
                _Log.Log.debug("TokenRevocationClient.revoke: Network Error.");
                reject("Network Error");
            };

            var body = "client_id=" + encodeURIComponent(client_id);
            if (client_secret) {
                body += "&client_secret=" + encodeURIComponent(client_secret);
            }
            body += "&token_type_hint=" + encodeURIComponent(type);
            body += "&token=" + encodeURIComponent(token);

            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(body);
        });
    };

    return TokenRevocationClient;
}();

/***/ }),

/***/ "./src/UrlUtility.js":
/*!***************************!*\
  !*** ./src/UrlUtility.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UrlUtility = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UrlUtility = exports.UrlUtility = function () {
    function UrlUtility() {
        _classCallCheck(this, UrlUtility);
    }

    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
        if (url.indexOf('?') < 0) {
            url += "?";
        }

        if (url[url.length - 1] !== "?") {
            url += "&";
        }

        url += encodeURIComponent(name);
        url += "=";
        url += encodeURIComponent(value);

        return url;
    };

    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global;

        if (typeof value !== 'string') {
            value = global.location.href;
        }

        var idx = value.lastIndexOf(delimiter);
        if (idx >= 0) {
            value = value.substr(idx + 1);
        }

        if (delimiter === "?") {
            // if we're doing query, then strip off hash fragment before we parse
            idx = value.indexOf('#');
            if (idx >= 0) {
                value = value.substr(0, idx);
            }
        }

        var params = {},
            regex = /([^&=]+)=([^&]*)/g,
            m;

        var counter = 0;
        while (m = regex.exec(value)) {
            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2].replace(/\+/g, ' '));
            if (counter++ > 50) {
                _Log.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", value);
                return {
                    error: "Response exceeded expected number of parameters"
                };
            }
        }

        for (var prop in params) {
            return params;
        }

        return {};
    };

    return UrlUtility;
}();

/***/ }),

/***/ "./src/User.js":
/*!*********************!*\
  !*** ./src/User.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.User = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var User = exports.User = function () {
    function User(_ref) {
        var id_token = _ref.id_token,
            session_state = _ref.session_state,
            access_token = _ref.access_token,
            refresh_token = _ref.refresh_token,
            token_type = _ref.token_type,
            scope = _ref.scope,
            profile = _ref.profile,
            expires_at = _ref.expires_at,
            state = _ref.state;

        _classCallCheck(this, User);

        this.id_token = id_token;
        this.session_state = session_state;
        this.access_token = access_token;
        this.refresh_token = refresh_token;
        this.token_type = token_type;
        this.scope = scope;
        this.profile = profile;
        this.expires_at = expires_at;
        this.state = state;
    }

    User.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("User.toStorageString");
        return JSON.stringify({
            id_token: this.id_token,
            session_state: this.session_state,
            access_token: this.access_token,
            refresh_token: this.refresh_token,
            token_type: this.token_type,
            scope: this.scope,
            profile: this.profile,
            expires_at: this.expires_at
        });
    };

    User.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("User.fromStorageString");
        return new User(JSON.parse(storageString));
    };

    _createClass(User, [{
        key: 'expires_in',
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        },
        set: function set(value) {
            var expires_in = parseInt(value);
            if (typeof expires_in === 'number' && expires_in > 0) {
                var now = parseInt(Date.now() / 1000);
                this.expires_at = now + expires_in;
            }
        }
    }, {
        key: 'expired',
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: 'scopes',
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }]);

    return User;
}();

/***/ }),

/***/ "./src/UserInfoService.js":
/*!********************************!*\
  !*** ./src/UserInfoService.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserInfoService = undefined;

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserInfoService = exports.UserInfoService = function () {
    function UserInfoService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;
        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;

        _classCallCheck(this, UserInfoService);

        if (!settings) {
            _Log.Log.error("UserInfoService.ctor: No settings passed");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor(undefined, undefined, this._getClaimsFromJwt.bind(this));
        this._metadataService = new MetadataServiceCtor(this._settings);
        this._joseUtil = joseUtil;
    }

    UserInfoService.prototype.getClaims = function getClaims(token) {
        var _this = this;

        if (!token) {
            _Log.Log.error("UserInfoService.getClaims: No token passed");
            return Promise.reject(new Error("A token is required"));
        }

        return this._metadataService.getUserInfoEndpoint().then(function (url) {
            _Log.Log.debug("UserInfoService.getClaims: received userinfo url", url);

            return _this._jsonService.getJson(url, token).then(function (claims) {
                _Log.Log.debug("UserInfoService.getClaims: claims received", claims);
                return claims;
            });
        });
    };

    UserInfoService.prototype._getClaimsFromJwt = function _getClaimsFromJwt(req) {
        var _this2 = this;

        try {
            var jwt = this._joseUtil.parseJwt(req.responseText);
            if (!jwt || !jwt.header || !jwt.payload) {
                _Log.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT", jwt);
                return Promise.reject(new Error("Failed to parse id_token"));
            }

            var kid = jwt.header.kid;

            var issuerPromise = void 0;
            switch (this._settings.userInfoJwtIssuer) {
                case 'OP':
                    issuerPromise = this._metadataService.getIssuer();
                    break;
                case 'ANY':
                    issuerPromise = Promise.resolve(jwt.payload.iss);
                    break;
                default:
                    issuerPromise = Promise.resolve(this._settings.userInfoJwtIssuer);
                    break;
            }

            return issuerPromise.then(function (issuer) {
                _Log.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:" + issuer);

                return _this2._metadataService.getSigningKeys().then(function (keys) {
                    if (!keys) {
                        _Log.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata");
                        return Promise.reject(new Error("No signing keys from metadata"));
                    }

                    _Log.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");
                    var key = void 0;
                    if (!kid) {
                        keys = _this2._filterByAlg(keys, jwt.header.alg);

                        if (keys.length > 1) {
                            _Log.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata");
                            return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                        } else {
                            // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                            // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                            key = keys[0];
                        }
                    } else {
                        key = keys.filter(function (key) {
                            return key.kid === kid;
                        })[0];
                    }

                    if (!key) {
                        _Log.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys");
                        return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                    }

                    var audience = _this2._settings.client_id;

                    var clockSkewInSeconds = _this2._settings.clockSkew;
                    _Log.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);

                    return _this2._joseUtil.validateJwt(req.responseText, key, issuer, audience, clockSkewInSeconds, undefined, true).then(function () {
                        _Log.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful");
                        return jwt.payload;
                    });
                });
            });
            return;
        } catch (e) {
            _Log.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response", e.message);
            reject(e);
            return;
        }
    };

    UserInfoService.prototype._filterByAlg = function _filterByAlg(keys, alg) {
        var kty = null;
        if (alg.startsWith("RS")) {
            kty = "RSA";
        } else if (alg.startsWith("PS")) {
            kty = "PS";
        } else if (alg.startsWith("ES")) {
            kty = "EC";
        } else {
            _Log.Log.debug("UserInfoService._filterByAlg: alg not supported: ", alg);
            return [];
        }

        _Log.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ", kty);

        keys = keys.filter(function (key) {
            return key.kty === kty;
        });

        _Log.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ", kty, keys.length);

        return keys;
    };

    return UserInfoService;
}();

/***/ }),

/***/ "./src/UserManager.js":
/*!****************************!*\
  !*** ./src/UserManager.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClient2 = __webpack_require__(/*! ./OidcClient.js */ "./src/OidcClient.js");

var _UserManagerSettings = __webpack_require__(/*! ./UserManagerSettings.js */ "./src/UserManagerSettings.js");

var _User = __webpack_require__(/*! ./User.js */ "./src/User.js");

var _UserManagerEvents = __webpack_require__(/*! ./UserManagerEvents.js */ "./src/UserManagerEvents.js");

var _SilentRenewService = __webpack_require__(/*! ./SilentRenewService.js */ "./src/SilentRenewService.js");

var _SessionMonitor = __webpack_require__(/*! ./SessionMonitor.js */ "./src/SessionMonitor.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest */ "./src/SigninRequest.js");

var _TokenRevocationClient = __webpack_require__(/*! ./TokenRevocationClient.js */ "./src/TokenRevocationClient.js");

var _TokenClient = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManager = exports.UserManager = function (_OidcClient) {
    _inherits(UserManager, _OidcClient);

    function UserManager() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService.SilentRenewService;
        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor.SessionMonitor;
        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient.TokenRevocationClient;
        var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient.TokenClient;
        var joseUtil = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _JoseUtil.JoseUtil;

        _classCallCheck(this, UserManager);

        if (!(settings instanceof _UserManagerSettings.UserManagerSettings)) {
            settings = new _UserManagerSettings.UserManagerSettings(settings);
        }

        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));

        _this._events = new _UserManagerEvents.UserManagerEvents(settings);
        _this._silentRenewService = new SilentRenewServiceCtor(_this);

        // order is important for the following properties; these services depend upon the events.
        if (_this.settings.automaticSilentRenew) {
            _Log.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew");
            _this.startSilentRenew();
        }

        if (_this.settings.monitorSession) {
            _Log.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor");
            _this._sessionMonitor = new SessionMonitorCtor(_this);
        }

        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
        _this._tokenClient = new TokenClientCtor(_this._settings);
        _this._joseUtil = joseUtil;
        return _this;
    }

    UserManager.prototype.getUser = function getUser() {
        var _this2 = this;

        return this._loadUser().then(function (user) {
            if (user) {
                _Log.Log.info("UserManager.getUser: user loaded");

                _this2._events.load(user, false);

                return user;
            } else {
                _Log.Log.info("UserManager.getUser: user not found in storage");
                return null;
            }
        });
    };

    UserManager.prototype.removeUser = function removeUser() {
        var _this3 = this;

        return this.storeUser(null).then(function () {
            _Log.Log.info("UserManager.removeUser: user removed from storage");
            _this3._events.unload();
        });
    };

    UserManager.prototype.signinRedirect = function signinRedirect() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "si:r";
        var navParams = {
            useReplaceToNavigate: args.useReplaceToNavigate
        };
        return this._signinStart(args, this._redirectNavigator, navParams).then(function () {
            _Log.Log.info("UserManager.signinRedirect: successful");
        });
    };

    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
        return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
            if (user.profile && user.profile.sub) {
                _Log.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", user.profile.sub);
            } else {
                _Log.Log.info("UserManager.signinRedirectCallback: no sub");
            }

            return user;
        });
    };

    UserManager.prototype.signinPopup = function signinPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "si:p";
        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured");
            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.display = "popup";

        return this._signin(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopup: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
        return this._signinCallback(url, this._popupNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopupCallback: no sub");
                }
            }

            return user;
        }).catch(function (err) {
            _Log.Log.error( true && err.message);
        });
    };

    UserManager.prototype.signinSilent = function signinSilent() {
        var _this4 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var extraHeaders = arguments[1];

        args = Object.assign({}, args);

        // first determine if we have a refresh token, or need to use iframe
        return this._loadUser().then(function (user) {
            if (user && user.refresh_token) {
                args.refresh_token = user.refresh_token;
                return _this4._useRefreshToken(args);
            } else {
                args.request_type = "si:s";
                args.id_token_hint = args.id_token_hint || _this4.settings.includeIdTokenInSilentRenew && user && user.id_token;
                if (user && args.grant_type !== 'client_credentials' && _this4._settings.validateSubOnSilentRenew) {
                    _Log.Log.debug("UserManager.signinSilent, subject prior to silent renew: ", user.profile.sub);
                    args.current_sub = user.profile.sub;
                }
                return _this4._signinSilentIframe(args, extraHeaders);
            }
        });
    };

    // Returns User


    UserManager.prototype.signinClientCredentials = function signinClientCredentials() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var extraHeaders = arguments[1];

        args['grant_type'] = 'client_credentials';

        return this.signinSilent(args, extraHeaders);
    };

    // Returns query result


    UserManager.prototype.apiGet = function apiGet(apiPath) {
        var _this5 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return this.getUser().then(function (user) {
            if (user && user.access_token) {
                return _this5._callApi(user.access_token, apiPath, args);
            } else if (user) {
                // Renew token
                return signinClientCredentials(args).then(function (user) {
                    return _this5._callApi(user.access_token, apiPath, args);
                });
            } else {
                throw new Error('user is not logged in');
            }
        });
    };

    UserManager.prototype._callApi = function _callApi(token, apiPath) {
        var _this6 = this;

        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var jsonService = new Oidc.JsonService();

        return jsonService.getJson(settings.authority + "/" + apiPath, token).then(function (result) {
            _Log.Log.debug("api call result", result);
            return result;
        }).catch(function (result) {
            if (result.status === 401) {
                // Renew token
                return _this6.signinClientCredentials(args).then(function (user) {
                    return _this6._callApi(user.access_token);
                });
            }
            _Log.Log.error(result);
            throw result;
        });
    };

    UserManager.prototype._useRefreshToken = function _useRefreshToken() {
        var _this7 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return this._tokenClient.exchangeRefreshToken(args).then(function (result) {
            if (!result) {
                _Log.Log.error("UserManager._useRefreshToken: No response returned from token endpoint");
                return Promise.reject("No response returned from token endpoint");
            }
            if (!result.access_token) {
                _Log.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint");
                return Promise.reject("No access token returned from token endpoint");
            }

            return _this7._loadUser().then(function (user) {
                if (user) {
                    var idTokenValidation = Promise.resolve();
                    if (result.id_token) {
                        idTokenValidation = _this7._validateIdTokenFromTokenRefreshToken(user.profile, result.id_token);
                    }

                    return idTokenValidation.then(function () {
                        _Log.Log.debug("UserManager._useRefreshToken: refresh token response success");
                        user.id_token = result.id_token || user.id_token;
                        user.access_token = result.access_token;
                        user.refresh_token = result.refresh_token || user.refresh_token;
                        user.expires_in = result.expires_in;

                        return _this7.storeUser(user).then(function () {
                            _this7._events.load(user);
                            return user;
                        });
                    });
                } else {
                    return null;
                }
            });
        });
    };

    UserManager.prototype._validateIdTokenFromTokenRefreshToken = function _validateIdTokenFromTokenRefreshToken(profile, id_token) {
        var _this8 = this;

        return this._metadataService.getIssuer().then(function (issuer) {
            return _this8.settings.getEpochTime().then(function (now) {
                return _this8._joseUtil.validateJwtAttributes(id_token, issuer, _this8._settings.client_id, _this8._settings.clockSkew, now).then(function (payload) {
                    if (!payload) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token");
                        return Promise.reject(new Error("Failed to validate id_token"));
                    }
                    if (payload.sub !== profile.sub) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub");
                        return Promise.reject(new Error("sub in id_token does not match current sub"));
                    }
                    if (payload.auth_time && payload.auth_time !== profile.auth_time) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time");
                        return Promise.reject(new Error("auth_time in id_token does not match original auth_time"));
                    }
                    if (payload.azp && payload.azp !== profile.azp) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp");
                        return Promise.reject(new Error("azp in id_token does not match original azp"));
                    }
                    if (!payload.azp && profile.azp) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token");
                        return Promise.reject(new Error("azp not in id_token, but present in original id_token"));
                    }
                });
            });
        });
    };

    UserManager.prototype._signinSilentIframe = function _signinSilentIframe() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var extraHeaders = arguments[1];

        var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinSilent: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = args.prompt || "none";

        return this._signin(args, this._iframeNavigator, {
            startUrl: url,
            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
        }, extraHeaders).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilent: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilent: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
        return this._signinCallback(url, this._iframeNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilentCallback: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinCallback = function signinCallback(url) {
        var _this9 = this;

        return this.readSigninResponseState(url).then(function (_ref) {
            var state = _ref.state,
                response = _ref.response;

            if (state.request_type === "si:r") {
                return _this9.signinRedirectCallback(url);
            }
            if (state.request_type === "si:p") {
                return _this9.signinPopupCallback(url);
            }
            if (state.request_type === "si:s") {
                return _this9.signinSilentCallback(url);
            }
            return Promise.reject(new Error("invalid response_type in state"));
        });
    };

    UserManager.prototype.signoutCallback = function signoutCallback(url, keepOpen) {
        var _this10 = this;

        return this.readSignoutResponseState(url).then(function (_ref2) {
            var state = _ref2.state,
                response = _ref2.response;

            if (state) {
                if (state.request_type === "so:r") {
                    return _this10.signoutRedirectCallback(url);
                }
                if (state.request_type === "so:p") {
                    return _this10.signoutPopupCallback(url, keepOpen);
                }
                return Promise.reject(new Error("invalid response_type in state"));
            }
            return response;
        });
    };

    UserManager.prototype.querySessionStatus = function querySessionStatus() {
        var _this11 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var extraHeaders = arguments[1];

        args = Object.assign({}, args);

        args.request_type = "si:s"; // this acts like a signin silent
        var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = "none";
        args.response_type = args.response_type || this.settings.query_status_response_type;
        args.scope = args.scope || "openid";
        args.skipUserInfo = true;

        return this._signinStart(args, this._iframeNavigator, {
            startUrl: url,
            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
        }).then(function (navResponse) {
            return _this11.processSigninResponse(navResponse.url, extraHeaders).then(function (signinResponse) {
                _Log.Log.debug("UserManager.querySessionStatus: got signin response");

                if (signinResponse.session_state && signinResponse.profile.sub) {
                    _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", signinResponse.profile.sub);
                    return {
                        session_state: signinResponse.session_state,
                        sub: signinResponse.profile.sub,
                        sid: signinResponse.profile.sid
                    };
                } else {
                    _Log.Log.info("querySessionStatus successful, user not authenticated");
                }
            }).catch(function (err) {
                if (err.session_state && _this11.settings.monitorAnonymousSession) {
                    if (err.message == "login_required" || err.message == "consent_required" || err.message == "interaction_required" || err.message == "account_selection_required") {
                        _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user");
                        return {
                            session_state: err.session_state
                        };
                    }
                }

                throw err;
            });
        });
    };

    UserManager.prototype._signin = function _signin(args, navigator) {
        var _this12 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var extraHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this12._signinEnd(navResponse.url, args, extraHeaders);
        });
    };

    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
        var _this13 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signinStart: got navigator window handle");

            return _this13.createSigninRequest(args).then(function (signinRequest) {
                _Log.Log.debug("UserManager._signinStart: got signin request");

                navigatorParams.url = signinRequest.url;
                navigatorParams.id = signinRequest.state.id;

                if (args['grant_type'] === 'client_credentials') return navigatorParams;

                return handle.navigate(navigatorParams);
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signinEnd = function _signinEnd(url) {
        var _this14 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var extraHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        return this.processSigninResponse(url, null, extraHeaders).then(function (signinResponse) {
            _Log.Log.debug("UserManager._signinEnd: got signin response");

            var user = new _User.User(signinResponse);

            if (args.current_sub) {
                if (args.current_sub !== user.profile.sub) {
                    _Log.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ", user.profile.sub);
                    return Promise.reject(new Error("login_required"));
                } else {
                    _Log.Log.debug("UserManager._signinEnd: current user matches user returned from signin");
                }
            }

            return _this14.storeUser(user).then(function () {
                _Log.Log.debug("UserManager._signinEnd: user stored");

                _this14._events.load(user);

                return user;
            });
        });
    };

    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
        _Log.Log.debug("UserManager._signinCallback");
        var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest.SigninRequest.isCode(this._settings.response_type);
        var delimiter = useQuery ? "?" : "#";
        return navigator.callback(url, undefined, delimiter);
    };

    UserManager.prototype.signoutRedirect = function signoutRedirect() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "so:r";
        var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        if (postLogoutRedirectUri) {
            args.post_logout_redirect_uri = postLogoutRedirectUri;
        }
        var navParams = {
            useReplaceToNavigate: args.useReplaceToNavigate
        };
        return this._signoutStart(args, this._redirectNavigator, navParams).then(function () {
            _Log.Log.info("UserManager.signoutRedirect: successful");
        });
    };

    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
        return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
            _Log.Log.info("UserManager.signoutRedirectCallback: successful");
            return response;
        });
    };

    UserManager.prototype.signoutPopup = function signoutPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "so:p";
        var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        args.post_logout_redirect_uri = url;
        args.display = "popup";
        if (args.post_logout_redirect_uri) {
            // we're putting a dummy entry in here because we
            // need a unique id from the state for notification
            // to the parent window, which is necessary if we
            // plan to return back to the client after signout
            // and so we can close the popup after signout
            args.state = args.state || {};
        }

        return this._signout(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function () {
            _Log.Log.info("UserManager.signoutPopup: successful");
        });
    };

    UserManager.prototype.signoutPopupCallback = function signoutPopupCallback(url, keepOpen) {
        if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
            keepOpen = url;
            url = null;
        }

        var delimiter = '?';
        return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
            _Log.Log.info("UserManager.signoutPopupCallback: successful");
        });
    };

    UserManager.prototype._signout = function _signout(args, navigator) {
        var _this15 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this15._signoutEnd(navResponse.url);
        });
    };

    UserManager.prototype._signoutStart = function _signoutStart() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _this16 = this;

        var navigator = arguments[1];
        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signoutStart: got navigator window handle");

            return _this16._loadUser().then(function (user) {
                _Log.Log.debug("UserManager._signoutStart: loaded current user from storage");

                var revokePromise = _this16._settings.revokeAccessTokenOnSignout ? _this16._revokeInternal(user) : Promise.resolve();
                return revokePromise.then(function () {

                    var id_token = args.id_token_hint || user && user.id_token;
                    if (id_token) {
                        _Log.Log.debug("UserManager._signoutStart: Setting id_token into signout request");
                        args.id_token_hint = id_token;
                    }

                    return _this16.removeUser().then(function () {
                        _Log.Log.debug("UserManager._signoutStart: user removed, creating signout request");

                        return _this16.createSignoutRequest(args).then(function (signoutRequest) {
                            _Log.Log.debug("UserManager._signoutStart: got signout request");

                            navigatorParams.url = signoutRequest.url;
                            if (signoutRequest.state) {
                                navigatorParams.id = signoutRequest.state.id;
                            }
                            return handle.navigate(navigatorParams);
                        });
                    });
                });
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
        return this.processSignoutResponse(url).then(function (signoutResponse) {
            _Log.Log.debug("UserManager._signoutEnd: got signout response");

            return signoutResponse;
        });
    };

    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
        var _this17 = this;

        return this._loadUser().then(function (user) {
            return _this17._revokeInternal(user, true).then(function (success) {
                if (success) {
                    _Log.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing");

                    user.access_token = null;
                    user.refresh_token = null;
                    user.expires_at = null;
                    user.token_type = null;

                    return _this17.storeUser(user).then(function () {
                        _Log.Log.debug("UserManager.revokeAccessToken: user stored");
                        _this17._events.load(user);
                    });
                }
            });
        }).then(function () {
            _Log.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
        });
    };

    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
        var _this18 = this;

        if (user) {
            var access_token = user.access_token;
            var refresh_token = user.refresh_token;

            return this._revokeAccessTokenInternal(access_token, required).then(function (atSuccess) {
                return _this18._revokeRefreshTokenInternal(refresh_token, required).then(function (rtSuccess) {
                    if (!atSuccess && !rtSuccess) {
                        _Log.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format");
                    }

                    return atSuccess || rtSuccess;
                });
            });
        }

        return Promise.resolve(false);
    };

    UserManager.prototype._revokeAccessTokenInternal = function _revokeAccessTokenInternal(access_token, required) {
        // check for JWT vs. reference token
        if (!access_token || access_token.indexOf('.') >= 0) {
            return Promise.resolve(false);
        }

        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
            return true;
        });
    };

    UserManager.prototype._revokeRefreshTokenInternal = function _revokeRefreshTokenInternal(refresh_token, required) {
        if (!refresh_token) {
            return Promise.resolve(false);
        }

        return this._tokenRevocationClient.revoke(refresh_token, required, "refresh_token").then(function () {
            return true;
        });
    };

    UserManager.prototype.startSilentRenew = function startSilentRenew() {
        this._silentRenewService.start();
    };

    UserManager.prototype.stopSilentRenew = function stopSilentRenew() {
        this._silentRenewService.stop();
    };

    UserManager.prototype._loadUser = function _loadUser() {
        return this._userStore.get(this._userStoreKey).then(function (storageString) {
            if (storageString) {
                _Log.Log.debug("UserManager._loadUser: user storageString loaded");
                return _User.User.fromStorageString(storageString);
            }

            _Log.Log.debug("UserManager._loadUser: no user storageString");
            return null;
        });
    };

    UserManager.prototype.storeUser = function storeUser(user) {
        if (user) {
            _Log.Log.debug("UserManager.storeUser: storing user");

            var storageString = user.toStorageString();
            return this._userStore.set(this._userStoreKey, storageString);
        } else {
            _Log.Log.debug("storeUser.storeUser: removing user");
            return this._userStore.remove(this._userStoreKey);
        }
    };

    _createClass(UserManager, [{
        key: '_redirectNavigator',
        get: function get() {
            return this.settings.redirectNavigator;
        }
    }, {
        key: '_popupNavigator',
        get: function get() {
            return this.settings.popupNavigator;
        }
    }, {
        key: '_iframeNavigator',
        get: function get() {
            return this.settings.iframeNavigator;
        }
    }, {
        key: '_userStore',
        get: function get() {
            return this.settings.userStore;
        }
    }, {
        key: 'events',
        get: function get() {
            return this._events;
        }
    }, {
        key: '_userStoreKey',
        get: function get() {
            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
        }
    }]);

    return UserManager;
}(_OidcClient2.OidcClient);

/***/ }),

/***/ "./src/UserManagerEvents.js":
/*!**********************************!*\
  !*** ./src/UserManagerEvents.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerEvents = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _AccessTokenEvents2 = __webpack_require__(/*! ./AccessTokenEvents.js */ "./src/AccessTokenEvents.js");

var _Event = __webpack_require__(/*! ./Event.js */ "./src/Event.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManagerEvents = exports.UserManagerEvents = function (_AccessTokenEvents) {
    _inherits(UserManagerEvents, _AccessTokenEvents);

    function UserManagerEvents(settings) {
        _classCallCheck(this, UserManagerEvents);

        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));

        _this._userLoaded = new _Event.Event("User loaded");
        _this._userUnloaded = new _Event.Event("User unloaded");
        _this._silentRenewError = new _Event.Event("Silent renew error");
        _this._userSignedIn = new _Event.Event("User signed in");
        _this._userSignedOut = new _Event.Event("User signed out");
        _this._userSessionChanged = new _Event.Event("User session changed");
        return _this;
    }

    UserManagerEvents.prototype.load = function load(user) {
        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _Log.Log.debug("UserManagerEvents.load");
        _AccessTokenEvents.prototype.load.call(this, user);
        if (raiseEvent) {
            this._userLoaded.raise(user);
        }
    };

    UserManagerEvents.prototype.unload = function unload() {
        _Log.Log.debug("UserManagerEvents.unload");
        _AccessTokenEvents.prototype.unload.call(this);
        this._userUnloaded.raise();
    };

    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
        this._userLoaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
        this._userLoaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
        this._userUnloaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
        this._userUnloaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
        this._silentRenewError.addHandler(cb);
    };

    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
        this._silentRenewError.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
        _Log.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message);
        this._silentRenewError.raise(e);
    };

    UserManagerEvents.prototype.addUserSignedIn = function addUserSignedIn(cb) {
        this._userSignedIn.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSignedIn = function removeUserSignedIn(cb) {
        this._userSignedIn.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSignedIn = function _raiseUserSignedIn() {
        _Log.Log.debug("UserManagerEvents._raiseUserSignedIn");
        this._userSignedIn.raise();
    };

    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
        this._userSignedOut.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
        this._userSignedOut.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut() {
        _Log.Log.debug("UserManagerEvents._raiseUserSignedOut");
        this._userSignedOut.raise();
    };

    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
        this._userSessionChanged.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
        this._userSessionChanged.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged() {
        _Log.Log.debug("UserManagerEvents._raiseUserSessionChanged");
        this._userSessionChanged.raise();
    };

    return UserManagerEvents;
}(_AccessTokenEvents2.AccessTokenEvents);

/***/ }),

/***/ "./src/UserManagerSettings.js":
/*!************************************!*\
  !*** ./src/UserManagerSettings.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerSettings = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClientSettings2 = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _RedirectNavigator = __webpack_require__(/*! ./RedirectNavigator.js */ "./src/RedirectNavigator.js");

var _PopupNavigator = __webpack_require__(/*! ./PopupNavigator.js */ "./src/PopupNavigator.js");

var _IFrameNavigator = __webpack_require__(/*! ./IFrameNavigator.js */ "./src/IFrameNavigator.js");

var _WebStorageStateStore = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60;
var DefaultCheckSessionInterval = 2000;

var UserManagerSettings = exports.UserManagerSettings = function (_OidcClientSettings) {
    _inherits(UserManagerSettings, _OidcClientSettings);

    function UserManagerSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            popup_redirect_uri = _ref.popup_redirect_uri,
            popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
            popupWindowFeatures = _ref.popupWindowFeatures,
            popupWindowTarget = _ref.popupWindowTarget,
            silent_redirect_uri = _ref.silent_redirect_uri,
            silentRequestTimeout = _ref.silentRequestTimeout,
            _ref$automaticSilentR = _ref.automaticSilentRenew,
            automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR,
            _ref$validateSubOnSil = _ref.validateSubOnSilentRenew,
            validateSubOnSilentRenew = _ref$validateSubOnSil === undefined ? false : _ref$validateSubOnSil,
            _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
            includeIdTokenInSilentRenew = _ref$includeIdTokenIn === undefined ? true : _ref$includeIdTokenIn,
            _ref$monitorSession = _ref.monitorSession,
            monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession,
            _ref$monitorAnonymous = _ref.monitorAnonymousSession,
            monitorAnonymousSession = _ref$monitorAnonymous === undefined ? false : _ref$monitorAnonymous,
            _ref$checkSessionInte = _ref.checkSessionInterval,
            checkSessionInterval = _ref$checkSessionInte === undefined ? DefaultCheckSessionInterval : _ref$checkSessionInte,
            _ref$stopCheckSession = _ref.stopCheckSessionOnError,
            stopCheckSessionOnError = _ref$stopCheckSession === undefined ? true : _ref$stopCheckSession,
            query_status_response_type = _ref.query_status_response_type,
            _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
            revokeAccessTokenOnSignout = _ref$revokeAccessToke === undefined ? false : _ref$revokeAccessToke,
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$redirectNavigato = _ref.redirectNavigator,
            redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator.RedirectNavigator() : _ref$redirectNavigato,
            _ref$popupNavigator = _ref.popupNavigator,
            popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator.PopupNavigator() : _ref$popupNavigator,
            _ref$iframeNavigator = _ref.iframeNavigator,
            iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator.IFrameNavigator() : _ref$iframeNavigator,
            _ref$userStore = _ref.userStore,
            userStore = _ref$userStore === undefined ? new _WebStorageStateStore.WebStorageStateStore({ store: _Global.Global.sessionStorage }) : _ref$userStore;

        _classCallCheck(this, UserManagerSettings);

        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));

        _this._popup_redirect_uri = popup_redirect_uri;
        _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
        _this._popupWindowFeatures = popupWindowFeatures;
        _this._popupWindowTarget = popupWindowTarget;

        _this._silent_redirect_uri = silent_redirect_uri;
        _this._silentRequestTimeout = silentRequestTimeout;
        _this._automaticSilentRenew = automaticSilentRenew;
        _this._validateSubOnSilentRenew = validateSubOnSilentRenew;
        _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        _this._monitorSession = monitorSession;
        _this._monitorAnonymousSession = monitorAnonymousSession;
        _this._checkSessionInterval = checkSessionInterval;
        _this._stopCheckSessionOnError = stopCheckSessionOnError;
        if (query_status_response_type) {
            _this._query_status_response_type = query_status_response_type;
        } else if (arguments[0] && arguments[0].response_type) {
            _this._query_status_response_type = _SigninRequest.SigninRequest.isOidc(arguments[0].response_type) ? "id_token" : "code";
        } else {
            _this._query_status_response_type = "id_token";
        }
        _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;

        _this._redirectNavigator = redirectNavigator;
        _this._popupNavigator = popupNavigator;
        _this._iframeNavigator = iframeNavigator;

        _this._userStore = userStore;
        return _this;
    }

    _createClass(UserManagerSettings, [{
        key: 'popup_redirect_uri',
        get: function get() {
            return this._popup_redirect_uri;
        }
    }, {
        key: 'popup_post_logout_redirect_uri',
        get: function get() {
            return this._popup_post_logout_redirect_uri;
        }
    }, {
        key: 'popupWindowFeatures',
        get: function get() {
            return this._popupWindowFeatures;
        }
    }, {
        key: 'popupWindowTarget',
        get: function get() {
            return this._popupWindowTarget;
        }
    }, {
        key: 'silent_redirect_uri',
        get: function get() {
            return this._silent_redirect_uri;
        }
    }, {
        key: 'silentRequestTimeout',
        get: function get() {
            return this._silentRequestTimeout;
        }
    }, {
        key: 'automaticSilentRenew',
        get: function get() {
            return this._automaticSilentRenew;
        }
    }, {
        key: 'validateSubOnSilentRenew',
        get: function get() {
            return this._validateSubOnSilentRenew;
        }
    }, {
        key: 'includeIdTokenInSilentRenew',
        get: function get() {
            return this._includeIdTokenInSilentRenew;
        }
    }, {
        key: 'accessTokenExpiringNotificationTime',
        get: function get() {
            return this._accessTokenExpiringNotificationTime;
        }
    }, {
        key: 'monitorSession',
        get: function get() {
            return this._monitorSession;
        }
    }, {
        key: 'monitorAnonymousSession',
        get: function get() {
            return this._monitorAnonymousSession;
        }
    }, {
        key: 'checkSessionInterval',
        get: function get() {
            return this._checkSessionInterval;
        }
    }, {
        key: 'stopCheckSessionOnError',
        get: function get() {
            return this._stopCheckSessionOnError;
        }
    }, {
        key: 'query_status_response_type',
        get: function get() {
            return this._query_status_response_type;
        }
    }, {
        key: 'revokeAccessTokenOnSignout',
        get: function get() {
            return this._revokeAccessTokenOnSignout;
        }
    }, {
        key: 'redirectNavigator',
        get: function get() {
            return this._redirectNavigator;
        }
    }, {
        key: 'popupNavigator',
        get: function get() {
            return this._popupNavigator;
        }
    }, {
        key: 'iframeNavigator',
        get: function get() {
            return this._iframeNavigator;
        }
    }, {
        key: 'userStore',
        get: function get() {
            return this._userStore;
        }
    }]);

    return UserManagerSettings;
}(_OidcClientSettings2.OidcClientSettings);

/***/ }),

/***/ "./src/WebStorageStateStore.js":
/*!*************************************!*\
  !*** ./src/WebStorageStateStore.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebStorageStateStore = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var WebStorageStateStore = exports.WebStorageStateStore = function () {
    function WebStorageStateStore() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$prefix = _ref.prefix,
            prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix,
            _ref$store = _ref.store,
            store = _ref$store === undefined ? _Global.Global.localStorage : _ref$store;

        _classCallCheck(this, WebStorageStateStore);

        this._store = store;
        this._prefix = prefix;
    }

    WebStorageStateStore.prototype.set = function set(key, value) {
        _Log.Log.debug("WebStorageStateStore.set", key);

        key = this._prefix + key;

        this._store.setItem(key, value);

        return Promise.resolve();
    };

    WebStorageStateStore.prototype.get = function get(key) {
        _Log.Log.debug("WebStorageStateStore.get", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.remove = function remove(key) {
        _Log.Log.debug("WebStorageStateStore.remove", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);
        this._store.removeItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
        _Log.Log.debug("WebStorageStateStore.getAllKeys");

        var keys = [];

        for (var index = 0; index < this._store.length; index++) {
            var key = this._store.key(index);

            if (key.indexOf(this._prefix) === 0) {
                keys.push(key.substr(this._prefix.length));
            }
        }

        return Promise.resolve(keys);
    };

    return WebStorageStateStore;
}();

/***/ }),

/***/ "./src/crypto/jsrsasign.js":
/*!*********************************!*\
  !*** ./src/crypto/jsrsasign.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AllowedSigningAlgs = exports.b64tohex = exports.hextob64u = exports.crypto = exports.X509 = exports.KeyUtil = exports.jws = undefined;

var _jsrsasign = __webpack_require__(/*! ../../jsrsasign/dist/jsrsasign.js */ "./jsrsasign/dist/jsrsasign.js");

var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];

exports.jws = _jsrsasign.jws;
exports.KeyUtil = _jsrsasign.KEYUTIL;
exports.X509 = _jsrsasign.X509;
exports.crypto = _jsrsasign.crypto;
exports.hextob64u = _jsrsasign.hextob64u;
exports.b64tohex = _jsrsasign.b64tohex;
exports.AllowedSigningAlgs = AllowedSigningAlgs;

/***/ }),

/***/ "./src/random.js":
/*!***********************!*\
  !*** ./src/random.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = random;
/**
 * Generates RFC4122 version 4 guid ()
 */

var crypto = typeof window !== 'undefined' ? window.crypto || window.msCrypto : null;

function _cryptoUuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
}

function _uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ Math.random() * 16 >> c / 4).toString(16);
  });
}

function random() {
  var hasCrypto = crypto != 'undefined' && crypto !== null;
  var hasRandomValues = hasCrypto && typeof crypto.getRandomValues != 'undefined';
  var uuid = hasRandomValues ? _cryptoUuidv4 : _uuidv4;
  return uuid().replace(/-/g, '');
}
module.exports = exports['default'];

/***/ }),

/***/ "./version.js":
/*!********************!*\
  !*** ./version.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Version = "1.11.5";exports.Version = Version;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,